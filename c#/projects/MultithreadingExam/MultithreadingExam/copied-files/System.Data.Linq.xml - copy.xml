<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Data.Linq.Binary">
      <summary>Представляет неизменяемый блок двоичных данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Binary" />.</summary>
      <param name="value">Байты, представляющие двоичные данные.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>Определяет, равны ли два двоичных объекта.</summary>
      <param name="other">Объект <see cref="T:System.Object" />, с которым сравнивается текущий объект.</param>
      <returns>Значение <see langword="true" />, если два двоичных объекта равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему объекту <see cref="T:System.Object" />.</summary>
      <param name="obj">Объект <see cref="T:System.Object" />, с которым сравнивается текущий объект <see cref="T:System.Object" />.</param>
      <returns>Значение <see langword="true" />, если два двоичных объекта равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего двоичного объекта.</returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>Возвращает длину двоичного объекта.</summary>
      <returns>Целое число, представляющее длину.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Описывает равенство между двумя двоичными объектами.</summary>
      <param name="binary1">Первый двоичный объект.</param>
      <param name="binary2">Второй двоичный объект.</param>
      <returns>Значение <see langword="true" />, если двоичные объекты равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>Позволяет неявно привести массивы байтов к типу <see cref="T:System.Data.Linq.Binary" /> в языке программирования.</summary>
      <param name="value">Массив байтов для преобразования в экземпляр типа <see cref="T:System.Data.Linq.Binary" />.</param>
      <returns>Класс <see cref="T:System.Data.Linq.Binary" />, содержащий приведенное значение.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Описывает неравенство между двумя двоичными объектами.</summary>
      <param name="binary1">Первый двоичный объект.</param>
      <param name="binary2">Второй двоичный объект.</param>
      <returns>Значение <see langword="true" />, если двоичные объекты не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>Возвращает массив байтов, который представляет текущий двоичный объект.</summary>
      <returns>Массив байтов, содержащий значение текущего двоичного объекта.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>Возвращает строку <see cref="T:System.String" />, представляющую текущий двоичный объект.</summary>
      <returns>Строка <see cref="T:System.String" />, представляющая текущий двоичный объект.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>Описывает тип изменения, которому подвергнется сущность, когда изменения будут отправлены в базу данных.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>Сущность будет удалена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>Сущность будет вставлена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>Сущность не будет отправлена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>Сущность будет обновлена.</summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>Возвращает коллекцию объектов, участвующих в конфликтах параллелизма.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>Удаляет все конфликты из коллекции.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>Указывает, является ли указанный конфликт членом коллекции.</summary>
      <param name="item">Указанный конфликт.</param>
      <returns>Значение <see langword="true" />, если указанный конфликт является членом коллекции, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">Массив для копирования данных.</param>
      <param name="arrayIndex">Индекс массива, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>Возвращает количество конфликтов в коллекции.</summary>
      <returns>целочисленный</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>Возвращает перечислитель для коллекции.</summary>
      <returns>Перечислитель для коллекции.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>Возвращает конфликтующий элемент.</summary>
      <param name="index">Индекс конфликтующего элемента в коллекции.</param>
      <returns>Объект <see cref="T:System.Data.Linq.ObjectChangeConflict" />, представляющий участвующий в конфликте элемент.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>Указывает, удален ли указанный конфликт из коллекции.</summary>
      <param name="item">Конфликт для удаления.</param>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.Linq.ObjectChangeConflict" /> был удален из коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>Разрешает все конфликты в коллекции, используя указанную стратегию.</summary>
      <param name="mode">Один из параметров, доступных в <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Разрешает все конфликты в коллекции, используя указанную стратегию.</summary>
      <param name="mode">Стратегия, используемая для разрешения конфликта.</param>
      <param name="autoResolveDeletes">Если значение равно true, автоматически разрешает конфликты, которые являются результатом измененного объекта, который больше не находится в базе данных.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">Добавляемый элемент.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>
        <see langword="true" /> Если коллекция доступна только для чтения.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует коллекцию в массив.</summary>
      <param name="array">Имя массива.</param>
      <param name="index">Индекс массива.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>Перечислитель, который осуществляет перебор коллекции.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>Возникает при сбое обновления, так как значения базы данных были обновлены с момента, когда клиент считывал их в последний раз.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ChangeConflictException" />.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ChangeConflictException" /> и указывает сообщение с описанием исключения.</summary>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ChangeConflictException" />, указывает сообщение с описанием исключения и задает исключение, послужившее причиной этого исключения.</summary>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
      <param name="innerException">Указывает исключение, результатом которого является <see cref="T:System.Data.Linq.ChangeConflictException" />.</param>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>Предоставляет контейнер для изменений.</summary>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>Получает список сущностей, которые были удалены из <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> удаленных сущностей.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>Получает список сущностей, которые были вставлены в <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> вставленных сущностей.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>Возвращает строку, которая представляет текущий объект <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Строка, представляющая текущий объект <see cref="T:System.Data.Linq.ChangeSet" />.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>Получает список сущностей, которые были обновлены в <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> обновленных сущностей.</returns>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>Предусматривает компиляцию и кэширование запросов для повторного использования.</summary>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg15">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Компилирует запрос.</summary>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>Возвращает запрос как лямбда-выражение.</summary>
      <returns>Лямбда-выражение, которое предоставляет запрос.</returns>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>Указывает, когда должны создаваться отчеты о конфликтах параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>Указывает, что следует испытать все обновления базы данных и что конфликты параллелизма должны быть собраны и возвращены в конце процесса.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>Указывает, что попытки обновления базы данных должны быть немедленно прекращены, когда будет выявлена первая ошибка конфликта параллелизма.</summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>Представляет основную точку входа для платформы LINQ to SQL.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на подключение, используемое .NET Framework.</summary>
      <param name="connection">Подключение, используемое .NET Framework.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на подключение и источник сопоставления.</summary>
      <param name="connection">Соединение, используемое платформой .NET Framework.</param>
      <param name="mapping">Источник сопоставления.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на источник файла.</summary>
      <param name="fileOrServerOrConnection">Этот аргумент может принимать любое из следующих значений. Имя файла, где находится база данных SQL Server Express.
Имя сервера, где находится база данных. В этом случае поставщик использует для пользователя базу данных по умолчанию.  
Полная строка подключения. LINQ to SQL просто передает строку поставщику без изменений.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на источник файлов и источник сопоставления.</summary>
      <param name="fileOrServerOrConnection">Этот аргумент может принимать любое из следующих значений: 
Имя файла, где находится база данных SQL Server Express.  
Имя сервера, где находится база данных. В этом случае поставщик использует для пользователя базу данных по умолчанию.  
Полная строка подключения. LINQ to SQL просто передает строку поставщику без изменений.</param>
      <param name="mapping">Источник сопоставления.</param>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>Возвращает коллекцию объектов, ставшую причиной конфликта параллелизма, когда был вызван метод <see cref="M:System.Data.Linq.DataContext.SubmitChanges" />.</summary>
      <returns>Коллекция объектов, ставшая причиной конфликта параллелизма.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Comm*******Timeout">
      <summary>Возвращает или задает значение, которое увеличивает время ожидания для запросов, для которых в противном случае истекло время ожидание в течение времени ожидания по умолчанию.</summary>
      <returns>Целое число, которое увеличивает время ожидания для запросов, для которых в противном случае истекло время ожидание в течение времени ожидания по умолчанию.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>Возвращает подключение, используемое платформой.</summary>
      <returns>Подключение, используемое платформой.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>Создает базу данных на сервере.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Выполняет табличную функцию базы данных, связанную с указанным методом .NET.</summary>
      <param name="instance">Экземпляр вызова метода (текущий объект).</param>
      <param name="methodInfo">Атрибут <see cref="T:System.Reflection.MethodInfo" /> который определяет метод .NET, соответствующий методу базы данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TResult">Тип элементов в возвращаемой коллекции.</typeparam>
      <returns>Коллекция результирующих значений, возвращаемых запросом базы данных.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>Определяет, можно ли открыть связанную базу данных.</summary>
      <returns>Значение <see langword="true" />, если указанную базу данных можно открыть; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>Возвращает или задает значение, указывающее, следует ли загружать с задержкой связи "один к одному" или "один ко многим".</summary>
      <returns>
        <see langword="true" />, если отложенная загрузка разрешена; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>Удаляет связанную базу данных.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Data.Linq.DataContext" />.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Data.Linq.DataContext" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteComm*******(System.String,System.Object[])">
      <summary>Выполняет команды SQL непосредственно в базе данных.</summary>
      <param name="comm*******">Выполняемая команда SQL.</param>
      <param name="parameters">Массив параметров для передачи команде. Обратите внимание на следующее поведение. 
Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.  
Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.  
Если значение одного из параметров равно NULL, оно преобразуется в значение <see langword="DBNull.Value" />.</param>
      <returns>Количество строк, измененных выполненной командой.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>Выполняет внутренние методы переопределения удаления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций удаления.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>Выполняет внутренние методы переопределения вставки для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций вставки.</summary>
      <param name="entity">Сущность, которая будет вставлена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>Выполняет внутренние методы переопределения обновления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций обновления.</summary>
      <param name="entity">Сущность, которая будет обновлена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Выполняет хранимую процедуру базы данных или скалярную функцию, связанную с указанным методом .NET.</summary>
      <param name="instance">Экземпляр вызова метода (текущий объект).</param>
      <param name="methodInfo">Определяет метод .NET, соответствующий методу базы данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <returns>Результат (возвращаемое значение и выходные параметры) выполнения указанного метода.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>Выполняет SQL-запросы непосредственно в базе данных.</summary>
      <param name="elementType">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен.  
Алгоритм сопоставления столбцов в результате запроса с полями или свойствами в объекте работает, как показано далее. 
Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.  
Если поле или свойство не сопоставляется, столбец с тем же именем, что и поле или свойство, ожидается в наборе результатов.  
Сначала в сравнении выполняется поиск совпадения с учетом регистра. Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.  
Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, загрузка которых отложена), если выполняются все следующие условия. 
 T является сущностью, явно отслеживаемой <see cref="T:System.Data.Linq.DataContext" />.  
 Свойство <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение <see langword="true" />.  
Сущность имеет первичный ключ.  
В противном случае возникает исключение.</param>
      <param name="query">Запрос SQL для выполнения.</param>
      <param name="parameters">Массив параметров для передачи команде. Обратите внимание на следующее поведение. 
Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.  
Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.  
Если значение параметра равно <see langword="null" />, он преобразовывается в <see langword="DBNull.Value" />.</param>
      <returns>Коллекция объектов <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемых запросом.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>Выполняет запросы SQL непосредственно в базе данных и возвращает объекты.</summary>
      <param name="query">Запрос SQL для выполнения.</param>
      <param name="parameters">Массив параметров для передачи команде. Обратите внимание на следующее поведение. 
Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.  
Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.  
Если значение параметра равно NULL, он преобразуется в <see langword="DBNull.Value" />.</param>
      <typeparam name="TResult">Тип элементов в возвращаемой коллекции.</typeparam>
      <returns>Коллекция объектов, возвращенных запросом.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>Возвращает измененные объекты, отслеживаемые <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>Набор объектов возвращается как три коллекции, доступные только для чтения.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetComm*******(System.Linq.IQueryable)">
      <summary>Возвращает сведения о командах SQL, созданных LINQ to SQL.</summary>
      <param name="query">Запрос, сведения о команде SQL которого должны быть извлечены.</param>
      <returns>Запрошенный объект данных команды.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>Возвращает коллекцию объектов определенного типа, где тип определяется параметром <paramref name="type" />.</summary>
      <param name="type">Тип возвращаемых объектов.</param>
      <returns>Коллекция объектов, определенных параметром <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>Возвращает коллекцию объектов определенного типа, где тип определяется параметром <paramref name="TEntity" />.</summary>
      <typeparam name="TEntity">Тип возвращаемых объектов.</typeparam>
      <returns>Коллекция объектов, определенных параметром <paramref name="TEntity" />.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Linq.DataLoadOptions" />, связанный с данным объектом <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>Предварительно выбранные параметры загрузки для связанных данных.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>Возвращает или задает назначение для записи команды или запроса SQL.</summary>
      <returns>Объект <see cref="T:System.IO.TextReader" /> для записи команды.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" />, на котором основано сопоставление.</summary>
      <returns>Сопоставление между базой данных и объектами домена.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>Возвращает или задает значение, указывающее, включено ли отслеживание объекта.</summary>
      <returns>Значение <see langword="true" />, если отслеживание объекта включено; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="true" />.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>Обновляет коллекцию объектов сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма.</param>
      <param name="entities">Коллекция сущностей, которые должны быть обновлены.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>Обновляет объект сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма.</param>
      <param name="entity">Обновляемый объект.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>Обновляет массив объектов сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма.</param>
      <param name="entities">Обновляемый массив объектов сущности.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>Вычисляет набор измененных объектов, которые следует вставить, обновить или удалить, и выполняет соответствующие команды для внесения изменений в базу данных.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>Отправляет изменения, которые были внесены в извлеченные объекты для основной базы данных, и указывает действие, которое следует выполнить, если не удастся осуществить передачу.</summary>
      <param name="failureMode">Действие, выполняемое в случае сбоя отправки. Ниже приведены допустимые аргументы. 
 <see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></param>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>Возвращает или задает локальную транзакцию для использования .NET Framework для доступа к базе данных.</summary>
      <returns>Объект транзакции, который используется объектом <see cref="T:System.Data.Linq.DataContext" /> при выполнении запросов и команд.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <param name="reader">Преобразуемая структура <see cref="T:System.Data.IDataReader" />.</param>
      <returns>Список объектов, возвращаемых преобразованием.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <param name="elementType">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен.  
Алгоритм сопоставления столбцов в результате с полями и свойствами в объекте работает таким образом: 
Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.  
Если поле или свойство не сопоставляется, столбец с тем же именем, что и поле или свойство, ожидается в наборе результатов.  
Сначала в сравнении выполняется поиск совпадения с учетом регистра. Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.  
Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, загрузка которых отложена), если выполняются все следующие условия. 
 T является сущностью, явно отслеживаемой <see cref="T:System.Data.Linq.DataContext" />.  
 Свойство <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение <see langword="true" />.  
Сущность имеет первичный ключ.  
В противном случае возникает исключение.</param>
      <param name="reader">Преобразуемая структура <see cref="T:System.Data.IDataReader" />.</param>
      <returns>Список объектов, возвращаемых преобразованием.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <param name="reader">Преобразуемая структура <see cref="T:System.Data.IDataReader" />.</param>
      <typeparam name="TResult">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен.</typeparam>
      <returns>Коллекция объектов, возвращаемых преобразованием.</returns>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>Предоставляет немедленную загрузку и фильтрацию связанных данных.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataLoadOptions" />.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Фильтрует объекты, полученные для определенной связи.</summary>
      <param name="expression">Определяет запрос, который следует использовать для свойства или поля связи "один ко многим". Следует отметить следующее. 
Если выражение не запускается с помощью поля или свойства, представляющих связь "один ко многим", создается исключение.  
Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение. Допустимы следующие операторы: 
Где 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Фильтрует объекты, извлеченные для определенной связи.</summary>
      <param name="expression">Определяет запрос, который следует использовать для свойства или поля связи "один ко многим". Следует отметить следующее. 
Если выражение не запускается с помощью поля или свойства, представляющих связь "один ко многим", создается исключение.  
Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение. Допустимы следующие операторы: 
Где 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
      <typeparam name="T">Запрашиваемый тип.  
Если тип не сопоставляется, создается исключение.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Получает указанные данные, связанные с основным целевым объектом с помощью лямбда-выражения.</summary>
      <param name="expression">Лямбда-выражение, определяющее связанный материал.</param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Указывает, какие вложенные объекты следует получить при отправке запроса для объекта типа Т.</summary>
      <param name="expression">Определяет поле или свойство для извлечения.  
Если выражение не определяет поле или свойство, представляющие связь "один к одному" или "один ко многим", создается исключение.</param>
      <typeparam name="T">Запрашиваемый тип.  
Если этот тип не сопоставляется, создается исключение.</typeparam>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>Используется внутренним образом для преобразования одного типа в другой.</summary>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>Изменяет указанное значение на указанный тип.</summary>
      <param name="value">Преобразуемый объект.</param>
      <param name="type">Тип, в который требуется преобразовать объект.</param>
      <returns>Объект, содержащий преобразованное значение указанного типа.</returns>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>Изменяет указанное значение на текущий тип.</summary>
      <param name="value">Преобразуемый объект.</param>
      <typeparam name="T">Тип для осуществления изменения.</typeparam>
      <returns>Объект указанного типа, содержащий преобразованное значение.</returns>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>Создается, когда выполняется попытка добавить объект в кэш идентификации с помощью ключа, который уже используется.</summary>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />, ссылаясь на дубликат ключа и создавая сообщение об ошибке.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />, ссылаясь на дубликат ключа, создавая сообщение об ошибке и указывая исключение, которое стало причиной создания исключения.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
      <param name="innerException">Предыдущее исключение, которое вызвало данное исключение <see cref="T:System.Data.Linq.DuplicateKeyException" />.</param>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>Получает объект, ставший причиной исключения.</summary>
      <returns>Объект, ставший причиной исключения.</returns>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>Обеспечивает отложенную загрузку и связь для одиночной стороны связи "один ко многим" в приложении LINQ to SQL.</summary>
      <typeparam name="TEntity">Тип конечной сущности.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" />, указывая целевую сущность.</summary>
      <param name="entity">Целевая сущность.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" />, указывая источник.</summary>
      <param name="source">Указанный источник.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" />, ссылаясь на целевую сущность.</summary>
      <param name="entityRef">Целевая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>Получает или задает целевую сущность.</summary>
      <returns>Целевая сущность.</returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>Получает значение, указывающее, был ли целевой объект загружен или назначен.</summary>
      <returns>Значение <see langword="True" />, если целевой объект был загружен или назначен.</returns>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>Обеспечивает отложенную загрузку и поддержку связей "один ко многим" и "один к одному" на стороне коллекции в приложениях LINQ to SQL.</summary>
      <typeparam name="TEntity">Тип данных целевой сущности.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntitySet`1" />, предоставляя обработчики для операций добавления и удаления.</summary>
      <param name="onAdd">Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
      <param name="onRemove">Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>Добавляет сущность.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет коллекцию сущностей.</summary>
      <param name="collection">Добавляемая коллекция.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>Назначает коллекцию <see cref="T:System.Data.Linq.EntitySet`1" /> другой коллекции <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">Коллекция для назначения.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>Удаляет все элементы.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>Указывает, содержит ли <see cref="T:System.Data.Linq.EntitySet`1" /> указанную сущность.</summary>
      <param name="entity">Сущность.</param>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.Linq.EntitySet`1" /> содержит сущность; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует <see cref="T:System.Data.Linq.EntitySet`1" /> в массив.</summary>
      <param name="array">Массив для копирования данных.</param>
      <param name="arrayIndex">Начальный индекс в массиве.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>Получает количество сущностей в коллекции <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <returns>Целое число, представляющее количество сущностей.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>Создает новый список для привязки к источнику данных.</summary>
      <returns>Новый список <see cref="T:System.ComponentModel.IBindingList" /> для привязки к источнику данных.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>Указывает, был ли загружен <see cref="T:System.Data.Linq.EntitySet`1" /> или было ли ему присвоено значение.</summary>
      <returns>
        <see langword="true" /> Если <see cref="T:System.Data.Linq.EntitySet`1" /> загруженное или присвоенное значение; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>Возвращает индекс сущности.</summary>
      <param name="entity">Сущность, индекс которой возвращается.</param>
      <returns>Целое число, представляющее индекс.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>Вставляет сущность в позицию индекса.</summary>
      <param name="index">Индекс, представляющий позицию для вставки сущности.</param>
      <param name="entity">Сущность, которая будет вставлена.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>Указывает, содержит ли этот <see cref="T:System.Data.Linq.EntitySet`1" /> отложенный запрос, который еще не был выполнен.</summary>
      <returns>
        <see langword="true" /> Если отложенный запрос еще не была выполнена; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Индекс элемента.</param>
      <returns>Объект <see cref="T:System.Data.Linq.EntitySet`1" />, представляющий элемент.</returns>
    </member>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>Происходит при изменении содержимого списка.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>Загружает <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>Удаляет сущность.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
      <returns>Значение <see langword="true" />, если сущность успешно удалена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>Удаляет сущность по указанному индексу.</summary>
      <param name="index">Индекс сущности, которую необходимо удалить.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>Задает источник для <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">Источник для <see cref="T:System.Data.Linq.EntitySet`1" />.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">Массив, в который копируются элементы коллекции.</param>
      <param name="index">Индекс массива, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для итерации коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <param name="value">Объект, который нужно добавить в список.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Object" /> найден в <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">Индекс объекта в списке.</param>
      <param name="value">Объект, который нужно вставить в список.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <param name="index">Индекс, по которому нужно извлечь или задать элемент.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">Объект, который нужно удалить из списка.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IList" />, который можно привязать к источнику данных из объекта.</returns>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>Представляет ошибки, которые возникают при попытке изменить внешний ключ, если сущность уже загружена.</summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> с системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> с использованием заданного сообщения, содержащего описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>Предоставляет доступ к возвращаемому значению или результатам выполнения запроса.</summary>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>Предоставляет доступ к n-ному выходному параметру.</summary>
      <param name="parameterIndex">Индекс извлекаемого параметра.</param>
      <returns>Объект, содержащий значение указанного параметра.</returns>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>Получает возвращаемое значение или результат выполненного запроса.</summary>
      <returns>Значение или результат выполненного запроса.</returns>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>Предоставляет доступ к возвращаемому значению функции.</summary>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>Возвращает возвращаемое значение функции.</summary>
      <returns>Значение, возвращаемое функцией.</returns>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>Представляет результаты сопоставляемых функций и запросов с последовательностями, возвращающими переменные.</summary>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>Извлекает следующий результат как последовательность указанного типа.</summary>
      <typeparam name="TElement">Тип возвращаемой последовательности.</typeparam>
      <returns>Перечисление для итерации результатов.</returns>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>Представляет результат сопоставленной функции, которая содержит одну возвращаемую последовательность.</summary>
      <typeparam name="T">Тип элементов второй возвращаемой последовательности.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>Используется для слабо типизированных сценариев запросов.</summary>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entity">Коллекция сущностей.</param>
      <param name="asModified">
        <see langword="true" /> — прикрепление сущностей в измененном состоянии.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <param name="asModified">
        <see langword="true" /> — прикрепление сущностей в измененном состоянии.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>Получает объект <see cref="T:System.Data.Linq.DataContext" />, который использовался для извлечения этого объекта <see cref="T:System.Data.Linq.ITable" />.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.DataContext" />, который использовался для извлечения объекта <see cref="T:System.Data.Linq.ITable" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Помещает все сущности из коллекции в состояние <see langword="pending delete" />.</summary>
      <param name="entities">Коллекция, из которой удалены все элементы.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>Помещает сущность из таблицы в состояние <see langword="pending delete" />.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>Возвращает массив измененных членов, содержащих их текущее и исходное значения.</summary>
      <param name="entity">Объект, из которого следует получить массив.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>Извлекает исходные значения.</summary>
      <param name="entity">Сущность, исходное значение которой будет извлечено.</param>
      <returns>Копия исходной сущности. Значение равно NULL, если передаваемая сущность не отслеживается. Отключенные сущности, отправленные обратно клиентом, должны быть присоединены до того, как <see cref="T:System.Data.Linq.DataContext" /> сможет начать отслеживать их состояние. "Исходное состояние" только что присоединенной сущности устанавливается на основе значений, предоставленных клиентом. Контекст данных не отслеживает состояние отключенных сущностей.</returns>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в состояние <see langword="pending insert" />.</summary>
      <param name="entities">Добавляемые сущности.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>Добавляет сущность в состояние <see langword="pending insert" /> для этой таблицы.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>Указывает, есть ли у типа сущностей, содержащихся в данном экземпляре <see cref="T:System.Data.Linq.ITable" />, первичный ключ.</summary>
      <returns>Значение <see langword="true" />, если тип сущности не имеет первичный ключ; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>Представляет таблицу для определенного типа в основной базе данных.</summary>
      <typeparam name="TEntity">Тип данных в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>При переопределении прикрепляет отключенную или "отсоединенную" сущность к новому контексту <see cref="T:System.Data.Linq.DataContext" />, когда исходные значения необходимы для проверок оптимистичного параллелизма.</summary>
      <param name="entity">Добавляемый объект.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>При переопределении приводит сущность из данной таблицы в состояние <see langword="pending delete" />.</summary>
      <param name="entity">Удаляемый объект.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>При переопределении добавляет сущность в состоянии <see langword="pending insert" /> в данную таблицу <see cref="T:System.Data.Linq.ITable`1" />.</summary>
      <param name="entity">Вставляемый объект.</param>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>Используется для включения отложенной загрузки для отдельных свойств (сходных с <see cref="T:System.Data.Linq.EntityRef`1" />).</summary>
      <typeparam name="T">Тип элементов в отложенном источнике.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, ссылаясь на значение свойства.</summary>
      <param name="value">Значение для свойства.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, ссылаясь на источник.</summary>
      <param name="source">Коллекция источника.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, копируя внутреннее состояние из другого экземпляра <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <param name="link">Экземпляр <see cref="T:System.Data.Linq.Link`1" />, из которого следует выполнить копирование.</param>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>Указывает, был ли загружен <see cref="T:System.Data.Linq.Link`1" /> или было ли ему присвоено значение.</summary>
      <returns>
        <see langword="true" /> Если <see cref="T:System.Data.Linq.Link`1" /> загруженное или присвоенное значение; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>Получает значение, указывающее, содержит ли источник значение.</summary>
      <returns>
        <see langword="true" /> Если источник содержит присвоенное или загруженное значение (включая значение null); в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>Получает или задает значение, присвоенное или загруженное с помощью <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <returns>Значение этого отложенного свойства.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>Определяет свойство как представляющее ассоциацию базы данных, например отношение внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>При задании данного свойства для ассоциации типа 1:1, в которой члены внешнего ключа не поддерживают значение NULL, при установке для ассоциации значения NULL объект удаляется.</summary>
      <returns>При задании значения <see langword="True" /> объект удаляется. Значение по умолчанию — <see langword="False" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>Получает или задает поведение удаления для ассоциации.</summary>
      <returns>Строка, представляющая правило.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>Получает или задает член как внешний ключ в ассоциации, представляющей связь в базе данных.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>Получает или задает значение, указывающее ограничение уникальности для внешнего ключа.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>Получает или задает один или более членов целевого класса сущности как ключевые значения с другой стороны ассоциации.</summary>
      <returns>Значение по умолчанию — идентификатор связанного класса.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>Получает или задает члены этого класса сущности, представляющие ключевые значения с этой стороны ассоциации.</summary>
      <returns>Значение по умолчанию — идентификатор содержащего класса.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>Источник сопоставления, использующий атрибуты контекста для создания модели сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" />.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>Указывает среде выполнения, как извлекать значение после выполнения операции вставки или обновления.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>Всегда возвращать значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>Автоматически выбирать значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>Никогда не возвращать значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>Возвращать значение только после выполнения операции вставки.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>Возвращать значение только после выполнения операции обновления.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>Ассоциирует класс со столбцом в таблице базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>Получает или задает перечисление <see cref="T:System.Data.Linq.Mapping.AutoSync" />.</summary>
      <returns>Значение <see cref="T:System.Data.Linq.Mapping.AutoSync" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>Получает или задает значение, указывающее, может ли столбец содержать значения NULL.</summary>
      <returns>Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>Получает или задает тип столбца базы данных.</summary>
      <returns>Строковое значение, указывающее точный текст, который определяет столбец в объявлении таблицы Transact-SQL.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>Возвращает или задает значение, указывающее, является ли столбец вычисляемым столбцом в базе данных.</summary>
      <returns>Значение по умолчанию — пустое.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>Получает или задает значение, определяющее, содержит ли столбец значения, автоматически генерируемые базой данных.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>Получает или задает значение, указывающее, содержит ли столбец значение дискриминатора для иерархии наследования LINQ to SQL.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>Получает или задает значение, указывающее, представляет ли этот член класса столбец, входящий в состав первичного ключа таблицы.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>Получает или задает значение, указывающее, является ли тип столбца члена отметкой времени или версией строки в базе данных.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>Получает или задает для LINQ to SQL способ выявления конфликтов оптимистичного параллелизма.</summary>
      <returns>Значение по умолчанию — <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, если свойство <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> члена не равно <see langword="true" />.  
Другие значения: <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> и <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>Предоставляет члены для описания атрибутов данных в столбцах.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.DataAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>Получает или задает имя столбца.</summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>Получает или задает закрытое поле для хранения значения из столбца.</summary>
      <returns>Имя поля хранения.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>Задает определенные атрибуты класса, представляющего базу данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>Получает или задает имя базы данных.</summary>
      <returns>Имя.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>Связывает метод с хранимой процедурой или пользовательской функцией в базе данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>Возвращает или задает значение, указывающее, чему сопоставлен метод — функции или хранимой процедуре.</summary>
      <returns>
        <see langword="true" />, если функции; <see langword="false" />, если хранимой процедуре.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>Возвращает или задает имя функции.</summary>
      <returns>Имя функции или хранимой процедуры.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>Сопоставляет иерархию наследования в приложении LINQ to SQL.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>Получает или задает значение кода дискриминатора в сопоставляемой иерархии наследования.</summary>
      <returns>Обязательно задается пользователем. Значение по умолчанию отсутствует.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>Получает или задает значение, указывающее, создается ли объект данного типа, когда значение дискриминатора не соответствует заданному значению.</summary>
      <returns>Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>Получает или задает тип класса в иерархии.</summary>
      <returns>Обязательно задается пользователем. Значение по умолчанию отсутствует.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>Представляет источник информации сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>Создает новую модель сопоставления.</summary>
      <param name="dataContextType">Тип <see cref="T:System.Data.Linq.DataContext" />, на котором должно основываться сопоставление.</param>
      <returns>Метамодель, созданная для отражения текущей схемы сопоставления.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>Возвращает модель сопоставления.</summary>
      <param name="dataContextType">Тип <see cref="T:System.Data.Linq.DataContext" /> возвращаемой модели.</param>
      <returns>Модель сопоставления, связанная с этим источником сопоставления.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>Представляет метод доступа к члену.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor" />.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>Задает объект, для которого нужно задать или из которого нужно прочитать значение.</summary>
      <param name="instance">Экземпляр, для которого нужно задать или из которого нужно прочитать значение.</param>
      <returns>Упакованное значение этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>Указывает, присвоено ли данному экземпляру значение.</summary>
      <param name="instance">Проверяемый экземпляр.</param>
      <returns>Значение <see langword="true" />, если экземпляру присвоено значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>Указывает, содержит ли экземпляр значение, загруженное из отложенного источника.</summary>
      <param name="instance">Проверяемый экземпляр.</param>
      <returns>Значение <see langword="true" />, если экземпляр содержит значение, загруженное из отложенного источника; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>Указывает, какое значение содержит экземпляр: загруженное или присвоенное.</summary>
      <param name="instance">Проверяемый экземпляр.</param>
      <returns>Значение <see langword="true" />, если экземпляр содержит загруженное или присвоенное значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>Задает значение как объект.</summary>
      <param name="instance">Экземпляр, для которого задается значение.</param>
      <param name="value">Задаваемое значение.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>Получает тип члена, которому принадлежит данный метод доступа.</summary>
      <returns>Тип элемента.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>Строго типизированная версия класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor" />.</summary>
      <typeparam name="TEntity">Тип источника.</typeparam>
      <typeparam name="TMember">Тип члена данного источника.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" />.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>Задает объект, для которого нужно задать или из которого нужно прочитать значение.</summary>
      <param name="instance">Экземпляр, для которого нужно задать или из которого нужно прочитать значение.</param>
      <returns>Упакованное значение этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>Задает строго типизированное значение.</summary>
      <param name="instance">Экземпляр, из которого следует получить значение.</param>
      <returns>Значение этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>Задает экземпляр, для которого задается упакованное значение.</summary>
      <param name="instance">Экземпляр, для которого задается упакованное значение.</param>
      <param name="value">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>Задает экземпляр, для которого задается строго типизированное значение.</summary>
      <param name="instance">Экземпляр, для которого задается значение.</param>
      <param name="value">Строго типизированное значение, которое следует задать.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>Получает тип члена, которому принадлежит данный метод доступа.</summary>
      <returns>Тип члена.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>Представляет отношение ассоциации между двумя типами сущностей.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>При переопределении в производном классе получает значение, указывающее, нужно ли удалять объект, когда привязка имеет значение <see langword="null" />.</summary>
      <returns>
        <see langword="true" /> Если объект удаляется, если ассоциация имеет значение <see langword="null" />; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>При переопределении в производном классе получает поведение при удалении дочернего элемента.</summary>
      <returns>Строка, представляющая правило, или значение <see langword="null" />, если не задано никакое действие, выполняемое при удалении.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>При переопределении в производном классе получает значение, определяющее, является ли другой тип родительским для этого типа.</summary>
      <returns>
        <see langword="true" /> другой тип является родительским для данного типа; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>При переопределении в производном классе получает значение, указывающее, представляет ли связь отношение "один ко многим".</summary>
      <returns>
        <see langword="true" /> Если ассоциация представляет отношение "один ко многим"; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>При переопределении в производном классе получает значение, указывающее, может ли связь быть <see langword="null" />.</summary>
      <returns>
        <see langword="true" /> Если ассоциация может иметь <see langword="null" />; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>При переопределении в производном классе получает значение, указывающее, является ли связь уникальной.</summary>
      <returns>
        <see langword="true" /> Если ассоциация является уникальной; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>При переопределении в производном классе получает список членов, представляющих значения с другой стороны связи.</summary>
      <returns>Коллекция, представляющая значения на другой стороне ассоциации.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>При переопределении в производном классе получает значение, определяющее, образует ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> идентификатор другого типа.</summary>
      <returns>
        <see langword="true" /> Если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> образует идентификатор (первичный ключ) другого типа; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>При переопределении в производном классе получает член с другой стороны связи, представляющий обратную связь.</summary>
      <returns>Элемент на другой стороне ассоциации, представляющий обратную ассоциацию.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>При переопределении в производном классе получает тип другой стороны связи.</summary>
      <returns>Тип с другой стороны ассоциации.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>При переопределении в производном классе получает список членов, представляющих значения с этой стороны связи.</summary>
      <returns>Коллекция, представляющая значения с этой стороны ассоциации.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>При переопределении в производном классе получает значение, определяющее, образует ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> идентификатор этого типа.</summary>
      <returns>
        <see langword="true" /> Если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> образует идентификатор (первичный ключ) ассоциации; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>При переопределении в производном классе получает член на этой стороне, представляющий связь.</summary>
      <returns>Член с этой стороны, представляющий ассоциацию.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>Представляет сопоставление между полем или свойством объекта домена с одной стороны и столбцом таблицы базы данных с другой стороны.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>При переопределении в производном классе получает <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />, соответствующий этому элементу.</summary>
      <returns>Соответствующий объект <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />, если таковой имеется; в противном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>При переопределении в производном классе получает значение, идентифицирующее поведение этого элемента, связанное с чтением после записи, для операций вставки и обновления.</summary>
      <returns>Одно из значений перечисления, определяющее поведение обратной чтения для вставки и обновления.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>При переопределении в производном классе получает значение, указывающее, можно ли значению этого элемента присвоить значение <see langword="null" />.</summary>
      <returns>Значение <see langword="true" />, если этому члену может быть присвоено значение <see langword="null" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>При переопределении в производном классе получает тип соответствующего столбца базы данных.</summary>
      <returns>Тип столбца базы данных в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>При переопределении в производном классе получает объект <see cref="T:System.Data.Linq.Mapping.MetaType" />, содержащий этот элемент данных.</summary>
      <returns>Метатип, содержащий текущий член.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>При переопределении в производном классе получает метод доступа, используемый для получения и задания отложенного источника для этого элемента.</summary>
      <returns>Метод доступа, используемый для доступа к отложенному источнику для этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>При переопределении в производном классе получает метод доступа, используемый для получения и задания отложенного значения для этого элемента (не вызывая принесение).</summary>
      <returns>Метод доступа, используемый для доступа к отложенному значению для этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>При переопределении в производном классе получает выражение, которое определяет вычисляемый столбец.</summary>
      <returns>Выражение для вычисляемого столбца в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>При переопределении в производном классе получает значение, указывающее, определяет ли этот элемент отношение связи.</summary>
      <returns>Значение <see langword="true" />, если данный член определяет отношение ассоциации; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>При переопределении в производном классе получает значение, указывающее, создается ли этот элемент автоматически базой данных.</summary>
      <returns>
        <see langword="true" /> Если этот член автоматически сгенерирован базой данных; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>При переопределении в производном классе указывает, объявлен ли этот элемент в заданном типе.</summary>
      <param name="type">Проверяемый тип.</param>
      <returns>Значение <see langword="true" />, если этот член объявлен в заданном типе; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>При переопределении в производном классе получает значение, указывающее, является ли поведением по умолчанию отложенная загрузка данного элемента.</summary>
      <returns>
        <see langword="true" /> Если этот элемент загружается отложена по умолчанию; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>При переопределении в производном классе получает значение, указывающее, представляет ли этот элемент дискриминатор наследования.</summary>
      <returns>Значение <see langword="true" />, если этот член представляет дискриминатор наследования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>При переопределении в производном классе получает значение, указывающее, сопоставляется ли этот элемент со столбцом (или ограничением).</summary>
      <returns>Значение <see langword="true" />, если этот член сопоставляется столбцу (или ограничению); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>При переопределении в производном классе получает значение, указывающее, является ли этот элемент частью идентификатора типа.</summary>
      <returns>Значение <see langword="true" />, этот член является частью идентификатора типа; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>При переопределении в производном классе получает значение, указывающее, представляет ли этот элемент версию строки или метку времени.</summary>
      <returns>Значение <see langword="true" />, если этот член представляет отметку времени или версию строки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>При переопределении в производном классе получает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций загрузки.</summary>
      <returns>Метод загрузки в виде <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>При переопределении в производном классе получает имя столбца (или ограничения) в базе данных.</summary>
      <returns>Имя столбца (или ограничения) в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>При переопределении в производном классе получает базовый <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Член атрибута и сведения о метаданных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>При переопределении в производном классе получает метод доступа, используемый для получения и задания значения для этого элемента.</summary>
      <returns>Метод доступа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>При переопределении в производном классе получает или задает имя элемента, которое совпадает с именем <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Имя, так как <see cref="T:System.Reflection.MemberInfo" /> имя.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>При переопределении в производном классе получает исходную позицию этого элемента в структуре по умолчанию результатов запроса.</summary>
      <returns>Исходная позиция.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>При переопределении в производном классе получает метод доступа, используемый для получения и задания значения хранения для этого элемента.</summary>
      <returns>Метод доступа хранимого значения этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>При переопределении в производном классе получает элемент, который хранит данные для этого элемента.</summary>
      <returns>Член, используемый для хранения.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>При переопределении в производном классе получает тип данного элемента.</summary>
      <returns>Тип текущего члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>При переопределении в производном классе получает политику проверки оптимистической блокировки для этого элемента.</summary>
      <returns>Одно из значений перечисления, указывающих оптимистичного параллелизма проверить политику для этого элемента.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>Представляет сопоставление между методом контекста и функцией базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaFunction" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>Возвращает значение, указывающее, имеет ли хранимая процедура несколько типов результатов.</summary>
      <returns>
        <see langword="true" />, если хранимая процедура имеет несколько типов результатов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>Возвращает значение, указывающее, может ли данная функция использоваться в запросе.</summary>
      <returns>
        <see langword="true" />, если данная функция может использоваться в запросе.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>Возвращает имя функции или процедуры базы данных.</summary>
      <returns>Строка, представляющая имя функции или процедуры базы данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>Возвращает соответствующий метод контекста.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий базовому контекстному методу.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" />, где содержится данная функция.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, содержащий данную функцию.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>Получает имя метода.</summary>
      <returns>Строка <see langword="string" />, представляющая имя метода.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>Возвращает перечисление параметров функции.</summary>
      <returns>Коллекция параметров.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>Возвращает перечисление возможных типов строк результатов.</summary>
      <returns>Коллекция возможных типов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>Возвращает выходной параметр.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaParameter" />, соответствующий возвращаемому параметру.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>Абстракция, представляющая сопоставление между базой данных и объектами домена.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaModel" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>При переопределении в производном классе получает тип <see cref="T:System.Data.Linq.DataContext" />, описываемый этой моделью.</summary>
      <returns>Тип контекста данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>При переопределении в производном классе возвращает имя базы данных.</summary>
      <returns>Имя базы данных в виде строки.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>При переопределении в производном классе возвращает <see cref="T:System.Data.Linq.Mapping.MetaFunction" />, соответствующий функции базы данных.</summary>
      <param name="method">Метод, определенный для <see cref="T:System.Data.Linq.DataContext" /> или подчиненного класса, представляющий функцию базы данных.</param>
      <returns>Метафункция, представляющая функцию базы данных.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>При переопределении в производном классе возвращает перечисление всех функций.</summary>
      <returns>Перечисление, которое может использоваться для перебора всех функций.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>При переопределении в производном классе обнаруживает <see cref="T:System.Data.Linq.Mapping.MetaType" /> для заданного <see cref="T:System.Type" />.</summary>
      <param name="type">Тип, для которого выполняется поиск <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <returns>Метатип, соответствующий указанному типу.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>При переопределении в производном классе возвращает <see cref="T:System.Data.Linq.Mapping.MetaTable" />, связанный с указанным <see cref="T:System.Type" />.</summary>
      <param name="rowType">Тип строки среды CLR.</param>
      <returns>Метатаблица, ассоциированная с указанным типом строки.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>При переопределении в производном классе возвращает перечисление всех таблиц.</summary>
      <returns>Перечислитель, который может использоваться для перебора таблиц.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>При переопределении в производном классе возвращает источник сопоставления, создавший эту модель.</summary>
      <returns>Исходный источник сопоставления.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>При переопределении в производном классе получает или задает поставщика типа.</summary>
      <returns>Тип поставщика.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>Представляет сопоставление между параметром метода и параметром функции базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaParameter" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>Получает тип параметра в базе данных.</summary>
      <returns>Тип параметра в базе данных в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>Возвращает имя параметра функции в базе данных.</summary>
      <returns>Имя в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>Возвращает имя параметра.</summary>
      <returns>Имя параметра в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>Возвращает соответствующий параметр метода.</summary>
      <returns>Соответствующий параметр метода.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>Возвращает CLR-тип параметра.</summary>
      <returns>Тип.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>Представляет абстракцию таблицы или представления базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaTable" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>Получает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций удаления.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций удаления.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>Получает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций вставки.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций вставки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>Возвращает составное действие <see cref="T:System.Data.Linq.Mapping.MetaModel" />, в котором содержится данный объект <see cref="T:System.Data.Linq.Mapping.MetaTable" />.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, который содержит данный объект MetaTable.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>Получает <see cref="T:System.Data.Linq.Mapping.MetaType" />, описывающий тип строк таблицы.</summary>
      <returns>Тип строк в таблице.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>Получает имя таблицы, как оно определено в базе данных.</summary>
      <returns>Значение типа <see langword="string" />, представляющее имя таблицы.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>Получает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций обновления.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций обновления.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>Представляет сопоставление типа объекта домена столбцам таблицы базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>При переопределении в производном классе возвращает перечисление всех связей.</summary>
      <returns>Коллекция ассоциаций.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>При переопределении в производном классе получает значение, указывающее, может ли быть создан экземпляр базового типа как результат запроса.</summary>
      <returns>Значение <see langword="true" />, если экземпляр соответствующего типа может быть создан как результат запроса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>При переопределении в производном классе возвращает перечисление всех элементов данных (полей и свойств).</summary>
      <returns>Коллекция элементов данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>При переопределении в производном классе получает элемент, представляющий автоматически сгенерированный столбец идентификатора.</summary>
      <returns>Член, представляющий автоматически сгенерированный столбец идентификатора, или <see langword="null" />, если такого столбца не существует.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>При переопределении в производном классе получает перечисление ближайших производных типов в иерархии наследования.</summary>
      <returns>Перечисление метатипов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>При переопределении в производном классе получает элемент, представляющий столбец дискриминатора наследования.</summary>
      <returns>Член, представляющий столбец-дискриминатор наследования, или <see langword="null" />, если такового не имеется.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>При переопределении в производном классе получает <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />, связанный с указанным элементом.</summary>
      <param name="member">Элемент, для которого выполняется поиск ассоциированного объекта <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />.</param>
      <returns>
        <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />, если он связан с заданным членом; в противном случае — <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>При переопределении в производном классе, возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> для подтипа наследования.</summary>
      <param name="type">Подтип.</param>
      <returns>
        <see cref="T:System.Data.Linq.Mapping.MetaType" /> для подтипа наследования.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>При переопределении в производном классе возвращает метатип, связанный с указанным кодом наследования.</summary>
      <param name="code">Код наследования.</param>
      <returns>Метатип, ассоциированный с указанным кодом наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>При переопределении в производном классе возвращает значение, указывающее, имеет ли текущий тип <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых типов метод OnLoaded.</summary>
      <returns>
        <see langword="true" /> Если метатип или любой базовый метатип OnLoaded метод; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>При переопределении в производном классе возвращает значение, указывающее, имеет ли тип <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых типов метод OnValidate.</summary>
      <returns>
        <see langword="true" /> Если метатип или любой базовый метатип OnValidate метод; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>При переопределении в производном классе возвращает значение, указывающее, является ли тип частью сопоставляемой иерархии наследования.</summary>
      <returns>Значение <see langword="true" />, если тип является частью сопоставляемой иерархии наследования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>При переопределении в производном классе возвращает значение, указывающее, определяет ли тип код наследования.</summary>
      <returns>Значение <see langword="true" />, если тип определяет код наследования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>При переопределении в производном классе возвращает значение, указывающее, имеется ли у типа постоянный член, для которого может потребоваться проверка на наличие конфликтов оптимистического параллелизма.</summary>
      <returns>Значение <see langword="true" />, если у типа имеется постоянный член с политикой <see cref="T:System.Data.Linq.Mapping.UpdateCheck" />, отличной от <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>При переопределении в производном классе получает перечисление всех элементов данных, определяющих уникальный идентификатор типа.</summary>
      <returns>Перечисление всех элементов данных, определяющих уникальный идентификатор типа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>При переопределении в производном классе возвращает базовый метатип иерархии наследования.</summary>
      <returns>Базовый метатип текущей иерархии наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>При переопределении в производном классе возвращает значение, указывающее, определяет ли тип код наследования.</summary>
      <returns>Значение <see langword="true" />, если тип определяет код наследования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>При переопределении в производном классе получает значение, указывающее, является ли тип используемым по умолчанию для иерархии наследования.</summary>
      <returns>Метаданные для типа по умолчанию в сопоставлении наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>При переопределении в производном классе возвращает корневой тип иерархии наследования.</summary>
      <returns>Корневой тип.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>При переопределении в производном классе получает коллекцию всех типов, определенных текущей иерархией наследования.</summary>
      <returns>Коллекция метатипов в текущей иерархии наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>При переопределении в производном классе получает значение, показывающее, является ли объект <see cref="T:System.Data.Linq.Mapping.MetaType" /> типом сущности.</summary>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.Linq.Mapping.MetaType" /> является типом сущности; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>При переопределении в производном классе получает значение, указывающее, является ли тип используемым по умолчанию для иерархии наследования.</summary>
      <returns>Значение <see langword="true" />, если тип является используемым по умолчанию для иерархии наследования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>При переопределении в производном классе возвращает объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, содержащий <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Включающая метамодель.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>При переопределении в производном классе возвращает имя <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Имя текущего метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>При переопределении в производном классе возвращает сведения о методе OnLoaded, который содержится в этом метатипе.</summary>
      <returns>Описание OnLoaded метод для этого метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>При переопределении в производном классе возвращает сведения о методе OnValidate, который содержится в этом метатипе.</summary>
      <returns>Описание OnValidate метод для этого метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>При переопределении в производном классе возвращает коллекцию всех сохраненных элементов данных.</summary>
      <returns>Коллекция всех элементов метаданных в текущем типе.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>При переопределении в производном классе возвращает <see cref="T:System.Data.Linq.Mapping.MetaTable" />, использующий <see cref="T:System.Data.Linq.Mapping.MetaType" /> для определения строки.</summary>
      <returns>Метатаблица, использующая текущий метатип для определения строк.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>При переопределении в производном классе возвращает базовый тип среды CLR.</summary>
      <returns>Соответствующий тип среды CLR.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>При переопределении в производном классе возвращает столбец версии строки или метки времени для <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Элемент метаданных, представляющий столбец версии строки или отметки времени для этого метатипа, или <see langword="null" />, если такового не имеется.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>Разрешает задание деталей сопоставления для параметра метода хранимой процедуры.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>Возвращает или задает тип параметра для базы данных, специфической для поставщика.</summary>
      <returns>Тип в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>Получает или задает имя параметра.</summary>
      <returns>Имя в виде строки.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>Определяет, какой поставщик базы данных следует использовать.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
      <param name="type">Тип поставщика, который следует использовать для формирования <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>Возвращает тип поставщика, используемого для формирования <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
      <returns>Тип поставщика.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>Используется для задания каждого из типов результатов (для функций с различными типами результатов).</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" />.</summary>
      <param name="type">Тип результата, возвращаемого функцией с различными типами результатов.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>Получает допустимое или ожидаемое сопоставление типов для функции с различными типами результатов.</summary>
      <returns>Тип результата (<see cref="T:System.Type" />).</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>Определяет класс как класс сущности, ассоциированный с таблицей базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.TableAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>Получает или задает имя таблицы или представления.</summary>
      <returns>По умолчанию значение совпадает с именем класса.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>Указывает, когда объекты должны проверяться на конфликты параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>Всегда проверять. Это значение по умолчанию за исключением случаев, когда свойство <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> члена имеет значение <see langword="true" />.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>Никогда не проверять.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>Проверять только в случае изменения объектов.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>Представляет источник сопоставления, в котором для создания модели используется внешний XML-файл сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>Создает источник сопоставления для средства чтения XML.</summary>
      <param name="reader">Средство чтения XML.</param>
      <returns>Новый XML-источник сопоставления, как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>Создает источник сопоставления из XML-потока.</summary>
      <param name="stream">XML-поток.</param>
      <returns>Новый XML-источник сопоставления, как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>Создает источник сопоставления из XML-кода, находящегося по указанному URL-адресу.</summary>
      <param name="url">URL, указывающий на XML.</param>
      <returns>Новый XML-источник сопоставления, как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>Создает источник сопоставления из XML-строки.</summary>
      <param name="xml">Строка, содержащая XML.</param>
      <returns>Новый XML-источник сопоставления, как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>Представляет ситуацию, в которой попытка обновления оказывается неудачной, так как значения членов были обновлены с того момента, когда были в последний раз считаны клиентом.</summary>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>Возвращает текущее значение участвующего в конфликте члена.</summary>
      <returns>Участвующий в конфликте объект.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>Возвращает значение базы данных участвующего в конфликте члена.</summary>
      <returns>Значение участвующего в конфликте объекта.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>Возвращает значение, указывающее, были ли данные члена изменены с момента последнего чтения или обновления базы данных.</summary>
      <returns>Значение <see langword="True" />, если данные члена были изменены.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>Возвращает значение, указывающее, был ли конфликт разрешен.</summary>
      <returns>Значение <see langword="True" />, если конфликт был разрешен.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>Возвращает метаданные об участвующем в конфликте члене.</summary>
      <returns>Сведения о члене, участвующем в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>Возвращает исходное значение участвующего в конфликте члена.</summary>
      <returns>Исходное значение участвующего в конфликте члена.</returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Использует параметр <see cref="T:System.Data.Linq.RefreshMode" />, чтобы автоматически указать значение, которое следует задать как текущее для участвующего в конфликте члена.</summary>
      <param name="refreshMode">См. раздел <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>Указывает значение, которое следует задать как текущее значение для участвующего в конфликте члена.</summary>
      <param name="value">Значение, которое следует задать как текущее.</param>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>Содержит значения членов, которые были изменены в приложениях LINQ to SQL.</summary>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>Получает текущее значение измененного члена.</summary>
      <returns>Значение элемента.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>Получает сведения об измененном члене.</summary>
      <returns>Сведения о члене, участвующем в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>Получает исходное значение измененного члена.</summary>
      <returns>Исходное значение измененного члена.</returns>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>Представляет попытку обновления с одним или несколькими конфликтами оптимистичного параллелизма.</summary>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>Возвращает значение, указывающее, был ли участвующий в конфликте объект удален из базы данных.</summary>
      <returns>Значение <see langword="True" />, если объект был удален.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>Возвращает значение, указывающее, были ли конфликты для этого объекта разрешены.</summary>
      <returns>Значение <see langword="True" />, если конфликты были разрешены.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>Возвращает коллекцию всех конфликтов членов, которые послужили причиной сбоя обновления.</summary>
      <returns>Коллекция конфликтов члена.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>Возвращает участвующий в конфликте объект.</summary>
      <returns>Участвующий в конфликте объект.</returns>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>Разрешает конфликты между членами, сохраняя текущие значения и переустанавливая исходные базовые значения, которые должны соответствовать последним значениям в базе данных.</summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Разрешает конфликты членов, используя указанный режим <see cref="T:System.Data.Linq.RefreshMode" />.</summary>
      <param name="refreshMode">Соответствующий параметр из режима <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Разрешает конфликты членов, сохраняя текущие значения и сбрасывая основные исходные значения.</summary>
      <param name="refreshMode">Соответствующий параметр из режима <see cref="T:System.Data.Linq.RefreshMode" />.</param>
      <param name="autoResolveDeletes">Если значение равно <see langword="true" />, автоматически разрешает конфликты, которые являются результатом измененного объекта, который больше не находится в базе данных.</param>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>Определяет способ, которым метод <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> обрабатывает конфликты оптимистичного параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>Инициирует хранение методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> текущего значения, которое было изменено, но обновляет другие значения значениями из базы данных.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>Инициирует замену методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> исходного значения значениями, извлеченными из базы данных. Текущее значение не изменяется.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>Инициирует перезапись методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> всех текущих значений значениями из базы данных.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>Определяет методы для динамической материализации объектов.</summary>
      <typeparam name="TDataReader">Тип объекта чтения данных.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" />.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>Перехватывает внутреннее состояние для быстрого материализатора.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>Представляет объект чтения, который последовательно считывает строки данных только в прямом направлении.</summary>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>При переопределении в производном классе возвращает значение, указывающее, разрешена ли отложенная загрузка.</summary>
      <returns>
        <see langword="true" />, если отложенная загрузка разрешена; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>Изменяет тип каждого элемента в заданной последовательности.</summary>
      <param name="source">Последовательность, содержащая подлежащие преобразованию элементы.</param>
      <typeparam name="TOutput">Тип, к которому требуется преобразовать элементы.</typeparam>
      <returns>Последовательность, содержащая элементы с преобразованным типом.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>Создает группу на основе заданного ключа и коллекции значений.</summary>
      <param name="key">Ключ для группы.</param>
      <param name="items">Значения для группы.</param>
      <typeparam name="TKey">Тип ключа группы.</typeparam>
      <typeparam name="TElement">Тип значений в группе.</typeparam>
      <returns>Группа с заданным ключом и заданной коллекцией значений.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает упорядоченную последовательность на основе заданной коллекции значений.</summary>
      <param name="items">Значения, которые следует поместить в упорядоченную последовательность.</param>
      <typeparam name="TElement">Тип значений в упорядоченной последовательности.</typeparam>
      <returns>Упорядоченная последовательность, которая содержит заданные значения.</returns>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>Представляет объект чтения данных.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>Возвращает исключение, указывающее, что была произведена попытка присвоить значение <see langword="null" /> типу данных, который не поддерживает значения null.</summary>
      <param name="type">Тип, которому была произведена попытка присвоить значение <see langword="null" />.</param>
      <returns>Исключение, указывающее, что была произведена попытка присвоить значение <see langword="null" /> типу данных, который не поддерживает значения null.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>При переопределении в производном классе выполняет запрос.</summary>
      <param name="iSubQuery">Индекс запроса.</param>
      <param name="args">Аргументы для запроса.</param>
      <returns>Результаты выполнения запроса.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>При переопределении в производном классе создает новый отложенный источник.</summary>
      <param name="globalLink">Индекс ссылки.</param>
      <param name="localFactory">Индекс фабрики.</param>
      <param name="keyValues">Ключевые значения для отложенного источника.</param>
      <typeparam name="T">Тип результирующих элементов.</typeparam>
      <returns>Перечислимый отложенный источник.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>При переопределении в производном классе создает новый отложенный источник.</summary>
      <param name="globalLink">Индекс ссылки.</param>
      <param name="localFactory">Индекс фабрики.</param>
      <param name="instance">Экземпляр для отложенного источника.</param>
      <typeparam name="T">Тип результирующих элементов.</typeparam>
      <returns>Перечислимый отложенный источник.</returns>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>Перехватывает внутреннее состояние для быстрого материализатора.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>При переопределении в производном классе вставляет значение в структуру данных.</summary>
      <param name="globalMetaType">Индекс объекта <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">Объект, вставляемый в структуру данных.</param>
      <returns>Значение, которое было вставлено в структуру данных.</returns>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>Перехватывает внутреннее состояние для быстрого материализатора.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>Представляет порядковые номера столбцов для объекта чтения данных.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>При переопределении в производном классе перемещает объект чтения к следующей записи.</summary>
      <returns>Значение <see langword="true" />, если имеются другие строки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>При переопределении в производном классе вызывает метод, представленный <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />.</summary>
      <param name="globalMetaType">Индекс объекта <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">Параметр для передачи вызываемому методу.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2000.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" />.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2005.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" />.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2008.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" />.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>Предоставляет вспомогательные методы для операций сопоставления строковых шаблонов.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где перед заданным текстом и после него может располагаться другой текст.</summary>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
      <returns>Строка шаблона поиска, содержащая заданную строку и символ "%" до и после нее.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где перед заданным текстом (но не после него) может располагаться другой текст.</summary>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
      <returns>Строка шаблона поиска, содержащая символ "%", за которым следует заданная строка.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где после заданного текста (но не перед ним) может располагаться другой текст.</summary>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
      <returns>Строка шаблона поиска, содержащая заданную строку, за которой следует символ "%".</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>Преобразует шаблон поиска для оператора <see langword="Like" /> в Visual Basic в шаблон поиска для оператора <see langword="LIKE" /> в SQL Server.</summary>
      <param name="pattern">Шаблон поиска <see langword="Like" /> в Visual Basic, который будет преобразован в шаблон поиска <see langword="LIKE" /> в SQL Server.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации специальных знаков SQL или самого escape-символа как обычных знаков.</param>
      <returns>Шаблон поиска для оператора <see langword="LIKE" /> в SQL Server, соответствующий заданному шаблону поиска <see langword="Like" /> в Visual Basic.</returns>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>Предоставляет методы, соответствующие функциям SQL Server. Методы класса <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> поддерживаются только в запросах LINQ to SQL.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ суток между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ суток между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ суток между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ суток между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ суток между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ суток между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ суток между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ суток между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ часов между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ часов между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ часов между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ часов между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ часов между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ часов между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ часов между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ часов между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ микросекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ микросекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ микросекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ микросекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ миллисекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ миллисекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ миллисекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ миллисекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ минут между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ минут между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ минут между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ минут между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ минут между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ минут между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ минут между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ минут между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ месяцев между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ месяцев между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ месяцев между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ месяцев между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ наносекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ наносекунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ наносекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ наносекунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ секунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ секунд между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ секунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ секунд между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ лет между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ лет между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ лет между двумя датами, которые не могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Количество границ лет между двумя заданными датами.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ лет между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ годов между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ лет между двумя датами, которые могут быть равными NULL.</summary>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
      <returns>Если оба параметра имеют значение, отличное от <see langword="null" />, возвращает количество границ годов между двумя указанными датами. Если один или оба параметра равны <see langword="null" />, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>Определяет, совпадает ли указанная символьная строка с заданным шаблоном. Этот метод в настоящее время поддерживается только в запросах LINQ to SQL.</summary>
      <param name="matchExpression">Строка, в которой следует искать вхождение.</param>
      <param name="pattern">Шаблон, возможно, включающий символы подстановки, которому должно соответствовать <paramref name="matchExpression" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>Определяет, совпадает ли указанная символьная строка с заданным шаблоном. Этот метод в настоящее время поддерживается только в запросах LINQ to SQL.</summary>
      <param name="matchExpression">Строка, в которой следует искать вхождение.</param>
      <param name="pattern">Шаблон, возможно, включающий символы подстановки, которому должно соответствовать <paramref name="matchExpression" />.</param>
      <param name="escapeCharacter">Символ, который, будучи размещенным перед подстановочным знаком, указывает, что последний следует интерпретировать как обычный символ, а не как подстановочный знак.</param>
      <returns>Значение <see langword="true" />, если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>Освобождает управляемые ссылки и закрывает подключения, открытые объектом <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>Освобождает — не обязательно — управляемые ссылки и закрывает подключения, открытые объектом <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
      <param name="disposing">
        <see langword="true" />, чтобы освободить управляемые ссылки и закрыть подключения; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>Представляет таблицу для определенного типа в основной базе данных.</summary>
      <typeparam name="TEntity">Тип данных в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>Присоединяет отключенную или "отсоединенную" сущность к новому контексту <see cref="T:System.Data.Linq.DataContext" />, когда исходные значения необходимы для проверок оптимистичного параллелизма.</summary>
      <param name="entity">Исходные значения объекта, которые следует прикрепить.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="asModified">Значение <see langword="true" />, чтобы вложить сущность как измененную; значение <see langword="false" />, чтобы вложить сущность как неизмененную.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <typeparam name="TSubEntity">Тип прикрепляемых сущностей.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <param name="asModified">Значение <see langword="true" />, если объект содержит метку времени или элемент RowVersion; значение <see langword="false" />, если исходные значения используются для проверки оптимистичного параллелизма.</param>
      <typeparam name="TSubEntity">Тип прикрепляемых сущностей.</typeparam>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>Получает объект <see cref="T:System.Data.Linq.DataContext" />, который использовался для извлечения этого объекта <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>Контекст данных, который использовался для извлечения этой таблицы.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Помещает все сущности из коллекции в состояние <see langword="pending delete" />.</summary>
      <param name="entities">Удаляемые сущности.</param>
      <typeparam name="TSubEntity">Тип элементов, которые следует удалить.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>Помещает сущность из таблицы в состояние <see langword="pending delete" />.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>Получает перечислитель, выполняющий итерацию элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>Возвращает массив измененных членов, содержащих их текущее и исходное значения.</summary>
      <param name="entity">Объект, из которого следует получить массив.</param>
      <returns>Массив измененных членов, содержащих их текущее и исходное значения.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>Создает новый список для привязки к источнику данных.</summary>
      <returns>Новый список <see cref="T:System.ComponentModel.IBindingList" /> для привязки к источнику данных.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Linq.Table`1" />, содержащий исходное состояние сущности.</summary>
      <param name="entity">Сущность, исходное состояние которой возвращается.</param>
      <returns>Экземпляр <see cref="T:System.Data.Linq.Table`1" />, содержащий исходное состояние сущности.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в состояние <see langword="pending insert" />.</summary>
      <param name="entities">Добавляемые сущности.</param>
      <typeparam name="TSubEntity">Тип элемента, который следует вставить.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>Добавляет сущность в состояние <see langword="pending insert" /> для этого <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>Получает значение, указывающее, имеет ли первичный ключ тип сущностей, содержащихся в данном экземпляре <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>Значение <see langword="true" />, если тип сущности не имеет первичный ключ; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение, показывающее, является ли данная коллекция коллекцией объектов <see cref="T:System.Collections.IList" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных из объекта, самостоятельно не реализующего интерфейс <see cref="T:System.Collections.IList" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="asModified">Значение <see langword="true" />, чтобы вложить сущность как измененную; значение <see langword="false" />, чтобы вложить сущность как неизмененную.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей, которые должны быть вложены.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей, которые должны быть вложены.</param>
      <param name="asModified">Значение <see langword="true" />, чтобы вложить сущности как измененные; значение <see langword="false" />, чтобы вложить сущности как неизмененные.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Помещает все сущности из коллекции в состояние <see langword="pending delete" />.</summary>
      <param name="entities">Удаляемые сущности.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>Помещает сущность из таблицы в состояние <see langword="pending delete" />.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>Возвращает массив измененных членов, содержащих их текущее и исходное значения.</summary>
      <param name="entity">Сущность, из которой следует получать измененные элементы.</param>
      <returns>Массив измененных членов.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>Извлекает исходные значения данной сущности.</summary>
      <param name="entity">Сущность, доступ к исходному состоянию которой будет осуществлен.</param>
      <returns>Копия исходной сущности.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Добавляет все сущности коллекции в <see cref="T:System.Data.Linq.DataContext" /> в состоянии <see langword="pending insert" />.</summary>
      <param name="entities">Коллекция сущностей, которые должны быть добавлены.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>Добавляет сущность в состояние <see langword="pending insert" /> для этой таблицы.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>Получает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</summary>
      <returns>Тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>Получает дерево выражения, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>Возвращает объект поставщика запросов, связанного с указанным источником данных.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Выражение запроса, из которого выполняется вычисление.</param>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Выражение запроса, из которого выполняется вычисление.</param>
      <typeparam name="TResult">Тип данных в таблице.</typeparam>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Выражение запроса для выполнения.</param>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет строго типизированный запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Выражение запроса для выполнения.</param>
      <typeparam name="TResult">Тип данных в таблице.</typeparam>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>Возвращает строку, представляющую таблицу.</summary>
      <returns>Строковое представление таблицы.</returns>
    </member>
  </members>
</doc>
