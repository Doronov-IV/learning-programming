<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="T:System.Data.Common.Comm*******Trees.DbAggregate">
      <summary>Реализует базовые функциональные возможности, необходимые для статистических выражений в предложении <see langword="GroupBy" />.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbAggregate.Arguments">
      <summary>Возвращает список выражений, которые определяют аргументы для объекта <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />.</summary>
      <returns>Список выражений, которые определяют аргументы для объекта <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbAggregate.ResultType">
      <summary>Возвращает тип результата статистического выражения <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />.</summary>
      <returns>Результирующий тип этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.Db*******Expression">
      <summary>Представляет операцию логического И с двумя аргументами типа <see langword="Boolean" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.Db*******Expression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.Db*******Expression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbApplyExpression">
      <summary>Представляет собой операцию применения, то есть вызов указанной функции для каждого элемента заданного входного набора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbApplyExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbApplyExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbApplyExpression.Apply">
      <summary>Возвращает параметр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, указывающий на функцию, которая вызывается для каждого элемента во входном наборе.</summary>
      <returns>Параметр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, указывающий на функцию, которая вызывается для каждого элемента во входном наборе.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbApplyExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression">
      <summary>Представляет собой арифметическую операцию, применяемую к двум числовым аргументам. Сложение, вычитание, умножение, деление, получение остатка от деления и отрицание — все это арифметические операции. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbArithmeticExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbArithmeticExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbArithmeticExpression.Arguments">
      <summary>Получает список элементов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющих текущие аргументы.</summary>
      <returns>Список фиксированного размера, состоящий из элементов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbBinaryExpression">
      <summary>Реализует базовую функциональность, необходимую выражениям, принимающим два операнда-выражения.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbBinaryExpression.Left">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее левый аргумент.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее левый аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд выражения <see cref="T:System.Data.Common.Comm*******Trees.DbBinaryExpression" />, 
или его результирующий тип не совпадает с типом, необходимым для левого аргумента, и не может быть повышен до нужного типа.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbBinaryExpression.Right">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее правый аргумент.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее правый аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд выражения <see cref="T:System.Data.Common.Comm*******Trees.DbBinaryExpression" />, 
или его результирующий тип не совпадает с типом, необходимым для правого аргумента, и не может быть повышен до нужного типа.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbCaseExpression">
      <summary>Представляет предложения <see langword="When" />, <see langword="Then" /> и <see langword="Else" /> объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCaseExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCaseExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbCaseExpression.Else">
      <summary>Возвращает или предложение <see langword="Else" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <returns>Предложение <see langword="Else" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд выражения <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />, 
или тип его результата не совпадает с типом результатов выражения <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" /> и не может быть повышен до этого типа.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbCaseExpression.Then">
      <summary>Получает предложения <see langword="Then" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <returns>Предложения <see langword="Then" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbCaseExpression.When">
      <summary>Получает предложения <see langword="When" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <returns>Предложения <see langword="When" /> этого объекта <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbCastExpression">
      <summary>Представляет преобразование типа одного аргумента в указанный тип. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCastExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCastExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbComm*******Tree">
      <summary>Неизменяемый класс, который реализует базовые функциональные возможности для типов дерева команд запроса, вставки, обновления, удаления и вызова функции.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbComm*******Tree.Parameters">
      <summary>Возвращает имя и соответствующий тип каждого параметра, ссылку на который можно указать в рамках этого класса <see cref="T:System.Data.Common.Comm*******Trees.DbComm*******Tree" />.</summary>
      <returns>Имя и соответствующий тип каждого параметра, ссылку на который можно указать в рамках этого класса <see cref="T:System.Data.Common.Comm*******Trees.DbComm*******Tree" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbComparisonExpression">
      <summary>Представляет собой операцию сравнения, применяемую к двум аргументам. «Равно», «больше чем», «больше или равно», «меньше чем», «меньше или равно», «не равно» — все это операторы сравнения. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbComparisonExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbComparisonExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbConstantExpression">
      <summary>Представляет константы различных видов (литералы). Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbConstantExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbConstantExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbConstantExpression.Value">
      <summary>Возвращает значение константы.</summary>
      <returns>Значение константы.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression">
      <summary>Представляет безусловную операцию соединения между данными аргументами коллекции. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCrossJoinExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbCrossJoinExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbCrossJoinExpression.Inputs">
      <summary>Получает список <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, в котором указываются входные наборы для соединения.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, содержащий входные наборы для соединения.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbDeleteComm*******Tree">
      <summary>Представляет операцию удаления одной строки, выраженную в виде дерева команд. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbDeleteComm*******Tree.Predicate">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающее предикат, который используется для определения удаляемых элементов целевой коллекции.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающее предикат, который используется для определения удаляемых элементов целевой коллекции.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbDerefExpression">
      <summary>Представляет выражение, извлекающее сущность на основе указанной ссылки. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbDerefExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbDerefExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbDistinctExpression">
      <summary>Удаляет повторяющиеся значения из набора, заданного аргументом. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbDistinctExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbDistinctExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbElementExpression">
      <summary>Представляет преобразование аргумента указанного набора в одноэлементный набор. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbElementExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbElementExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression">
      <summary>Представляет выражение, которое извлекает ссылку из базового экземпляра сущности. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbEntityRefExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbEntityRefExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExceptExpression">
      <summary>Представляет операцию вычитания наборов, выраженных левым и правым операндами. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExceptExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExceptExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Представляет базовый тип для всех выражений.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="visitor" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <typeparam name="TResultType">Тип результата, полученного в результате обхода.</typeparam>
      <returns>Тип результата, созданного объектом <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> имеет значение NULL).</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру DbExpression.</summary>
      <param name="obj">Объект для сравнения с текущим объектом <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.Object" /> равен текущему экземпляру DbExpression; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpression.ExpressionKind">
      <summary>Получает тип выражения, который задает его операцию.</summary>
      <returns>Тип выражения, который задает его операцию.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromBinary(System.Byte[])">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное двоичное значение, допускающее значение NULL.</summary>
      <param name="value">Двоичное значение, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное двоичное значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное логическое значение, допускающее значение NULL.</summary>
      <param name="value">Логическое значение, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное логическое значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное байтовое значение, допускающее значение NULL.</summary>
      <param name="value">Байтовое значение, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет указанное байтовое значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение <see cref="T:System.DateTime" />, допускающее значение NULL.</summary>
      <param name="value">Значение DateTime, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение DateTime.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение <see cref="T:System.DateTimeOffset" />, допускающее значение NULL.</summary>
      <param name="value">Значение DateTimeOffset, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение DateTimeOffset.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное десятичное значение, допускающее значение NULL.</summary>
      <param name="value">Десятичное значение, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное десятичное значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение типа double, допускающее значение NULL.</summary>
      <param name="value">Значение типа double, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное двойное значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromGeography(System.Data.Spatial.DbGeography)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение <see cref="T:System.Data.Spatial.DbGeography" />, допускающее значение NULL.</summary>
      <param name="value">Значение DbGeography, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение DbGeography.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromGeometry(System.Data.Spatial.DbGeometry)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение <see cref="T:System.Data.Spatial.DbGeometry" />, допускающее значение NULL.</summary>
      <param name="value">Значение DbGeometry, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение <see cref="T:System.Guid" />, допускающее значение NULL.</summary>
      <param name="value">Значение Guid, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Guid.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int16, допускающее значение NULL.</summary>
      <param name="value">Значение Int16, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int16.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int32, допускающее значение NULL.</summary>
      <param name="value">Значение Int32, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int32.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int64, допускающее значение NULL.</summary>
      <param name="value">Значение Int64, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Int64.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное одиночное значение, допускающее значение NULL.</summary>
      <param name="value">Значение типа Single, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное значение Single.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.FromString(System.String)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное строковое значение.</summary>
      <param name="value">Строковое значение, на котором должно основываться возвращаемое выражение.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий указанное строковое значение.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.GetHashCode">
      <summary>Служит в качестве хеш-функции для типа.</summary>
      <returns>Хэш-код для текущего выражения.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Byte[])~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует массив 8-разрядных целых чисел без знака в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Массив 8-битовых целых чисел без знака.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий преобразованный массив 8-разрядного целого числа без знака.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Data.Spatial.DbGeography)~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект DbGeography в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект DbGeography.</param>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющее преобразованный объект DbGeography.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Data.Spatial.DbGeometry)~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект DbGeometry в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект DbGeometry.</param>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющее преобразованный объект DbGeography.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует логический объект, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Логический объект, допускающий значение NULL.</param>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющее преобразованный логический объект, допускающий значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует 8-разрядное целое число без знака, допускающее значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">8-разрядное целое число без знака, допускающее значение NULL.</param>
      <returns>Значение типа <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое представляет преобразованное 8-разрядное целое число без знака.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.DateTime" />, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.DateTime" />, допускающий значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет объект <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.DateTimeOffset" />, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.DateTime" />, допускающий значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет объект <see cref="T:System.DateTime" />, допускающий значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.Decimal" />, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.Decimal" />, допускающий значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет объект <see cref="T:System.Decimal" />, допускающий значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.Double" />, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.Double" />, допускающий значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет объект <see cref="T:System.Double" />, допускающий значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.Guid" />, допускающий значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.Guid" />, допускающее значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который представляет объект <see cref="T:System.Guid" />, допускающий значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует 16-разрядное целое число без знака, допускающее значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">16-разрядное целое число без знака, допускающее значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий 16-разрядное целое число без знака, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует 32-разрядное целое число без знака, допускающее значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">32-разрядное целое число без знака, допускающее значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий 32-разрядное целое число без знака, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует 64-разрядное целое число без знака, допускающее значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">64-разрядное целое число без знака, допускающее значение NULL.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий 64-разрядное целое число без знака, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует число с плавающей запятой одинарной точности, допускающее значение NULL, в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Число с плавающей запятой одиночной точности.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий число одиночной точности с плавающей запятой.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpression.op_Implicit(System.String)~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует последовательную коллекция знаков Юникода в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="value">Последовательная коллекция знаков Юникода.</param>
      <returns>
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющее последовательную коллекцией символов Юникода.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpression.ResultType">
      <summary>Получает тип метаданных для результирующего типа выражения.</summary>
      <returns>Тип метаданных для результирующего типа выражения.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExpressionBinding">
      <summary>Представляет набор входных данных для реляционных выражений, например <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />, <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" /> и <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpressionBinding.Expression">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее входной набор.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Это выражение не связано с деревом команд привязки, а тип его результата отличается от типа результата текущего значения и не может быть повышен до него.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpressionBinding.Variable">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента.</summary>
      <returns>Ссылка на переменную.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpressionBinding.VariableName">
      <summary>Возвращает имя, присвоенное переменной элемента.</summary>
      <returns>Имя, присвоенное переменной элемента.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbExpressionBinding.VariableType">
      <summary>Возвращает метаданные типа переменной элемента.</summary>
      <returns>Метаданные типа переменной элемента.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExpressionKind">
      <summary>Содержит значения, используемые каждым классом выражений для обозначения представляемой им операции. Чтобы определить, какую операцию представляет конкретное выражение, можно извлечь свойство <see cref="P:System.Data.Common.Comm*******Trees.DbExpression.ExpressionKind" /> выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.All">
      <summary>Выражение "<see langword="true" /> для всех".</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.*******">
      <summary>Логические выражения И.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Any">
      <summary>Выражение "<see langword="true" /> для любых".</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Case">
      <summary>Условные выражения с инструкцией CASE.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Cast">
      <summary>Выражения приведения полиморфных типов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Constant">
      <summary>Выражения с постоянными значениями.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.CrossApply">
      <summary>Выражения с перекрестным применением.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.CrossJoin">
      <summary>Выражения с перекрестным соединением.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Deref">
      <summary>Выражения разыменования.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Distinct">
      <summary>Выражения для удаления повторов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Divide">
      <summary>Выражения деления.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Element">
      <summary>Выражения преобразования набора в одинарный элемент.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.EntityRef">
      <summary>Выражения, возвращающие значения ссылок на сущность.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Equals">
      <summary>Выражения равенства.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Except">
      <summary>Выражения для вычитания наборов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Filter">
      <summary>Выражения ограничения.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.FullOuterJoin">
      <summary>Выражения полного внешнего соединения.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Function">
      <summary>Выражение независимой функции.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.GreaterThan">
      <summary>Выражения «больше чем».</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.GreaterThanOrEquals">
      <summary>Выражения «больше или равно».</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.GroupBy">
      <summary>Выражения группировки.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.InnerJoin">
      <summary>Выражения с внутренним соединением.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Intersect">
      <summary>Выражения пересечения наборов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.IsEmpty">
      <summary>Выражения для определения пустых наборов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.IsNull">
      <summary>Выражения для определения значений NULL.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.IsOf">
      <summary>Выражения сравнения типов (с указанием типа или подтипа).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.IsOfOnly">
      <summary>Выражения сравнения типов (с указанием только типа).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Lambda">
      <summary>Выражения лямбда-функций.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.LeftOuterJoin">
      <summary>Выражения левого внешнего соединения.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.LessThan">
      <summary>Выражения «меньше чем».</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.LessThanOrEquals">
      <summary>Выражения «меньше или равно».</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Like">
      <summary>Выражения сравнения строк.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Limit">
      <summary>Выражения с ограничением количества результатов (TOP n).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Minus">
      <summary>Выражения вычитания.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Modulo">
      <summary>Выражения получения остатка от деления.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Multiply">
      <summary>Выражения умножения.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.NewInstance">
      <summary>Выражения создания экземпляров, строк и наборов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Not">
      <summary>Логические выражения НЕ.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.NotEquals">
      <summary>Выражения неравенства.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Null">
      <summary>Выражения со значением NULL.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.OfType">
      <summary>Выражения с элементами набора по типу (или подтипу).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.OfTypeOnly">
      <summary>Выражения с элементами наборов по точному типу.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Or">
      <summary>Логические выражения ИЛИ.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.OuterApply">
      <summary>Выражения с внешним применением.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.ParameterReference">
      <summary>Выражения со ссылками на параметры.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Plus">
      <summary>Выражения сложения.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Project">
      <summary>Выражения проекции.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Property">
      <summary>Выражения для извлечения статических свойств и свойств экземпляров.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Ref">
      <summary>Выражения со ссылками.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.RefKey">
      <summary>Выражения, возвращающие значение ключа для ссылки.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.RelationshipNavigation">
      <summary>Выражения перемещения по связям (композиции или ассоциации).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Scan">
      <summary>Выражения просмотра наборов сущностей или связей.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Skip">
      <summary>Пропуск элементов упорядоченной коллекции.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Sort">
      <summary>Выражения сортировки.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.Treat">
      <summary>Выражения преобразования типов.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.UnaryMinus">
      <summary>Выражения отрицания.</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.UnionAll">
      <summary>Выражения объединения наборов (с повторами).</summary>
    </member>
    <member name="F:System.Data.Common.Comm*******Trees.DbExpressionKind.VariableReference">
      <summary>Выражения со ссылками на переменные.</summary>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor">
      <summary>Определяет базовые возможности, которые должны реализовывать посетители, не возвращающие результирующее значение.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.Db*******Expression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.Db*******Expression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.Db*******Expression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbApplyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbArithmeticExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCaseExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCastExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCastExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbCastExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbComparisonExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbConstantExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCrossJoinExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbDerefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbDerefExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbDerefExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbDistinctExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbDistinctExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbDistinctExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbElementExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbElementExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbElementExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbEntityRefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbExceptExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbExceptExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExceptExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>В случае переопределения в производном классе обрабатывает все выражения неизвестного типа.</summary>
      <param name="expression">Обрабатываемое выражение.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbFilterExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbFunctionExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbGroupByExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIntersectExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIntersectExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbIntersectExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsEmptyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsNullExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsNullExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbIsNullExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsOfExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbJoinExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLambdaExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLikeExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLimitExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNewInstanceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNotExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNullExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNullExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbNullExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbOfTypeExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbOrExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbOrExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbOrExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbParameterReferenceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbProjectExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbPropertyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbQuantifierExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRefKeyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbScanExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbScanExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbScanExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbSkipExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbSortExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbTreatExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbTreatExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbTreatExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbUnionAllExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression" />, который был посещен.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbVariableReferenceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, который был посещен.</param>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1">
      <summary>Определяет базовые возможности, которые должны реализовывать посетители, возвращающие результирующее значение определенного типа.</summary>
      <typeparam name="TResultType">Тип результата, полученного в результате обхода.</typeparam>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1" />.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.Db*******Expression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.Db*******Expression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.Db*******Expression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbApplyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbArithmeticExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbCaseExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbCastExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCastExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbCastExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbComparisonExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbConstantExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbCrossJoinExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbDerefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbDerefExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbDerefExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbDistinctExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbDistinctExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbDistinctExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbElementExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbElementExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbElementExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbEntityRefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbExceptExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbExceptExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExceptExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>В случае переопределения в производном классе обрабатывает все выражения неизвестного типа.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbFilterExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbFunctionExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbGroupByExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbIntersectExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIntersectExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbIntersectExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbIsEmptyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbIsNullExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsNullExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbIsNullExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbIsOfExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbJoinExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbLambdaExpression)">
      <summary>При переопределении в производном классе реализует метод шаблона посетителя для <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbLikeExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbLimitExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbNewInstanceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbNotExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbNullExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbNullExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbNullExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbOfTypeExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbOrExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbOrExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbOrExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbParameterReferenceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbProjectExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbPropertyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbQuantifierExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbRefExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbRefKeyExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbScanExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbScanExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbScanExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbSkipExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbSortExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbTreatExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbTreatExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbTreatExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbUnionAllExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbExpressionVisitor`1.Visit(System.Data.Common.Comm*******Trees.DbVariableReferenceExpression)">
      <summary>В случае переопределения в производном классе реализует шаблон «Посетитель» для <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, посещение которого выполняется.</param>
      <returns>Результирующее значение определенного типа.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbFilterExpression">
      <summary>Представляет предикат, применяемый для фильтрации входного набора. В результате формируется набор элементов, которые удовлетворяют предикату. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbFilterExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbFilterExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFilterExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFilterExpression.Predicate">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает предикат, используемый для фильтрации набора входных данных.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает предикат, используемый для фильтрации набора входных данных.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" /> или его результирующий тип не является типом <see langword="Boolean" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbFunctionAggregate">
      <summary>Поддерживает стандартные агрегатные функции, такие как MIN, MAX, AVG, SUM и т. д. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionAggregate.Distinct">
      <summary>Возвращает значение, показывающее, является ли это статистическое выражение уникальным.</summary>
      <returns>Значение <see langword="true" />, если это статистическое выражение является уникальным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionAggregate.Function">
      <summary>Возвращает метаданные метода, которые задают вызываемую агрегатную функцию.</summary>
      <returns>Метаданные метода, которые задают вызываемую агрегатную функцию.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbFunctionComm*******Tree">
      <summary>Представляет вызов функции базы данных.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionComm*******Tree.EdmFunction">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, который представляет вызываемую функцию.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, который представляет вызываемую функцию.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionComm*******Tree.ResultType">
      <summary>Возвращает ожидаемый тип результата для первого результирующего набора функции.</summary>
      <returns>Задать ожидаемый тип результата для первого результата функции.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbFunctionExpression">
      <summary>Пример вызова функции. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbFunctionExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbFunctionExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionExpression.Arguments">
      <summary>Возвращает список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий аргументы функции.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий аргументы функции.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbFunctionExpression.Function">
      <summary>Возвращает метаданные вызываемой функции.</summary>
      <returns>Метаданные вызываемой функции.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbGroupAggregate">
      <summary>Представляет коллекцию элементов, образующих группу.</summary>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbGroupByExpression">
      <summary>Представляет операцию группирования. Эта операция группирует элементы во входном наборе на основании заданных ключевых выражений, а затем применяет указанные статистические функции. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbGroupByExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbGroupByExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupByExpression.Aggregates">
      <summary>Получает список <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />, в котором указываются применяемые статистические выражения.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbAggregate" />, в котором указываются применяемые статистические выражения.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupByExpression.Input">
      <summary>Возвращает объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding" />, указывающий входной набор и предоставляющий доступ к переменным элементов набора и группы.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding" />, указывающий входной набор и предоставляющий доступ к переменным элементов набора и группы.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupByExpression.Keys">
      <summary>Получает список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, содержащий ключи группирования.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, содержащий ключи группирования.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding">
      <summary>Определяет для входного набора привязку к выражению <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.Expression">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее входной набор.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding" />, или тип его результата не совпадает с типом результата текущего значения свойства и не может быть повышен до этого типа.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.GroupAggregate">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupAggregate" />, представляющий коллекцию элементов в группе.</summary>
      <returns>Элементы в группе.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.GroupVariable">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента группы.</summary>
      <returns>Ссылка на переменную элемента группы.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.GroupVariableName">
      <summary>Возвращает имя, присвоенное переменной элемента группы.</summary>
      <returns>Имя, присвоенное переменной элемента группа.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.GroupVariableType">
      <summary>Возвращает метаданные типа для переменной элемента группы.</summary>
      <returns>Метаданные типа для переменной элемента группы.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.Variable">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента.</summary>
      <returns>Ссылка на переменную элемента.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.VariableName">
      <summary>Возвращает имя, присвоенное переменной элемента.</summary>
      <returns>Имя, присвоенное переменной элемента.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding.VariableType">
      <summary>Возвращает метаданные типа переменной элемента.</summary>
      <returns>Метаданные типа переменной элемента.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbInsertComm*******Tree">
      <summary>Представляет собой операцию вставки одной строки, выраженную деревом команд. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbInsertComm*******Tree.Returning">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое задает проекцию возвращаемых результатов на основе измененных строк. Значение <see langword="null" /> указывает, что данная команда не должна возвращать результатов.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbInsertComm*******Tree.SetClauses">
      <summary>Возвращает список предложений insert set, используемых в определении операции вставки.</summary>
      <returns>Список предложений insert set, используемых в определении операции вставки.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbIntersectExpression">
      <summary>Представляет операцию пересечения наборов между левым и правым операндами. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIntersectExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIntersectExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression">
      <summary>Представляет определение пустого набора, примененное к аргументу, содержащему один набор. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsEmptyExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsEmptyExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbIsNullExpression">
      <summary>Представляет определение значения NULL, применяемого к одному аргументу. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsNullExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsNullExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbIsOfExpression">
      <summary>Представляет сравнение типа единственного аргумента с указанным типом. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsOfExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbIsOfExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbIsOfExpression.OfType">
      <summary>Возвращает метаданные типа, с которыми должны сравниваться метаданные типа аргумента.</summary>
      <returns>Метаданные типа, с которыми должны сравниваться метаданные типа аргумента.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbJoinExpression">
      <summary>Представляет операцию внутреннего, левого внешнего или полного внешнего соединения между указанными параметрами коллекции при указанном условии соединения.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbJoinExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbJoinExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbJoinExpression.JoinCondition">
      <summary>Возвращает или задает применяемое условие соединения.</summary>
      <returns>Применяемое условие соединения.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" /> или его результирующий тип не является типом <see langword="Boolean" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbJoinExpression.Left">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, предоставляющий левый вход.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, предоставляющий левый вход.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbJoinExpression.Right">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, предоставляющий правый вход.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, предоставляющий правый вход.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbLambda">
      <summary>Представляет лямбда-функцию, которую можно вызвать для создания объекта <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLambda.Body">
      <summary>Возвращает тело лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, который предоставляет тело лямбда-функции.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Common.Comm*******Trees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbVariableReferenceExpression})">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с заданной реализацией встроенной лямбда-функции и формальными параметрами.</summary>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции.    Эти переменные можно использовать в выражении body.</param>
      <returns>Новое выражение DbLambda, описывающее встроенную лямбда-функцию с указанным выражением body и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">variables body</exception>
      <exception cref="T:System.ArgumentException">variables</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbVariableReferenceExpression[])">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с заданной реализацией встроенной лямбда-функции и формальными параметрами.</summary>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции.    Эти переменные можно использовать в выражении body.</param>
      <returns>Новое выражение DbLambda, описывающее встроенную лямбда-функцию с указанным выражением body и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">variables body</exception>
      <exception cref="T:System.ArgumentException">variables</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="argument12Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM двенадцатого аргумента лямбда-функции.</param>
      <param name="argument13Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM тринадцатого аргумента лямбда-функции.</param>
      <param name="argument14Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четырнадцатого аргумента лямбда-функции.</param>
      <param name="argument15Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятнадцатого аргумента лямбда-функции.</param>
      <param name="argument16Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестнадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type argument12Type argument13Type argument14Type argument15Type argument16Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="argument12Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM двенадцатого аргумента лямбда-функции.</param>
      <param name="argument13Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM тринадцатого аргумента лямбда-функции.</param>
      <param name="argument14Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четырнадцатого аргумента лямбда-функции.</param>
      <param name="argument15Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятнадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type argument12Type argument13Type argument14Type argument15Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="argument12Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM двенадцатого аргумента лямбда-функции.</param>
      <param name="argument13Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM тринадцатого аргумента лямбда-функции.</param>
      <param name="argument14Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четырнадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type argument12Type argument13Type argument14Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="argument12Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM двенадцатого аргумента лямбда-функции.</param>
      <param name="argument13Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM тринадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type argument12Type argument13Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="argument12Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM двенадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type argument12Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="argument11Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM одиннадцатого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type argument11Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="argument10Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM десятого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type argument10Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="argument9Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM девятого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type argument9Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="argument8Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM восьмого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type argument8Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="argument7Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM седьмого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type argument7Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="argument6Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM шестого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type argument6Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="argument5Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM пятого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type argument5Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="argument4Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM четвертого аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type argument4Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="argument3Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM третьего аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type argument3Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с аргументами заданных типов, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM первого аргумента лямбда-функции.</param>
      <param name="argument2Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM второго аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type argument2Type lambdaFunction</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с одним аргументом указанного типа, как определено заданной функцией.</summary>
      <param name="argument1Type">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, определяющий тип модели EDM аргумента лямбда-функции.</param>
      <param name="lambdaFunction">Функция, определяющая логику лямбда-функции как <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</param>
      <returns>Новое DbLambda, которое описывает встроенную лямбда-функцию с указанным телом и одним формальным параметром.</returns>
      <exception cref="T:System.ArgumentNullException">argument1Type lambdaFunction</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLambda.Variables">
      <summary>Возвращает параметры лямбда-выражения.</summary>
      <returns>Список параметров лямбда-функции, представленных объектами DbVariableReferenceExpression.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbLambdaExpression">
      <summary>Позволяет применять лямбда-функцию к аргументам, представляемым объектами <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambdaExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Метод шаблона посетителя для посетителей-выражений, которые не производят результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLambdaExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Метод шаблона посетителя для посетителей-выражений, которые производят результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, который производит результирующее значение типа TResultType.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" /></typeparam>
      <returns>Тип результата, произведенного посетителем-выражением.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLambdaExpression.Arguments">
      <summary>Получает список объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий аргументы, к которым следует применить лямбда-функцию.</summary>
      <returns>Список объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLambdaExpression.Lambda">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" />, представляющий лямбда-функцию, применяемую к данному выражению.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" />, представляющий лямбда-функцию, применяемую к данному выражению.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbLikeExpression">
      <summary>Представляет сравнение строки с указанным шаблоном с необязательной экранирующей строкой. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLikeExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLikeExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLikeExpression.Argument">
      <summary>Возвращает или задает выражение, которое указывает строку для сравнения с данным шаблоном.</summary>
      <returns>Выражение, которое указывает строку для сравнения с данным шаблоном.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, или тип его результата отличен от строкового.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLikeExpression.Escape">
      <summary>Возвращает или задает выражение, которое предоставляет необязательную экранирующую строку для использования в сравнении.</summary>
      <returns>Выражение, которое предоставляет необязательную экранирующую строку для использования в сравнении.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, или тип его результата отличен от строкового.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLikeExpression.Pattern">
      <summary>Возвращает или задает выражение, которое указывает шаблон, с которым должна сравниваться данная строка.</summary>
      <returns>Выражение, которое указывает шаблон, с которым должна сравниваться данная строка.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, или тип его результата отличен от строкового.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbLimitExpression">
      <summary>Представляет ограничение на количество элементов в коллекции аргументов, соответствующее указанному значению предела.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLimitExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbLimitExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLimitExpression.Argument">
      <summary>Возвращает или задает выражение, определяющее входную коллекцию.</summary>
      <returns>Выражение, определяющее входную коллекцию.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, или типом его результата не является коллекция.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLimitExpression.Limit">
      <summary>Возвращает или задает выражение, которое ограничивающее количество элементов, возвращаемых из входной коллекции.</summary>
      <returns>Выражение, ограничивающее количество элементов, возвращаемых из входной коллекции.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Это выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, не является одним из выражений <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> или <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" /> либо тип его результата не равен или не может быть повышен до 64-разрядного целочисленного типа.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbLimitExpression.WithTies">
      <summary>Возвращает значение, которое указывает, будет ли операция ограничения затрагивать связанные результаты. Включение связанных результатов может привести к получению большего количества результатов, чем указано значением <see cref="P:System.Data.Common.Comm*******Trees.DbLimitExpression.Limit" />.</summary>
      <returns>Значение <see langword="true" />, если операция определения предельного значения будет включать связанные результаты; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbModificationClause">
      <summary>Задает одно предложение в операции вставки или обновления изменения.</summary>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbModificationComm*******Tree">
      <summary>Представляет операцию языка обработки данных (DML), выраженную деревом команд.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbModificationComm*******Tree.Target">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, которое определяет целевую таблицу для операции языка обработки данных (DML).</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, которое определяет целевую таблицу для операции DML.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression">
      <summary>Представляет структуру нового экземпляра определенного типа, включая типы набора и записи. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNewInstanceExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNewInstanceExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbNewInstanceExpression.Arguments">
      <summary>Возвращает список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" /> значений «свойство-столбец» или элементов набора для нового экземпляра.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" /> значений «свойство-столбец» или элементов набора для нового экземпляра.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbNotExpression">
      <summary>Представляет операцию логического НЕ с одним аргументом типа <see langword="Boolean" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNotExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNotExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbNullExpression">
      <summary>Представляет ссылку на типизированный литерал со значением NULL. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNullExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbNullExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression">
      <summary>Представляет методы для получения элементов указанного типа из заданного аргумента набора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbOfTypeExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbOfTypeExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbOfTypeExpression.OfType">
      <summary>Возвращает метаданные типа элементов, которые должны быть получены из аргумента набора.</summary>
      <returns>Метаданные типа элементов, которые должны быть получены из аргумента набора.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbOrExpression">
      <summary>Представляет операцию логического ИЛИ с двумя аргументами типа <see langword="Boolean" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbOrExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbOrExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression">
      <summary>Представляет ссылку на параметр, объявленный в дереве команд, которое содержит это выражение. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression.ParameterName">
      <summary>Возвращает имя упоминаемого параметра.</summary>
      <returns>Имя упоминаемого параметра.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbProjectExpression">
      <summary>Представляет проекцию заданного входного набора на указанное выражение. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbProjectExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbProjectExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbProjectExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbProjectExpression.Projection">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее проекцию.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее проекцию.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, или тип его результата не равен или не может быть повышен до ссылочного типа текущей проекции.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbPropertyExpression">
      <summary>Предоставляет методы и свойства для получения свойства экземпляра. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbPropertyExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbPropertyExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbPropertyExpression.Instance">
      <summary>Получает или задает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющий экземпляр, из которого нужно извлечь свойство.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющий экземпляр, из которого нужно извлечь свойство.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Это выражение не связано с деревом команд выражения <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, либо тип его результата не равен и не может быть повышен до типа, определяющего свойство.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbPropertyExpression.op_Implicit(System.Data.Common.Comm*******Trees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}">
      <summary>Создает новую пару ключ-значение на основе этого выражения свойства.</summary>
      <param name="value">Данное выражение свойства.</param>
      <returns>Новая пара ключ-значение с ключом и значением, полученными из объекта <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbPropertyExpression.Property">
      <summary>Возвращает метаданные получаемого свойства.</summary>
      <returns>Метаданные получаемого свойства.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbPropertyExpression.ToKeyValuePair">
      <summary>Создает новую пару ключ-значение на основе этого выражения свойства.</summary>
      <returns>Новая пара ключ-значение с ключом и значением, полученными из объекта <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression">
      <summary>Представляет операцию с квантором заданного типа над элементами указанного набора входных данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbQuantifierExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbQuantifierExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbQuantifierExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbQuantifierExpression.Predicate">
      <summary>Возвращает или задает предикат <see langword="Boolean" />, который нужно оценить для каждого элемента во входном наборе.</summary>
      <returns>Предикат <see langword="Boolean" />, который нужно оценить для каждого элемента во входном наборе.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд для выражения <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, 
или тип не является типом <see langword="Boolean" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbQueryComm*******Tree">
      <summary>Представляет операцию запроса в виде дерева команд. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbQueryComm*******Tree.Query">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющий логику операции запроса.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее логику операции запроса.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение связано с другим деревом команд.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbRefExpression">
      <summary>Представляет строго типизированную ссылку на определенный экземпляр в наборе сущностей. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRefExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRefExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbRefExpression.EntitySet">
      <summary>Возвращает метаданные для набора сущностей, содержащего экземпляр.</summary>
      <returns>Метаданные для набора сущностей, содержащего экземпляр.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression">
      <summary>Представляет методы для получения ключевого значения (в структурной форме) из базового эталонного значения. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRefKeyExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRefKeyExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression">
      <summary>Представляет средства навигации связи. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>Возвращает метаданные для элемента связи, от которого должен быть выполнен переход.</summary>
      <returns>Метаданные для элемента связи, от которого должен быть выполнен переход.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>Возвращает метаданные для элемента связи, к которому должен быть выполнен переход.</summary>
      <returns>Метаданные для элемента связи, к которому должен быть выполнен переход.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает начальную точку перехода и должно представлять собой ссылку на экземпляр сущности.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающее экземпляр исходного элемента связи, от которого должен происходить переход.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />, или его тип результата не равен ссылочному типу свойства <see cref="P:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.NavigateFrom" /> либо повышен до него.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression.Relationship">
      <summary>Возвращает метаданные для связи, по которой выполняется переход.</summary>
      <returns>Метаданные для связи, по которой выполняется переход.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbScanExpression">
      <summary>Представляет просмотр набора сущностей или связей, как указано свойством <see cref="P:System.Data.Common.Comm*******Trees.DbScanExpression.Target" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbScanExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbScanExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbScanExpression.Target">
      <summary>Возвращает метаданные упоминаемого набора сущностей или связей.</summary>
      <returns>Метаданные упоминаемого набора сущностей или связей.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbSetClause">
      <summary>Определяет предложение в операции модификации, задающей значение свойства. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSetClause.Property">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое определяет свойство, подлежащее обновлению.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое определяет свойство, подлежащее обновлению.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSetClause.Value">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое определяет новое значение обновляемого свойства.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое определяет новое значение обновляемого свойства.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbSkipExpression">
      <summary>Пропускает заданное число элементов во входном наборе. <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" /> может использоваться только после сортировки входной коллекции в соответствии с ключами сортировки.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbSkipExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbSkipExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSkipExpression.Count">
      <summary>Возвращает или задает выражение, указывающее, сколько элементов входной коллекции нужно пропустить.</summary>
      <returns>Выражение, указывающее, сколько элементов входной коллекции нужно пропустить.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />. Оно не является ни выражением <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" />, ни выражением <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />; 
или его результирующий тип не равен 64-разрядному целочисленному типу и не может быть до него повышен.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSkipExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSkipExpression.SortOrder">
      <summary>Возвращает список <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" />, определяющий порядок сортировки.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" />, определяющий порядок сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbSortClause">
      <summary>Задает ключ сортировки, который можно использовать при сортировке в объекте <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSortClause.Ascending">
      <summary>Получает логическое значение, указывающее, используется ли для этого ключа сортировка в порядке возрастания.</summary>
      <returns>Значение <see langword="true" />, если для этого ключа используется сортировка в порядке возрастания; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSortClause.Collation">
      <summary>Получает строковое значение, задающее коллекцию для этого ключа сортировки.</summary>
      <returns>Строковое значение, представляющее собой параметры сортировки для данного ключа сортировки.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSortClause.Expression">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий значение для этого ключа сортировки.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий значение для этого ключа сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbSortExpression">
      <summary>Представляет операцию сортировки, примененную к элементам заданного набора входных значений на основе указанных ключей сортировки. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbSortExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbSortExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSortExpression.Input">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающее входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbSortExpression.SortOrder">
      <summary>Возвращает список <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" />, определяющий порядок сортировки.</summary>
      <returns>Список <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" />, определяющий порядок сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbTreatExpression">
      <summary>Представляет операцию преобразования типов, применяемую к полиморфному аргументу. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbTreatExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbTreatExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbUnaryExpression">
      <summary>Реализует основные функции, необходимые для выражений, принимающих одиночный аргумент-выражение.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbUnaryExpression.Argument">
      <summary>Возвращает или задает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее аргумент.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение имеет вид <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.Comm*******Trees.DbUnaryExpression" />, или тип его результата не совпадает с типом, требуемым для аргумента, и не может быть повышен до этого типа.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression">
      <summary>Представляет операцию объединения (без удаления дубликатов) наборов, заданных левым и правым операндами. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbUnionAllExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbUnionAllExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbUpdateComm*******Tree">
      <summary>Представляет однострочную операцию обновления, выраженную в виде дерева команд. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbUpdateComm*******Tree.Predicate">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает предикат, используемый для определения того, какие элементы целевой коллекции должны быть обновлены.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает предикат, используемый для определения того, какие элементы целевой коллекции должны быть обновлены.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbUpdateComm*******Tree.Returning">
      <summary>Возвращает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое указывает проекцию результатов, подлежащих возврату, с учетом измененных строк.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, которое задает проекцию возвращаемых результатов на основе измененных строк. Значение <see langword="null" /> указывает, что данная команда не должна возвращать результатов.</returns>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbUpdateComm*******Tree.SetClauses">
      <summary>Возвращает список предложений набора обновлений, который определяет операцию обновления.</summary>
      <returns>Список предложений набора обновлений, который определяет операцию обновления.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression">
      <summary>Представляет ссылку на переменную, в настоящий момент находящуюся в области. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression.Accept(System.Data.Common.Comm*******Trees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression.Accept``1(System.Data.Common.Comm*******Trees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionVisitor" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="visitor" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression.VariableName">
      <summary>Возвращает имя упоминаемой переменной.</summary>
      <returns>Имя упоминаемой переменной.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor">
      <summary>Посещает каждый элемент дерева выражения, начиная с заданного корневого выражения. Если какой-либо из элементов меняется, дерево строится заново до корневого узла, и возвращается новое корневое выражение; в противном случае возвращается исходное корневое выражение.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbVariableReferenceExpression})">
      <summary>Представляет событие, когда происходит вход в область для посетителя выражения с указанными переменными области.</summary>
      <param name="scopeVariables">Коллекция переменных области.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.OnExitScope">
      <summary>Покидает область для посетителя выражения.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Заменяет старое выражение новым для посетителя выражения.</summary>
      <param name="oldExpression">Старое выражение.</param>
      <param name="newExpression">Новое выражение.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.Comm*******Trees.DbVariableReferenceExpression,System.Data.Common.Comm*******Trees.DbVariableReferenceExpression)">
      <summary>Представляет событие, когда переменная перепривязывается для посетителя выражений.</summary>
      <param name="fromVarRef">Расположение переменной.</param>
      <param name="toVarRef">Ссылка переменной, если она была заново привязана.</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.Db*******Expression)">
      <summary>Реализует шаблон посетителя для логического выражения И.</summary>
      <param name="expression">Логическое выражение И.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbApplyExpression)">
      <summary>Реализует шаблон посетителя для вызова указанной функции для каждого элемента в указанном входном наборе.</summary>
      <param name="expression">Выражение APPLY.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbArithmeticExpression)">
      <summary>Реализует шаблон посетителя для арифметической операции, применяемой к числовым аргументам.</summary>
      <param name="expression">Арифметическое выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCaseExpression)">
      <summary>Реализует шаблон посетителя для предложений When, Then и Else.</summary>
      <param name="expression">Выражение case.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCastExpression)">
      <summary>Реализует шаблон посетителя для преобразования типа одного аргумента в указанный тип.</summary>
      <param name="expression">Выражение приведения.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbComparisonExpression)">
      <summary>Реализует шаблон посетителя для операции сравнения, применяемой к двум аргументам.</summary>
      <param name="expression">Выражение приведения.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbConstantExpression)">
      <summary>Реализует шаблон посетителя для различных типов констант.</summary>
      <param name="expression">Константное выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbCrossJoinExpression)">
      <summary>Реализует шаблон посетителя для операции безусловного соединения между заданными аргументами коллекции.</summary>
      <param name="expression">Выражение соединения.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbDerefExpression)">
      <summary>Реализует шаблон посетителя для выражения, извлекающего сущность на основе указанной ссылки.</summary>
      <param name="expression">Выражение DEREF.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbDistinctExpression)">
      <summary>Реализует шаблон посетителя для удаления повторяющиеся элементов из указанного аргумента множества.</summary>
      <param name="expression">Различаемое выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbElementExpression)">
      <summary>Реализует шаблон посетителя для преобразования указанного аргумента набора в Singleton-класс.</summary>
      <param name="expression">Выражение элемента.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbEntityRefExpression)">
      <summary>Реализует шаблон посетителя для выражения, извлекающего ссылку из базового экземпляра сущности.</summary>
      <param name="expression">Выражение ссылки на сущность.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbExceptExpression)">
      <summary>Реализует шаблон посетителя для операции вычитания множеств между левым и правым операндами.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Реализует шаблон посетителя для основных функциональных возможностей, необходимых для типов выражений.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbFilterExpression)">
      <summary>Реализует шаблон посетителя для предиката, применяемого для фильтрации входного набора.</summary>
      <param name="expression">Выражение фильтра.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbFunctionExpression)">
      <summary>Реализует шаблон посетителя для вызова функции.</summary>
      <param name="expression">Выражение функции.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbGroupByExpression)">
      <summary>Реализует шаблон посетителя для группы по операции.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIntersectExpression)">
      <summary>Реализует шаблон посетителя для операции пересечения множеств между левым и правым операндами.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsEmptyExpression)">
      <summary>Реализует шаблон посетителя для определения пустого множества, применяемого к одному аргументу набора.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsNullExpression)">
      <summary>Реализует шаблон посетителя для определения значения null, применяемого к одному аргументу.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbIsOfExpression)">
      <summary>Реализует шаблон посетителя для сравнения типов одного аргумента с указанным типом.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbJoinExpression)">
      <summary>Реализует шаблон посетителя для операции внутреннего, левого внешнего или полного соединения между заданными аргументами коллекции с соблюдением указанных условий соединения.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLambdaExpression)">
      <summary>Реализует шаблон посетителя для применения лямбда-функции к аргументам, представленным объектами DbExpression.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLikeExpression)">
      <summary>Реализует шаблон посетителя для сравнения строки с заданным шаблоном, содержащим необязательную строку escape-символов.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbLimitExpression)">
      <summary>Реализует шаблон посетителя для ограничения на число элементов в коллекции аргументов заданным предельным значением.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNewInstanceExpression)">
      <summary>Реализует шаблон посетителя для конструкции нового экземпляра заданного типа, включая типы наборов и записей.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNotExpression)">
      <summary>Реализует шаблон посетителя для логического НЕ одного логического аргумента.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbNullExpression)">
      <summary>Реализует шаблон посетителя для ссылки на типизированный литерал null.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbOfTypeExpression)">
      <summary>Реализует шаблон посетителя для получения элементов указанного типа из заданного аргумента множества.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbOrExpression)">
      <summary>Реализует шаблон посетителя для логического ИЛИ двух логических аргументов.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbParameterReferenceExpression)">
      <summary>Реализует шаблон посетителя для ссылки на параметр, объявленный для дерева команд, содержащего это выражение.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbProjectExpression)">
      <summary>Реализует шаблон посетителя для проекции входного набора на указанное выражение.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbPropertyExpression)">
      <summary>Реализует шаблон посетителя для извлечения свойства экземпляра.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbQuantifierExpression)">
      <summary>Реализует шаблон посетителя для операции квантификатора заданного типа для элементов указанного входного набора.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRefExpression)">
      <summary>Реализует шаблон посетителя для строго типизированной ссылки на определенный экземпляр в множестве сущностей.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRefKeyExpression)">
      <summary>Реализует шаблон посетителя для извлечения значения ключа из базового значения ссылки.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression)">
      <summary>Реализует шаблон посетителя для навигации по отношению.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbScanExpression)">
      <summary>Реализует шаблон посетителя для сканирования набора сущностей или набора отношений, в соответствии со значением свойства Target.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbSkipExpression)">
      <summary>Реализует шаблон посетителя для выражения пропуска.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbSortExpression)">
      <summary>Реализует шаблон посетителя для ключа сортировки, который может использоваться как часть порядка сортировки.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbTreatExpression)">
      <summary>Реализует шаблон посетителя для операции преобразования типов, применяемой к полиморфному аргументу.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbUnionAllExpression)">
      <summary>Реализует шаблон посетителя для операции объединения множеств между левым и правым операндами.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.Visit(System.Data.Common.Comm*******Trees.DbVariableReferenceExpression)">
      <summary>Реализует шаблон посетителя для ссылки на переменную, которая в настоящий момент находится в области.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный посетитель.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.Comm*******Trees.DbAggregate)">
      <summary>Реализует шаблон посетителя для агрегата.</summary>
      <param name="aggregate">Агрегат.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>Реализует шаблон посетителя для набора сущностей.</summary>
      <param name="entitySet">Набор сущностей.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Реализует шаблон посетителя для выражения.</summary>
      <param name="expression">Выражение.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.Comm*******Trees.DbExpressionBinding)">
      <summary>Реализует шаблон посетителя для привязки выражения.</summary>
      <param name="binding">Привязка выражения.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.Comm*******Trees.DbExpressionBinding})">
      <summary>Реализует шаблон посетителя для списка привязок выражений.</summary>
      <param name="list">Список привязок выражений.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Реализует шаблон посетителя для списка выражения.</summary>
      <param name="list">Список выражений.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)">
      <summary>Реализует шаблон посетителя для функции.</summary>
      <param name="functionMetadata">Метаданные функции.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.Comm*******Trees.DbFunctionAggregate)">
      <summary>Реализует шаблон посетителя для агрегата функции.</summary>
      <param name="aggregate">Агрегат.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.Comm*******Trees.DbGroupAggregate)">
      <summary>Реализует шаблон посетителя для агрегата группы.</summary>
      <param name="aggregate">Агрегат.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.Comm*******Trees.DbGroupExpressionBinding)">
      <summary>Реализует шаблон посетителя для привязки выражения группы.</summary>
      <param name="binding">Привязка.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.Comm*******Trees.DbLambda)">
      <summary>Реализует шаблон посетителя для лямбда-функции.</summary>
      <param name="lambda">Лямбда-функция.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.Comm*******Trees.DbSortClause)">
      <summary>Реализует шаблон посетителя для предложения сортировки.</summary>
      <param name="clause">Утверждение сортировки.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.Comm*******Trees.DbSortClause})">
      <summary>Реализует шаблон посетителя для порядка сортировки.</summary>
      <param name="sortOrder">Порядок сортировки.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)">
      <summary>Реализует шаблон посетителя для типа.</summary>
      <param name="type">Тип.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Реализует шаблон посетителя для использования типа.</summary>
      <param name="type">Тип.</param>
      <returns>Реализованный шаблон посетителя.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder">
      <summary>Предоставляет API для создания выражений <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" /> и обеспечивает доступ к этому API в форме методов расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionAggregate" />.</summary>
      <param name="function">Функция, определяющая статистическую операцию.</param>
      <param name="argument">Аргумент, для которого должна быть вычислена агрегатная функция.</param>
      <returns>Новый агрегат функции с ссылкой к данной функции и аргументу. Свойство Distinct агрегата функции будет иметь значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> или <paramref name="argument" /> null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> не является агрегатной функцией или имеет несколько аргументов, либо тип результата <paramref name="argument" /> не эквивалентен и неприводим путем продвижения к типу параметра <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionAggregate" />, применяющийся определенным образом.</summary>
      <param name="function">Функция, определяющая статистическую операцию.</param>
      <param name="argument">Аргумент, для которого должна быть вычислена агрегатная функция.</param>
      <returns>Новый агрегат функции с ссылкой к данной функции и аргументу. Свойство Distinct агрегата функции будет иметь значение <see langword="true" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> или <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> не является агрегатной функцией или имеет несколько аргументов, либо тип результата <paramref name="argument" /> не эквивалентен и неприводим путем продвижения к типу параметра <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора.    Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <returns>Новое DbProjectExpression, представляющий операцию All.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равно null.
-или-
Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Тип результата выражения, созданного <paramref name="Predicate" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <returns>Новое DbProjectExpression, представляющий операцию All.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="predicate" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.*******(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.Db*******Expression" />, выполняющий логическую операцию И для левого и правого аргументов.</summary>
      <param name="left">Логическое выражение, задающее левый аргумент.</param>
      <param name="right">Логическое выражение, задающее правый аргумент.</param>
      <returns>Новый DbAndExpression с заданными аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> и <paramref name="right" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее, является ли заданный аргумент набора непустым.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <returns>Новый <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />, примененный к новому <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" /> с заданным аргументом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора. Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <returns>Новое DbProjectExpression, представляющий операцию Any.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равно null.
-или-
Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или- 
Тип результата выражения, созданного <paramref name="predicate" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <returns>Новое DbProjectExpression, представляющий операцию Any.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип результата выражения, созданного <paramref name="predicate" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.Comm*******Trees.DbAggregate,System.String)">
      <summary>Возвращает указанные аргументы в виде объекта пары "ключ-значение".</summary>
      <param name="value">Значение из пары ключ/значение.</param>
      <param name="alias">Ключ из пары ключ/значение.</param>
      <returns>Объект пары " ключ-значение ".</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.Comm*******Trees.DbExpression,System.String)">
      <summary>Возвращает указанные аргументы в виде объекта пары "ключ-значение".</summary>
      <param name="value">Значение из пары ключ/значение.</param>
      <param name="alias">Ключ из пары ключ/значение.</param>
      <returns>Объект пары " ключ-значение ".</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, использующий сгенерированное имя переменной для привязки данного выражения.</summary>
      <param name="input">Выражение, которое требуется привязать.</param>
      <returns>Новая привязка выражения с указанным выражением и создаваемым именем переменной.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не имеет результата коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.Comm*******Trees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, использующий указанное имя переменной для привязки данного выражения.</summary>
      <param name="input">Выражение, которое требуется привязать.</param>
      <param name="varName">Имя переменной, которое должно использоваться для привязки.</param>
      <returns>Новая привязка выражения с указанным выражением и именем переменной.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="varName" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не имеет результата коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression},System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbCaseExpression" />.</summary>
      <param name="whenExpressions">Список выражений, предоставляющих условия для каждого варианта.</param>
      <param name="thenExpressions">Список выражений, предоставляющих результат для каждого варианта.</param>
      <param name="elseExpression">Выражение, определяющее результат, в случае если ни один из вариантов не подходит.</param>
      <returns>Новое DbCaseExpression с указанными случаями и результатом по умолчанию.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> или <paramref name="thenExpressions" /> имеет значение null или содержит null, либо <paramref name="elseExpression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> или <paramref name="thenExpressions" /> пуст, либо <paramref name="whenExpressions" /> содержит выражение с нелогическим типом результата, либо у результатов всех выражений в <paramref name="thenExpressions" /> и <paramref name="elseExpression" /> отсутствует общий тип.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbCastExpression" />, применяющее операцию приведения к полиморфному аргументу.</summary>
      <param name="argument">Аргумент, к которому требуется применить приведение.</param>
      <param name="toType">Метаданные типа, указывающие тип, к которому требуется привести.</param>
      <returns>Новое DbCastExpression с указанным аргументом и типом целевого объекта.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Argument" /> или <paramref name="toType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Указанное приведение недопустимо.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> заданного типа-примитива с указанным постоянным значением.</summary>
      <param name="constantType">Тип постоянного значения.</param>
      <param name="value">Представляемое постоянное значение.</param>
      <returns>Новое DbConstantExpression с заданным значением и типом результата <paramref name="constantType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> или <paramref name="constantType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> не является экземпляром допустимого константного типа, <paramref name="constantType" /> не представляет простой тип, либо <paramref name="value" /> имеет простой тип, отличный от представленного <paramref name="constantType" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> с заданным значением константы</summary>
      <param name="value">Представляемое постоянное значение.</param>
      <returns>Новое DbConstantExpression с заданным значением.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> не является экземпляром допустимого константного типа.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность на основе значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyValues">Коллекция объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющих значения ключей. Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа сущности, на которую указывает ссылка.</param>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entitySet" /> имеет значение null, либо параметр <paramref name="keyValues" /> имеет или содержит значение null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность на основе значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyValues">Коллекция объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющих значения ключей. Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа сущности, на которую указывает ссылка.</param>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entitySet" /> имеет значение null, либо параметр <paramref name="keyValues" /> имеет или содержит значение null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность указанного типа на основании значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="entityType">Заданный тип сущности, на которую указывает ссылка. Тип сущности должен принадлежать той же иерархии, что и тип элемента набора сущностей.</param>
      <param name="keyValues">Коллекция объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющих значения ключей. Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа сущности, на которую указывает ссылка.</param>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> или <paramref name="entityType" /> имеет значение null, либо <paramref name="keyValues" /> имеет значение null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не является типом в той же иерархии типов (подтипом, надтипом или тем же типом), что и тип элемента <paramref name="entitySet" />.
-или-
Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность указанного типа на основании значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="entityType">Заданный тип сущности, на которую указывает ссылка. Тип сущности должен принадлежать той же иерархии, что и тип элемента набора сущностей.</param>
      <param name="keyValues">Коллекция объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющих значения ключей. Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа сущности, на которую указывает ссылка.</param>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> или <paramref name="entityType" /> имеет значение null, либо <paramref name="keyValues" /> имеет значение null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не является типом в той же иерархии типов (подтипом, надтипом или тем же типом), что и тип элемента <paramref name="entitySet" />.
-или-
Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.</summary>
      <param name="source">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, задающий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <returns>Новое DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> CrossApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="apply" /> равно null.
-или-
Результат <paramref name="apply" /> содержит имя или выражение, равное NULL.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или- 
Результат операции <paramref name="apply" /> содержит имя или выражение, которое недопустимо в привязке выражения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpressionBinding)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.</summary>
      <param name="input">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий входной набор.</param>
      <param name="apply">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий логику вычисления, которую необходимо применить для каждого из членов входного набора.</param>
      <returns>Новое DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> CrossApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="apply" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpressionBinding})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbCrossJoinExpression" />, которое без каких-либо условий объединяет наборы, заданные списком входящих привязок выражений.</summary>
      <param name="inputs">Список привязок выражений, задающий входные наборы.</param>
      <returns>Новое DbCrossJoinExpression, с <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> CrossJoin, которое представляет безусловное объединение входных наборов.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> является null или содержит элемент null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> содержит менее двух привязок выражений.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbDerefExpression" />, которое получает определенную сущность, если дано выражение ссылки.</summary>
      <param name="argument">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, предоставляющий ссылку. Это выражение должно иметь ссылочный тип.</param>
      <returns>Новое DbDerefExpression, которое получает заданную сущность.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к ссылочному типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbDistinctExpression" />, которое удаляет повторяющиеся элементы из указанного аргумента набора.</summary>
      <param name="argument">Выражение, задающее набор, для которого требуется выполнить операцию удаления повторяющихся элементов.</param>
      <returns>Новое DbDistinctExpression, который представляет определенную операцию, примененную к аргументу указанного набора.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, которое делит левый аргумент на правый аргумент.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию деления.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> или <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbElementExpression" />, преобразующее набор в одиночный объект.</summary>
      <param name="argument">Выражение, задающее входной набор.</param>
      <returns>Объект DbElementExpression, представляющий преобразование заданного аргумента в одноэлементное множество.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, проверяющее, равен ли левый аргумент правому.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение на равенство.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по равенству для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExceptExpression" />, вычисляющее разницу между левым аргументом набора и правым аргументом набора.</summary>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <returns>Новый объект DbExceptExpression, представляющий различие между левым и правым аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющее, является ли заданный аргумент набора непустым.</summary>
      <param name="argument">Выражение, задающее входной набор.</param>
      <returns>Новый <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />, примененный к новому <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" /> с заданным аргументом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> с логическим значением <see langword="false" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> с логическим значением <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />, фильтрующее элементы заданного входного набора с использованием заданного предиката.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <returns>Новое DbFilterExpression, которое создает фильтрованный набор.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="predicate" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает класс <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, соединяющий наборы, задаваемые левым и правым выражениями, в соответствии с заданным условием соединения. При этом FullOuterJoin используется в качестве типа <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент левого набора.</param>
      <param name="right">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент правого набора.</param>
      <param name="joinCondition">Метод, представляющий условие соединения. Он должен создать выражение с результатом логического типа, в котором указана логика условия соединения.</param>
      <returns>Новый класс DbJoinExpression, в качестве типа <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> которого задан тип FullOuterJoin, представляющий собой операцию полного внешнего соединения, применяемую к левому и правому входным наборам в соответствии с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">Для параметров <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> задано значение null.
-или-
Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> или <paramref name="right" /> не имеет типа результата коллекции.
-или- 
Тип результата выражения, созданного <paramref name="joinCondition" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, которое объединяет наборы, заданные левой и правой привязками выражения, при указанном условии объединения, используя FullOuterJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <returns>Новый класс DbJoinExpression, в качестве типа <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> которого задан тип FullOuterJoin, представляющий собой операцию полного внешнего соединения, применяемую к левому и правому входным наборам в соответствии с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">Тип результата выражения, созданного <paramref name="joinCondition" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbEntityRefExpression" />, которое получает ссылку заданной сущности в структурной форме.</summary>
      <param name="argument">Выражение, задающее сущность. Выражение должно иметь тип результата сущности.</param>
      <returns>Новое DbEntityRefExpression, которое получает ссылку на заданную сущность.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу сущности.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefKeyExpression" />, которое получает ключевые значения заданной ссылки в структурной форме.</summary>
      <param name="argument">Выражение, задающее ссылку. Это выражение должно иметь ссылочный тип с типом элемента сущности.</param>
      <returns>Новое DbRefKeyExpression, которое извлекает ключевые значения заданной ссылки.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к ссылочному типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент больше правого аргумента.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение "больше чем".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент больше или равен правому аргументу.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение "больше чем или равно".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новую привязку выражения группы, которая использует сгенерированные имена переменной и переменной группы для привязки заданного выражения.</summary>
      <param name="input">Выражение, которое требуется привязать.</param>
      <returns>Новая привязка выражения группы с указанным выражением и создаваемым именем переменной и именем переменной группы.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.Comm*******Trees.DbExpression,System.String,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding" />, который использует заданные имена переменной и переменной группы для привязки заданного выражения.</summary>
      <param name="input">Выражение, которое требуется привязать.</param>
      <param name="varName">Имя переменной, которое должно использоваться для привязки.</param>
      <param name="groupVarName">Имя переменной, которое должно использоваться для ссылки на группу при использовании новой привязки выражения группы в выражении group-by.</param>
      <returns>Новая привязка выражения группы с указанным выражением и именем переменной и именем переменной группы.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="varName" /> или <paramref name="groupVarName" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.Comm*******Trees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbAggregate}})">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupByExpression" />, группирующий элементы входного набора в соответствии с заданными ключами группы и применяющий указанные статистические выражения.</summary>
      <param name="input">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbGroupExpressionBinding" />, задающий входной набор.</param>
      <param name="keys">Список пар строка-выражение, определяющих столбцы группировки.</param>
      <param name="aggregates">Список выражений, указывающих, какие статистические функции следует применить.</param>
      <returns>Новое DbGroupByExpression с заданным входным параметром, ключами группирования и агрегатами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> или <paramref name="aggregates" /> равняется NULL, <paramref name="keys" /> содержит ключ столбца или выражение NULL, либо <paramref name="aggregates" /> содержит имя статистического столбца или статистическое выражение, равное NULL.</exception>
      <exception cref="T:System.ArgumentException">Оба параметра <paramref name="keys" /> и <paramref name="aggregates" /> пусты или недействительны, либо указано дублирующееся имя столбца.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии объединения, используя InnerJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент левого набора.</param>
      <param name="right">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент правого набора.</param>
      <param name="joinCondition">Метод, представляющий условие соединения. Он должен создать выражение с результатом логического типа, в котором указана логика условия соединения.</param>
      <returns>Новое DbJoinExpression с <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> — InnerJoin, которое представляет операцию внутреннего соединения, примененную к левому и правому входным наборам с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> равно "null".
-или-
Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> или <paramref name="right" /> не имеет типа результата коллекции.
-или-
Тип результата выражения, созданного <paramref name="joinCondition" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, которое объединяет наборы, заданные левой и правой привязками выражения, при указанном условии объединения, используя InnerJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> — InnerJoin, которое представляет операцию внутреннего соединения, примененную к левому и правому входным наборам с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="joinCondition" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbIntersectExpression" />, вычисляющее пересечение левого и правого аргументов набора.</summary>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <returns>Новый объект DbIntersectExpression, представляющий пересечение левого и правого аргументов.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции для <paramref name="left" /> или <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.Comm*******Trees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />, представляющее применение заданной лямбда-функции к данным аргументам.</summary>
      <param name="lambda">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" />, представляющий лямбда-функцию, которую требуется применить.</param>
      <param name="arguments">Список выражений, задающих аргументы.</param>
      <returns>Новое DbLambdaExpression, представляющее приложение лямбда-функции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> или <paramref name="arguments" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="lambda" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.Comm*******Trees.DbLambda,System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbLambdaExpression" />, представляющее применение заданной лямбда-функции к данным аргументам.</summary>
      <param name="lambda">Экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" />, представляющий лямбда-функцию, которую требуется применить.</param>
      <param name="arguments">Выражения, задающие аргументы.</param>
      <returns>Новое DbLambdaExpression, представляющее приложение лямбда-функции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> или <paramref name="arguments" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="lambda" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, представляющее вызов заданной функции с определенными аргументами.</summary>
      <param name="function">Метаданные вызываемой функции.</param>
      <param name="arguments">Список выражений, задающих аргументы для функции.</param>
      <returns>Новое выражение DbFunctionExpression, представляющее вызов функции.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="function" /> имеет значение null, либо параметр <paramref name="arguments" /> имеет или содержит значение null.</exception>
      <exception cref="T:System.ArgumentException">Количество параметров <paramref name="arguments" /> не совпадает с количеством параметров, объявленных с помощью <paramref name="function" />, либо параметр <paramref name="arguments" /> содержит выражение, тип результата которого не совпадает с типом параметра соответствующей функции или не позволяет повысить его до этого типа.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, представляющее вызов заданной функции с определенными аргументами.</summary>
      <param name="function">Метаданные вызываемой функции.</param>
      <param name="arguments">Выражения, предоставляющие аргументы функции.</param>
      <returns>Новое выражение DbFunctionExpression, представляющее вызов функции.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="function" /> имеет значение null, либо параметр <paramref name="arguments" /> имеет или содержит значение null.</exception>
      <exception cref="T:System.ArgumentException">Количество параметров <paramref name="arguments" /> не совпадает с количеством параметров, объявленных с помощью <paramref name="function" />, либо параметр <paramref name="arguments" /> содержит выражение, тип результата которого не совпадает с типом параметра соответствующей функции или не позволяет повысить его до этого типа.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbIsEmptyExpression" />, определяющее, является ли заданный аргумент набора пустым набором.</summary>
      <param name="argument">Выражение, задающее входной набор.</param>
      <returns>Новый DbIsEmptyExpression с заданным аргументом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbIsNullExpression" />, определяющее, имеет ли заданный аргумент значение NULL.</summary>
      <param name="argument">Выражение, задающее аргумент.</param>
      <returns>Новый DbIsNullExpression с заданным аргументом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> имеет тип коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />, определяющее, принадлежит ли заданный аргумент определенному типу или подтипу.</summary>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="type">Метаданные типа, задающие тип, с которым нужно сравнить тип результата экземпляра.</param>
      <returns>Новый объект DbIsOfExpression с заданным экземпляром и типом и DbExpressionKind IsOf.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbIsOfExpression" />, определяющее, принадлежит ли заданный аргумент определенному типу (только этому типу, не подтипу).</summary>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="type">Метаданные типа, задающие тип, с которым нужно сравнить тип результата экземпляра.</param>
      <returns>Новый объект DbIsOfExpression с заданным экземпляром и типом и DbExpressionKind IsOfOnly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый класс <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, который соединяет наборы, заданные внешними и внутренними выражениями при условии равенства между указанными внешними и внутренними ключами, с помощью InnerJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="outer">
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент внешнего набора.</param>
      <param name="inner">
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент внутреннего набора.</param>
      <param name="outerKey">Метод, указывающий способ получения значения внешнего ключа из элемента внешнего набора.</param>
      <param name="innerKey">Метод, указывающий способ получения значения внутреннего ключа из элемента внутреннего набора.</param>
      <returns>Выражение DbJoinExpression создается с помощью класса <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> InnerJoin, который представляет операцию внутреннего соединения, применяемую к левому и правому входным наборам в условии соединения, сравнивающего значения внешних и внутренних ключей на равенство.</returns>
      <exception cref="T:System.ArgumentNullException">Параметры <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> или <paramref name="innerKey" /> имеют значение NULL.
-или- 
Выражение, созданное <paramref name="outerKey" /> или <paramref name="innerKey" />, имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> или <paramref name="inner" /> не имеет типа результата коллекции.
-или-
Для выражений, созданных <paramref name="outerKey" /> и <paramref name="innerKey" />, равенство не сравнивается.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,``0})">
      <summary>Создает новый <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, который проецирует указанный селектор на наборы, заданные внешними и внутренними выражениями, соединенными условием равенства между указанными внешними и внутренними ключами, с помощью InnerJoin как <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="outer">
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент внешнего набора.</param>
      <param name="inner">
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент внутреннего набора.</param>
      <param name="outerKey">Метод, указывающий способ получения значения внешнего ключа из элемента внешнего набора.</param>
      <param name="innerKey">Метод, указывающий способ получения значения внутреннего ключа из элемента внутреннего набора.</param>
      <param name="selector">Метод, указывающий способ получения элемента результирующего набора из элементов внутреннего и внешнего наборов. Этот метод должен создать экземпляр типа, совместимого с Join и с возможностью разрешения в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />. Требования к совместимости <c>TSelector</c> приведены в примечаниях.</param>
      <typeparam name="TSelector">Тип <paramref name="selector" />.</typeparam>
      <returns>Новое выражение DbProjectExpression с указанным селектором в качестве его проекции и новым выражением DbJoinExpression качестве входных данных. Входное выражение DbJoinExpression создается с помощью <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> InnerJoin, который представляет операцию внутреннего соединения, применяемую к левому и правому входным наборам в условии соединения, сравнивающего значения внешних и внутренних ключей на равенство.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> или <paramref name="selector" /> имеет значение NULL.
-или-
Выражение, созданное <paramref name="outerKey" /> или <paramref name="innerKey" />, имеет значение NULL.
-или-
Результат <paramref name="selector" /> имеет значение NULL после преобразования в DbExpression.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> или <paramref name="inner" /> не имеет типа результата коллекции.
-или-
Выражения, созданные <paramref name="outerKey" /> и <paramref name="innerKey" />, не сравниваются на равенство.
-или- 
Результат <paramref name="selector" /> несовместим с SelectMany.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.Comm*******Trees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbVariableReferenceExpression})">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с заданной реализацией встроенной лямбда-функции и формальными параметрами.</summary>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции. Эти переменные допустимо использовать в выражении <paramref name="body" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> имеет значение null или содержит null, либо <paramref name="body" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> содержит несколько элементов с одним и тем же именем переменной.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbVariableReferenceExpression[])">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" /> с заданной реализацией встроенной лямбда-функции и формальными параметрами.</summary>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции. Эти переменные допустимо использовать в выражении <paramref name="body" />.</param>
      <returns>Новый класс DbLambda, который описывает встроенную лямбда-функцию с указанными телом и формальными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> имеет значение null или содержит null, либо <paramref name="body" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> содержит несколько элементов с одним и тем же именем переменной.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии объединения, используя LeftOuterJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент левого набора.</param>
      <param name="right">Класс <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, указывающий аргумент правого набора.</param>
      <param name="joinCondition">Метод, представляющий условие соединения. Он должен создать выражение с результатом логического типа, в котором указана логика условия соединения.</param>
      <returns>Новое DbJoinExpression с <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> — LeftOuterJoin, которое представляет операцию левого внешнего соединения, примененную к левому и правому входным наборам с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> равно "null".
-или-
Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> или <paramref name="right" /> не имеет типа результата коллекции.
-или-
Тип результата выражения, созданного <paramref name="joinCondition" />, отличается от логического.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbJoinExpression" />, которое объединяет наборы, заданные левой и правой привязками выражения, при указанном условии объединения, используя LeftOuterJoin в качестве <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" />.</summary>
      <param name="left">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> — LeftOuterJoin, которое представляет операцию левого внешнего соединения, примененную к левому и правому входным наборам с заданным условием соединения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="joinCondition" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент меньше правого аргумента.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение "меньше чем".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент меньше или равен правому аргументу.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение "меньше чем или равно".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции с типом сравниваемых по равенству и порядку элементов между <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, которое сравнивает указанную входную строку с заданным шаблоном.</summary>
      <param name="argument">Выражение, задающее входную строку.</param>
      <param name="pattern">Выражение, задающее шаблонную строку.</param>
      <returns>Новое DbLikeExpression с определенным входом, шаблоном и выходом null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Argument" /> или <paramref name="pattern" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="Argument" /> или <paramref name="pattern" /> не относится к строковому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbLikeExpression" />, которое сравнивает указанную входную строку с заданным шаблоном, используя необязательную строку escape-символов.</summary>
      <param name="argument">Выражение, задающее входную строку.</param>
      <param name="pattern">Выражение, задающее шаблонную строку.</param>
      <param name="escape">Необязательное выражение, задающее escape-строку.</param>
      <returns>Новое DbLikeExpression с определенным входом, шаблоном и выходом.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> или <paramref name="escape" /> имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" />, <paramref name="pattern" /> или <paramref name="escape" /> не относится к строковому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, ограничивающий число элементов в коллекции аргументов заданным пределом подсчета. Связанные результаты не включаются в выходные данные.</summary>
      <param name="argument">Выражение, определяющее входную коллекцию.</param>
      <param name="count">Выражение, задающее предельное значение.</param>
      <returns>Новое DbLimitExpression с указанными значениями аргументов и предела подсчета, которое не включает связанных результатов.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо результат <paramref name="count" /> не относится к типу, эквивалентному 64-разрядному целочисленному типу или приводимому к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, которое вычитает правый аргумент из левого аргумента.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию вычитания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, вычисляющее остаток при делении левого аргумента на правый аргумент.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию вычисления остатка.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, которое умножает левый аргумент на правый аргумент.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию умножения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />, представляющее переход по композиции или отношению ассоциации.</summary>
      <param name="navigateFrom">Выражение, задающее экземпляр, из которого должен происходить переход.</param>
      <param name="fromEnd">Метаданные для свойства, которое представляет конец отношения, из которого должен происходить переход.</param>
      <param name="toEnd">Метаданные для свойства, которое представляет конец отношения, к которому должен происходить переход.</param>
      <returns>Новое DbRelationshipNavigationExpression, представляющий навигацию указанных начального и конечного концов отношения указанного типа отношения из указанного экземпляра источника навигации.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />, <paramref name="toEnd" /> или <paramref name="navigateFrom" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> и <paramref name="toEnd" /> не объявлены одним и тем же типом связи, или <paramref name="navigateFrom" /> имеет тип результатов, не совместимый с типом свойства <paramref name="fromEnd" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRelationshipNavigationExpression" />, представляющее переход по композиции или отношению ассоциации.</summary>
      <param name="type">Метаданные для типа отношений, представляющие отношение.</param>
      <param name="fromEndName">Имя свойства типа отношений, которое представляет конец отношения, из которого должен происходить переход.</param>
      <param name="toEndName">Имя свойства типа отношений, которое представляет конец отношения, на который должен происходить переход.</param>
      <param name="navigateFrom">Выражение, задающее экземпляр, из которого должен происходить переход.</param>
      <returns>Новое DbRelationshipNavigationExpression, представляющий навигацию указанных начального и конечного концов отношения указанного типа отношения из указанного экземпляра источника навигации.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />,  <paramref name="fromEndName" />,  <paramref name="toEndName" /> или <paramref name="navigateFrom" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не связан с рабочей областью метаданных этого дерева команд, <paramref name="navigateFrom" />связан с другим деревом команд, <paramref name="type" /> не объявляет свойство конца связи с именем <paramref name="toEndName" /> или <paramref name="fromEndName" /> либо <paramref name="navigateFrom" /> имеет тип результата, несовместимый с типом свойства для свойства конца связи с именем <paramref name="fromEndName" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, которое отрицает значение аргумента.</summary>
      <param name="argument">Выражение, задающее аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию взятия с обратным знаком.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип числового результата для <paramref name="argument" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />. Если тип аргумента является типом коллекции, аргументы задают элементы коллекции. В противном случае аргументы используются как значения свойств или столбцов в новом экземпляре.</summary>
      <param name="instanceType">Тип нового экземпляра.</param>
      <param name="arguments">Выражения, задающие значения новых экземпляров, интерпретируются согласно типу экземпляра.</param>
      <returns>Новое DbNewInstanceExpression с заданным типом и аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> или <paramref name="arguments" /> является null или <paramref name="arguments" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> пуст, либо типы результатов вложенных выражений не соответствуют требованиям <paramref name="instanceType" /> (как описано в разделе примечаний).</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />. Если тип аргумента является типом коллекции, аргументы задают элементы коллекции. В противном случае аргументы используются как значения свойств или столбцов в новом экземпляре.</summary>
      <param name="instanceType">Тип нового экземпляра.</param>
      <param name="arguments">Выражения, задающие значения новых экземпляров, интерпретируются согласно типу экземпляра.</param>
      <returns>Новое DbNewInstanceExpression с заданным типом и аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> или <paramref name="arguments" /> является null или <paramref name="arguments" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> пуст, либо типы результатов вложенных выражений не соответствуют требованиям <paramref name="instanceType" /> (как описано в разделе примечаний).</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, создающее коллекцию, которая содержит указанные элементы. Тип коллекции основывается на общем типе элементов. Если не существует общего типа элементов, создается исключение.</summary>
      <param name="elements">Список выражений, предоставляющих элементы коллекции.</param>
      <returns>Новое DbNewInstanceExpression с заданным типом коллекции и аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> является null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> пуст или содержит выражения, для которых не существует общего типа результата.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.Comm*******Trees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, создающее коллекцию, которая содержит указанные элементы. Тип коллекции основывается на общем типе элементов. Если не существует общего типа элементов, создается исключение.</summary>
      <param name="elements">Список выражений, предоставляющих элементы коллекции.</param>
      <returns>Новое DbNewInstanceExpression с заданным типом коллекции и аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> является null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> пуст или содержит выражения, для которых не существует общего типа результата.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, создающее пустую коллекцию заданного типа.</summary>
      <param name="collectionType">Метаданные типа создаваемой коллекции</param>
      <returns>Новое DbNewInstanceExpression с заданным типом коллекции и пустым списком <paramref name="Arguments" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="collectionType" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, создающее строку с указанными именами столбцов и значениями, которые заданы как выражения.</summary>
      <param name="columnValues">Список пар "строка-ключ DbExpression-значение", определяющий структуру и значения строки.</param>
      <returns>Новое DbNewInstanceExpression, представляющий конструкцию строки.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> имеет значение NULL либо содержит элемент именем столбца или выражением, равным NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> пуст или содержит повторяющееся или недопустимое имя столбца.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNotExpression" />, выполняющее логическое отрицание заданного аргумента.</summary>
      <param name="argument">Логическое выражение, задающее аргумент.</param>
      <returns>Новый DbNotExpression с заданным аргументом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbComparisonExpression" />, проверяющее, неравенство левого и правого аргументов.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbComparisonExpression, представляющий сравнение на неравенство.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по равенству для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbNullExpression" />, представляющее типизированное значение NULL.</summary>
      <param name="nullType">Тип значения NULL.</param>
      <returns>Экземпляр DbNullExpression.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="nullType" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />, создающее набор элементов заданного типа из указанного входного набора.</summary>
      <param name="argument">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="type">Метаданные типа для типа, которому должны принадлежать элементы входного набора, чтобы войти в результирующий набор.</param>
      <returns>Новый объект DbOfTypeExpression с аргументом и типом указанного набора и объект ExpressionKind класса <see cref="F:System.Data.Common.Comm*******Trees.DbExpressionKind.OfType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо <paramref name="type" /> не является типом в той же иерархии типов, что и тип элемента типа результата коллекции <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbOfTypeExpression" />, создающее набор элементов строго заданного типа из указанного входного набора.</summary>
      <param name="argument">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="type">Метаданные типа для типа, которому должны строго соответствовать элементы входного набора, чтобы войти в результирующий набор.</param>
      <returns>Новый объект DbOfTypeExpression с аргументом и типом указанного набора и объект ExpressionKind класса <see cref="F:System.Data.Common.Comm*******Trees.DbExpressionKind.OfTypeOnly" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо <paramref name="type" /> не является типом в той же иерархии типов, что и тип элемента типа результата коллекции <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbOrExpression" />, выполняющий логическую операцию ИЛИ для левого и правого аргументов.</summary>
      <param name="left">Логическое выражение, задающее левый аргумент.</param>
      <param name="right">Логическое выражение, задающее правый аргумент.</param>
      <returns>Новый DbOrExpression с заданными аргументами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> или <paramref name="right" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанного ключа сортировки в порядке возрастания и с параметрами сортировки по умолчанию.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="sortKey" /> равно null.
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="sortKey" />, не имеет типа результата с возможностью сравнивания порядка.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанного ключа сортировки в порядке возрастания и с заданными параметрами сортировки.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> равно "null".
-или- 
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="sortKey" />, не имеет типа строкового результата с возможностью сравнивания порядка.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанного ключа сортировки в порядке убывания и с параметрами сортировки по умолчанию.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="sortKey" /> равно null.
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="sortKey" />, не имеет типа результата с возможностью сравнивания порядка.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанного ключа сортировки в порядке убывания и с заданными параметрами сортировки.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> равно "null".
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="sortKey" />, не имеет типа строкового результата с возможностью сравнивания порядка.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. В строках, для которых при вычислении выражения <paramref name="apply" /> получается пустой набор, столбец apply имеет значение <see langword="null" />.</summary>
      <param name="source">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, задающий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <returns>Новое DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> OuterApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="apply" /> равно null.
-или- 
Результат <paramref name="apply" /> содержит имя или выражение, равное NULL.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="Source" /> не относится к типу коллекции.
-или-
Результат операции <paramref name="apply" /> содержит имя или выражение, которое недопустимо в привязке выражения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpressionBinding)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. В строках, для которых при вычислении выражения <paramref name="apply" /> получается пустой набор, столбец apply имеет значение <see langword="null" />.</summary>
      <param name="input">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий входной набор.</param>
      <param name="apply">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionBinding" />, задающий логику вычисления, которую необходимо применить для каждого из членов входного набора.</param>
      <returns>Новое DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> OuterApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="apply" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />, ссылающееся на параметр с заданными именем и типом.</summary>
      <param name="type">Тип параметра, на который указывает ссылка.</param>
      <param name="name">Имя упоминаемого параметра.</param>
      <returns>DbParameterReferenceExpression, представляющий ссылку на параметр с указанным именем и типом. Тип результата выражения будет совпадать с <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, прибавляющее к левому аргументу правый.</summary>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию добавления.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, создающее проекцию заданного выражения на данном входном наборе.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="projection">Выражение, которое требуется спроецировать на набор.</param>
      <returns>Новое DbProjectExpression, представляющий операцию проекции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="projection" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.EdmProperty)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, представляющее получение указанного свойства.</summary>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство. Может иметь значение null, если свойство является статическим.</param>
      <param name="propertyMetadata">Метаданные для извлекаемого свойства.</param>
      <returns>Новое DbPropertyExpression, представляющее извлечение свойства.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> имеет значение null или <paramref name="instance" /> имеет значение null, а свойство не является статическим.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.NavigationProperty)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, представляющее получение указанного свойства навигации.</summary>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство навигации.</param>
      <param name="navigationProperty">Метаданные извлекаемого свойства навигации.</param>
      <returns>Новое DbPropertyExpression, представляющее извлечение свойства навигации.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> или <paramref name="instance" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, представляющее получение указанного конечного элемента отношения.</summary>
      <param name="instance">Экземпляр, из которого требуется извлечь конечный элемент отношения.</param>
      <param name="relationshipEnd">Метаданные для извлекаемого конечного элемента отношения.</param>
      <returns>Новое DbPropertyExpression, представляющее извлечение конечного члена отношения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> имеет значение null или <paramref name="instance" /> имеет значение null, а свойство не является статическим.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.Comm*******Trees.DbExpression,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbPropertyExpression" />, представляющее получение свойства экземпляра с заданным именем из указанного экземпляра.</summary>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство.</param>
      <param name="propertyName">Имя свойства, которое необходимо извлечь.</param>
      <returns>Новое DbPropertyExpression, представляющее извлечение свойства.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> имеет значение null или <paramref name="instance" /> имеет значение null, а свойство не является статическим.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В типе <paramref name="instance" /> не объявлено свойство с указанным именем.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность на основе значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyRow">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, создающий запись со столбцами, соответствующими (по числу типу и порядку) свойствам ключей типа сущности, на который существует ссылка.</param>
      <returns>Новое DbRefExpression, который ссылается на элемент с указанными значениями ключа в заданном наборе Entity.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> или <paramref name="keyRow" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyRow" /> не имеет типа результата записи, соответствующего ключевым свойствам типа сущности набора сущностей, на который указывает ссылка.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.EntityType)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbRefExpression" />, которое кодирует ссылку на определенную сущность на основе значений ключей.</summary>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyRow">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, создающий запись со столбцами, соответствующими (по числу типу и порядку) свойствам ключей типа сущности, на который существует ссылка.</param>
      <param name="entityType">Тип сущности, на который должна указывать ссылка.</param>
      <returns>Новое DbRefExpression, который ссылается на элемент с указанными значениями ключа в заданном наборе Entity.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />, <paramref name="keyRow" /> или <paramref name="entityType" /> равно "null".</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не в той же иерархии типов, как тип сущности набора сущностей или <paramref name="keyRow" /> не имеет записи типа результата, соответствующего ключевым свойствам типа сущности набора сущностей, на который ссылка.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbScanExpression" />, ссылающееся на заданную сущность или набор отношений.</summary>
      <param name="targetSet">Метаданные для сущности или набора отношений, на который должна указывать ссылка.</param>
      <returns>Новое DbScanExpression, основанный на указанном наборе сущностей или отношений.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="targetSet" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,``0})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, выбирающее заданное выражение на данном входном наборе.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="projection">Метод, определяющий процедуру получения проецируемого выражения из элемента входного набора. Этот метод должен создавать экземпляр типа, совместимого с операцией Select, и который можно разрешить в объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />. Требования к совместимости <c>TProjection</c> приведены в примечаниях.</param>
      <typeparam name="TProjection">Тип результата метода <paramref name="projection" />.</typeparam>
      <returns>Новое DbProjectExpression, представляющий операцию выбора.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="projection" /> равно null.
-или-
Результат операции <paramref name="projection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются. Затем создается выражение <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, выбирающее столбец <paramref name="apply" /> из каждой строки, формируя таким образом коллекцию результатов <paramref name="apply" />.</summary>
      <param name="source">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, представляющий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <returns>Новое DbProjectExpression, который выбирает столбец применения из нового DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> CrossApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="apply" /> равно null.
-или-
Выражение, созданное <paramref name="apply" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="apply" />, не может быть коллекцией.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,``0})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> один раз для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply. Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются. Затем создается выражение <see cref="T:System.Data.Common.Comm*******Trees.DbProjectExpression" />, выбирающее указанный <paramref name="selector" /> из каждой строки, формируя таким образом коллекцию результатов.</summary>
      <param name="source">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, представляющий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <param name="selector">Метод, задающий способ получения элемента результирующего набора из элемента входного набора и набора apply. Этот метод должен создавать экземпляр типа, совместимого с SelectMany, и который можно разрешить в объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />. Требования к совместимости <typeparamref name="TSelector" /> приведены в примечаниях.</param>
      <typeparam name="TSelector">Тип результата метода <paramref name="selector" />.</typeparam>
      <returns>Новое DbProjectExpression, который выбирает результат из данного селектора из нового DbApplyExpression с определенным входом и привязками применения и <see cref="T:System.Data.Common.Comm*******Trees.DbExpressionKind" /> CrossApply.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="apply" /> или <paramref name="selector" /> равно "null".
-или-
Выражение, созданное <paramref name="apply" />, имеет значение null.
-или-
Результат операции <paramref name="selector" /> при преобразовании в DbExpression имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или- 
Выражение, созданное <paramref name="apply" />, не может быть коллекцией. не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbSortClause},System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />, которое сортирует данный входной набор согласно заданным правилам сортировки, прежде чем будет пропущено указанное число элементов.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="sortOrder">Список правил сортировки, определяющих, как должны быть отсортированы элементы входного набора.</param>
      <param name="count">Выражение, указывающее, какое количество элементов упорядоченного набора следует пропустить.</param>
      <returns>Новое DbProjectExpression, представляющий операцию пропуска.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> или <paramref name="count" /> является null или <paramref name="sortOrder" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> пуст, или <paramref name="count" /> — не <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> или <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" /> либо имеет тип результата, неэквивалентный 64-разрядному целочисленному типу и неприводимый к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.Comm*******Trees.DbSortExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSkipExpression" />, пропускающее заданное число элементов данного отсортированного входного набора.</summary>
      <param name="argument">Объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, задающий сортированный входной набор.</param>
      <param name="count">Выражение, указывающее, какое количество элементов упорядоченного набора следует пропустить.</param>
      <returns>Новое DbProjectExpression, представляющий операцию пропуска.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> не является объектом <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> или <see cref="T:System.Data.Common.Comm*******Trees.DbParameterReferenceExpression" />, либо имеет тип результата, не равный 64-разрядному целочисленному типу, или не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.Comm*******Trees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.Comm*******Trees.DbSortClause})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанных правил сортировки.</summary>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="sortOrder">Список правил сортировки, определяющих, как должны быть отсортированы элементы входного набора.</param>
      <returns>Новое DbProjectExpression, представляющий операцию сортировки.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="sortOrder" /> является null или <paramref name="sortOrder" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="sortOrder" /> пуст.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbLimitExpression" />, ограничивающий число элементов в коллекции аргументов заданным пределом подсчета. Связанные результаты не включаются в выходные данные.</summary>
      <param name="argument">Выражение, определяющее входную коллекцию.</param>
      <param name="count">Выражение, задающее предельное значение.</param>
      <returns>Новое DbLimitExpression с указанными значениями аргументов и предела подсчета, которое не включает связанных результатов.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо результат <paramref name="count" /> не относится к типу, эквивалентному 64-разрядному целочисленному типу или приводимому к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.Comm*******Trees.DbSortExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки заданного входного набора, а также указанный ключ сортировки в порядке сортировки по возрастанию и с параметрами сортировки по умолчанию.</summary>
      <param name="source">Объект DbSortExpression, задающий упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="sortKey" /> равно null.
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Результат <paramref name="sortKey" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.Comm*******Trees.DbSortExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки заданного входного набора, а также указанный ключ сортировки в порядке сортировки по возрастанию и с указанными параметрами сортировки.</summary>
      <param name="source">Объект DbSortExpression, задающий упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> равно "null".
-или- 
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или-
Выражение, созданное <paramref name="sortKey" />, не имеет типа строкового результата с возможностью сравнивания порядка.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.Comm*******Trees.DbSortExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки заданного входного набора, а также указанный ключ сортировки в порядке сортировки по убыванию и с параметрами сортировки по умолчанию.</summary>
      <param name="source">Объект DbSortExpression, задающий упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="sortKey" /> равно null.
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или- 
Выражение, созданное <paramref name="sortKey" />, не имеет типа результата с возможностью сравнивания порядка.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.Comm*******Trees.DbSortExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки заданного входного набора, а также указанный ключ сортировки в порядке сортировки по возрастанию и с указанными параметрами сортировки.</summary>
      <param name="source">Объект DbSortExpression, задающий упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для элемента входного набора. Этот метод должен создавать выражение с типом результата сравнения по порядку, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> равно "null".
-или-
Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.
-или- 
Выражение, созданное <paramref name="sortKey" />, не имеет типа строкового результата с возможностью сравнивания порядка.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" /> с порядком сортировки по возрастанию и параметрами сортировки по умолчанию.</summary>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <returns>Новое предложение сортировки с данным ключом сортировки и порядком сортировки по возрастанию.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.Comm*******Trees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" /> с порядком сортировки по возрастанию и заданными параметрами сортировки.</summary>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое предложение сортировки с данным ключом и параметрами сортировки и порядком сортировки по возрастанию.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" /> с порядком сортировки по убыванию и параметрами сортировки по умолчанию.</summary>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <returns>Новое предложение сортировки с данным ключом сортировки и порядком сортировки по убыванию.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.Comm*******Trees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbSortClause" /> с порядком сортировки по убыванию и заданными параметрами сортировки.</summary>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <returns>Новое предложение сортировки с данным ключом и параметрами сортировки и порядком сортировки по убыванию.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Common.Comm*******Trees.DbTreatExpression" />.</summary>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="treatType">Метаданные типа для заданного типа.</param>
      <returns>Новое DbTreatExpression с указанным аргументом и типом.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> или <paramref name="treatType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="P:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>Получает объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> с логическим значением <see langword="true" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbConstantExpression" /> с логическим значением <see langword="true" />.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbArithmeticExpression" />, которое отрицает значение аргумента.</summary>
      <param name="argument">Выражение, задающее аргумент.</param>
      <returns>Новое DbArithmeticExpression, представляющий операцию взятия с обратным знаком.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="argument" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип числового результата для <paramref name="argument" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, вычисляющий объединение левого и правого аргументов набора, при этом повторяющиеся элементы удаляются.</summary>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <returns>Новое DbExpression, вычисляющее объединение левого и правого аргументов без повторяющихся элементов.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции с типом сравниваемых по равенству элементов между <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Common.Comm*******Trees.DbUnionAllExpression" />, вычисляющий объединение левого и правого аргументов набора, не удаляя повторяющиеся элементы.</summary>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <returns>Новое DbUnionAllExpression, которое включает объединение левого и правого аргументов с повторяющимися элементами.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции с типом сравниваемых по равенству элементов между <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbVariableReferenceExpression" />, ссылающееся на переменную с заданными именем и типом.</summary>
      <param name="type">Тип переменной, на которую указывает ссылка.</param>
      <param name="name">Имя упоминаемой переменной.</param>
      <returns>DbVariableReferenceExpression, представляющий ссылку на переменную с указанным именем и типом. Тип результата выражения будет совпадать с <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.Comm*******Trees.DbExpression,System.Func{System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Common.Comm*******Trees.DbFilterExpression" />, фильтрующее элементы заданного входного набора с использованием заданного предиката.</summary>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора.    Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <returns>Новое DbProjectExpression, представляющий операцию Any.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равно null.
-или- 
Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип результата выражения, созданного <paramref name="predicate" />, отличается от логического.</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions">
      <summary>Предоставляет API для создания объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, вызывающих канонические функции модели EDM, и разрешает доступ к API как к методам расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Abs с заданным аргументом, который должен иметь числовой тип результата. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает абсолютное значение value.</returns>
      <exception cref="T:System.ArgumentNullException">value</exception>
      <exception cref="T:System.ArgumentException">value</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddDays с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип. Тип результата выражения совпадает с типом результата dateValue.</summary>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число дней, прибавляемых к значению dateValue.</param>
      <returns>Новый объект DbFunctionExpression, прибавляющий число дней, указанное в addValue, к значению, указанному в dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue addValue</exception>
      <exception cref="T:System.ArgumentException">dateValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddHours с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число часов, прибавляемых к значению timeValue.</param>
      <returns>Новый объект DbFunctionExpression, прибавляющий число часов, указанное в addValue, к значению, указанному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddMicroseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число микросекунд, прибавляемых к значению timeValue.</param>
      <returns>Новое выражение DbFunctionExpression, которое прибавляет число микросекунд, указанных в addValue, к значению, заданному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddMilliseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число миллисекунд, прибавляемых к значению timeValue.</param>
      <returns>Новое выражение DbFunctionExpression, которое прибавляет число миллисекунд, определенных в addValue, к значению, заданному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddMinutes с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число минут, прибавляемых к значению timeValue.</param>
      <returns>Новое выражение DbFunctionExpression, которое прибавляет число минут, определенных в addValue, к значению, заданному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddMonths с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип. Тип результата выражения совпадает с типом результата dateValue.</summary>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число месяцев, прибавляемых к значению dateValue.</param>
      <returns>Новый объект DbFunctionExpression, прибавляющий число месяцев, указанное в addValue, к значению, указанному в dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue addValue</exception>
      <exception cref="T:System.ArgumentException">dateValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddNanoseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число наносекунд, прибавляемых к значению timeValue.</param>
      <returns>Новое выражение DbFunctionExpression, которое прибавляет число наносекунд, определенных в addValue, к значению, заданному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddSeconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип. Тип результата выражения совпадает с типом результата timeValue.</summary>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число секунд, прибавляемых к значению timeValue.</param>
      <returns>Новое выражение DbFunctionExpression, которое прибавляет число секунд, указанное в addValue, к значению, указанному в timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue addValue</exception>
      <exception cref="T:System.ArgumentException">timeValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AddYears с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип. Тип результата выражения совпадает с типом результата dateValue.</summary>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение addValue.</param>
      <param name="addValue">Выражение, задающее число лет, прибавляемых к значению dateValue.</param>
      <returns>Новый объект DbFunctionExpression, прибавляющий число лет, заданное в addValue, к значению, заданному в dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue addValue</exception>
      <exception cref="T:System.ArgumentException">dateValue addValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Avg" для указанной коллекции. Тип результата выражения совпадает с типом элемента коллекции.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено среднее значение.</param>
      <returns>Новое выражение DbFunctionExpression, создающее среднее значение.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Bitwise*******(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Bitwise******* с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата. Тип результата выражения совпадает с типом аргументов.</summary>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, сформированное путем выполнения побитовой операции И для значений value1 и value2.</returns>
      <exception cref="T:System.ArgumentNullException">value1 value2</exception>
      <exception cref="T:System.ArgumentException">value1 value2</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseNot с заданным аргументом, который должен иметь целочисленный тип результата. Тип результата выражения совпадает с типом аргументов.</summary>
      <param name="value">Выражение, задающее первый операнд.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, сформированное путем выполнения побитовой операции НЕ для значения value.</returns>
      <exception cref="T:System.ArgumentNullException">value</exception>
      <exception cref="T:System.ArgumentException">value</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseOr с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата. Тип результата выражения совпадает с типом аргументов.</summary>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, сформированное путем выполнения побитовой операции ИЛИ для значений value1 и value2.</returns>
      <exception cref="T:System.ArgumentNullException">value1 value2</exception>
      <exception cref="T:System.ArgumentException">value1 value2</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseXor с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата. Тип результата выражения совпадает с типом аргументов.</summary>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, сформированное путем выполнения побитовой операции исключающего ИЛИ для значений value1 и value2.</returns>
      <exception cref="T:System.ArgumentNullException">value1 value2</exception>
      <exception cref="T:System.ArgumentException">value1 value2</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Ceiling с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает самое маленькое целочисленное значение, не меньшее чем value.</returns>
      <exception cref="T:System.ArgumentNullException">value</exception>
      <exception cref="T:System.ArgumentException">value</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Concat с заданными аргументами, которые должны иметь строковый тип результата. Типом результата выражения является строка.</summary>
      <param name="string1">Выражение, задающее строку, которая должна оказаться первой в сцепленной результирующей строке.</param>
      <param name="string2">Выражение, задающее строку, которая должна оказаться второй в сцепленной результирующей строке.</param>
      <returns>Новый объект DbFunctionExpression, создающий объединенную строку.</returns>
      <exception cref="T:System.ArgumentNullException">string1 string2</exception>
      <exception cref="T:System.ArgumentException">string1 string2</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Contains" с заданными аргументами, которые должны иметь строковый тип результата. Тип результата выражения — логический.</summary>
      <param name="searchedString">Выражение, задающее строку, в которой следует искать вхождение searchedForString.</param>
      <param name="searchedForString">Выражение, задающее строку, которую следует искать в строке searchedString.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, входит ли searchedForString в строку searchedString.</returns>
      <exception cref="T:System.ArgumentNullException">searchedString searchedForString</exception>
      <exception cref="T:System.ArgumentException">searchedString searchedForString</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Count" для указанной коллекции. Типом результата выражения является Edm.Int32.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение счетчика.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение счетчика.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию CreateDateTime с указанными аргументами. Аргумент second должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32. Тип результата выражения — Edm.DateTime.</summary>
      <param name="year">Выражение, предоставляющее значение года для нового экземпляра DateTime.</param>
      <param name="month">Выражение, предоставляющее значение месяца для нового экземпляра DateTime.</param>
      <param name="day">Выражение, предоставляющее значение дня для нового экземпляра DateTime.</param>
      <param name="hour">Выражение, предоставляющее значение часа для нового экземпляра DateTime.</param>
      <param name="minute">Выражение, предоставляющее значение минуты для нового экземпляра DateTime.</param>
      <param name="second">Выражение, предоставляющее значение секунды для нового экземпляра DateTime.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое DateTime на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">year month day hour minute second</exception>
      <exception cref="T:System.ArgumentException">year month day hour minute second</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию CreateDateTimeOffset с указанными аргументами. Аргумент second должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32. Тип результата выражения — Edm.DateTimeOffset.</summary>
      <param name="year">Выражение, предоставляющее значение года для нового экземпляра DateTimeOffset.</param>
      <param name="month">Выражение, предоставляющее значение месяца для нового экземпляра DateTimeOffset.</param>
      <param name="day">Выражение, предоставляющее значение дня для нового экземпляра DateTimeOffset.</param>
      <param name="hour">Выражение, предоставляющее значение часа для нового экземпляра DateTimeOffset.</param>
      <param name="minute">Выражение, предоставляющее значение минуты для нового экземпляра DateTimeOffset.</param>
      <param name="second">Выражение, предоставляющее значение секунды для нового экземпляра DateTimeOffset.</param>
      <param name="timeZoneOffset">Выражение, предоставляющее число минут смещения часового пояса для нового экземпляра DateTimeOffset.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое DateTimeOffset на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">year month day hour minute second timeZoneOffset</exception>
      <exception cref="T:System.ArgumentException">year month day hour minute second timeZoneOffset</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию CreateTime с указанными аргументами. Аргумент second должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32. Тип результата выражения — Edm.Time.</summary>
      <param name="hour">Выражение, предоставляющее значение часа для нового экземпляра DateTime.</param>
      <param name="minute">Выражение, предоставляющее значение минуты для нового экземпляра DateTime.</param>
      <param name="second">Выражение, предоставляющее значение секунды для нового экземпляра DateTime.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое Time на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">hour minute second</exception>
      <exception cref="T:System.ArgumentException">hour minute second</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "CurrentDateTime".</summary>
      <returns>Новое DbFunctionExpression, которое возвращает текущую дату и время, как экземпляр Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "CurrentDateTimeOffset".</summary>
      <returns>Новое DbFunctionExpression, которое возвращает текущую дату и время, как экземпляр Edm.DateTimeOffset.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "CurrentUtcDateTime".</summary>
      <returns>Новое DbFunctionExpression, которое возвращает текущую дату и время в формате UTC, как экземпляр Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Day с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь день.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение дня из dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DayOfYear с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь день года.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение дня года из dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffDays с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue1">Выражение, задающее аргумент первого значения даты.</param>
      <param name="dateValue2">Выражение, задающее аргумент второго значения даты.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество дней, составляющее разницу между dateValue1 и dateValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffHours с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество часов, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMicroseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество микросекунд, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMilliseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество миллисекунд, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMinutes с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество минут, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMonths с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue1">Выражение, задающее аргумент первого значения даты.</param>
      <param name="dateValue2">Выражение, задающее аргумент второго значения даты.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество месяцев, составляющее разницу между dateValue1 и dateValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffNanoseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество наносекунд, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffSeconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue1">Выражение, задающее аргумент первого значения времени.</param>
      <param name="timeValue2">Выражение, задающее аргумент второго значения времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество секунд, составляющее разницу между timeValue1 и timeValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию DiffYears с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue1">Выражение, задающее аргумент первого значения даты.</param>
      <param name="dateValue2">Выражение, задающее аргумент второго значения даты.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает количество лет, составляющее разницу между dateValue1 и dateValue2.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "EndsWith" с заданными аргументами, которые должны иметь строковый тип результата. Тип результата выражения — логический.</summary>
      <param name="stringArgument">Выражение, задающее строку, в конце которой выполняется поиск строки suffix.</param>
      <param name="suffix">Выражение, задающее целевую строку, поиск которой выполняется в конце stringArgument.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, заканчивается ли stringArgument строкой suffix.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Floor" с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает самое большое целое значение, не большее чем value.</returns>
      <exception cref="T:System.ArgumentNullException">value</exception>
      <exception cref="T:System.ArgumentException">value</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "GetTotalOffsetMinutes" с заданным аргументом, который должен иметь тип результата DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateTimeOffsetArgument">Выражение, задающее значение DateTimeOffset, из которого требуется извлечь смещение в минутах относительно времени по Гринвичу (GMT).</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает число минут смещения dateTimeOffsetArgument относительно GMT.</returns>
      <exception cref="T:System.ArgumentNullException">dateTimeOffsetArgument</exception>
      <exception cref="T:System.ArgumentException">dateTimeOffsetArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Hour с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь час.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение часа из timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "IndexOf" с заданными аргументами, которые должны иметь строковый тип результата. Типом результата выражения является Edm.Int32.</summary>
      <param name="searchString">Выражение, задающее строку, которую следует искать в строке stringToFind.</param>
      <param name="stringToFind">Выражение, задающее строку, которую требуется найти в строке searchString, необходимо проверить.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает первый индекс stringToFind в searchString.</returns>
      <exception cref="T:System.ArgumentNullException">searchString stringToFind</exception>
      <exception cref="T:System.ArgumentException">searchString stringToFind</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Left" с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов. Типом результата выражения является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь крайнюю левую подстроку.</param>
      <param name="length">Выражение, задающее длину крайней левой подстроки, которую требуется извлечь из stringArgument.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает крайнюю левую подстроку длиной length из stringArgument.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument length</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Length с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения является Edm.Int32.</summary>
      <param name="stringArgument">Выражение, задающее строку, для которой должно быть вычислено значение длины.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает длину stringArgument.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "BigCount" для указанной коллекции. Тип результата выражения — Edm.Int64.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение счетчика.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение счетчика.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Max" для указанной коллекции. Тип результата выражения совпадает с типом элемента коллекции.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть извлечено максимальное значение.</param>
      <returns>Новое выражение DbFunctionExpression, создающее максимальное значение.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Millisecond с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь миллисекунду.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение миллисекунды из timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Min" для указанной коллекции. Тип результата выражения совпадает с типом элемента коллекции.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть извлечено минимальное значение.</param>
      <returns>Новое выражение DbFunctionExpression, создающее минимальное значение.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Minute с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь минуту.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение минуты из timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Month" с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь месяц.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение месяца из dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "NewGuid".</summary>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение GUID.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Power" с заданными аргументами, которые должны иметь числовые типы результатов. Тип результата выражения совпадает с типом результата baseArgument.</summary>
      <param name="baseArgument">Выражение, задающее числовое значение, которое требуется возвести в заданную степень.</param>
      <param name="exponent">Выражение, задающее степень, в которую требуется возвести значение baseArgument.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение baseArgument, возведенное в степень exponent.</returns>
      <exception cref="T:System.ArgumentNullException">baseArgument exponent</exception>
      <exception cref="T:System.ArgumentException">baseArgument exponent</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Replace" с заданными аргументами, которые должны иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, в которой требуется выполнить операцию замены.</param>
      <param name="toReplace">Выражение, задающее строку, которую требуется заменить.</param>
      <param name="replacement">Выражение, задающее заменяющую строку.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новую строку на основе stringArgument, где каждое вхождение toReplace заменяется на replacement.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument toReplace replacement</exception>
      <exception cref="T:System.ArgumentException">stringArgument toReplace replacement</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Reverse" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, определяющее строку, порядок элементов которой нужно изменить на обратный.</param>
      <returns>Новое выражение DbFunctionExpression, создающее обратное значение stringArgument.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Right" с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов. Типом результата выражения является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь крайнюю правую подстроку.</param>
      <param name="length">Выражение, задающее длину крайней правой подстроки, которую требуется извлечь из stringArgument.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает крайнюю правую подстроку длиной length из stringArgument.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument length</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Round" с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение, которое требуется округлить.</param>
      <returns>Новое DbFunctionExpression, которое округляет указанный аргумент до ближайшего целого числа.</returns>
      <exception cref="T:System.ArgumentNullException">value</exception>
      <exception cref="T:System.ArgumentException">value</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Round" с заданными аргументами, которые должны иметь одинарный, двойной или десятичный типы результатов. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение, которое требуется округлить.</param>
      <param name="digits">Выражение, задающее количество разрядов точности для округления.</param>
      <returns>Новое выражение DbFunctionExpression, которое округляет заданный аргумент до ближайшего целого числа с точностью, указанной в digits.</returns>
      <exception cref="T:System.ArgumentNullException">value digits</exception>
      <exception cref="T:System.ArgumentException">value digits</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Second с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time. Типом результата выражения является Edm.Int32.</summary>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь секунду.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение секунды из timeValue.</returns>
      <exception cref="T:System.ArgumentNullException">timeValue</exception>
      <exception cref="T:System.ArgumentException">timeValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "StartsWith" с заданными аргументами, которые должны иметь строковый тип результата. Тип результата выражения — логический.</summary>
      <param name="stringArgument">Выражение, задающее строку, в начале которой выполняется поиск строки prefix.</param>
      <param name="prefix">Выражение, задающее целевую строку, поиск которой выполняется в начале stringArgument.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, начинается ли stringArgument со строки prefix.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "StDev" над не равными NULL членами указанной коллекции. Тип результата выражения — Edm.Double.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение среднеквадратичного отклонения.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение среднеквадратичного отклонения для членов коллекции, отличных от NULL.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "StDevP" над популяцией указанной коллекции. Тип результата выражения — Edm.Double.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение среднеквадратичного отклонения.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение среднеквадратичного отклонения.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Substring" с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов. Типом результата выражения является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь подстроку.</param>
      <param name="start">Выражение, задающее индекс начала подстроки.</param>
      <param name="length">Выражение, задающее длину подстроки.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает подстроку длиной length из stringArgument начиная с позиции start.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument start length</exception>
      <exception cref="T:System.ArgumentException">stringArgument start length</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Sum" для указанной коллекции. Тип результата выражения совпадает с типом элемента коллекции.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение суммы.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение суммы.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "ToLower" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, которая должна быть преобразована в нижний регистр.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение stringArgument, преобразованное в нижний регистр.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "ToUpper" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, которая должна быть преобразована в верхний регистр.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение stringArgument, преобразованное в верхний регистр.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Trim" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой должны быть удалены начальный и конечный пробелы.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение stringArgument с удаленными начальным и конечным пробелами.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "RTrim" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой должен быть удален конечный пробел.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение stringArgument с удаленным конечным пробелом.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "LTrim" с заданным аргументом, который должен иметь строковый тип результата. Типом результата выражения также является строка.</summary>
      <param name="stringArgument">Выражение, задающее строку, из которой должен быть удален начальный пробел.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение stringArgument с удаленным начальным пробелом.</returns>
      <exception cref="T:System.ArgumentNullException">stringArgument</exception>
      <exception cref="T:System.ArgumentException">stringArgument</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Truncate" с заданными аргументами, которые должны иметь одинарный, двойной или десятичный типы результатов. Тип результата выражения совпадает с типом результата value.</summary>
      <param name="value">Выражение, задающее числовое значение, которое требуется усечь.</param>
      <param name="digits">Выражение, задающее для усечения количество разрядов точности.</param>
      <returns>Новое выражение DbFunctionExpression, которое усекает заданный аргумент до ближайшего целого числа с точностью, указанной в digits.</returns>
      <exception cref="T:System.ArgumentNullException">value digits</exception>
      <exception cref="T:System.ArgumentException">value digits</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "TruncateTime" с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset. Тип результата выражения совпадает с типом результата dateValue.</summary>
      <param name="dateValue">Выражение, задающее значение, для которого должен быть усечен промежуток времени.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение dateValue со временем, равным нулю.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Var" над не равными NULL членами указанной коллекции. Тип результата выражения — Edm.Double.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение статистической дисперсии.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение статистической дисперсии для членов коллекции, отличных от NULL.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "VarP" над популяцией указанной коллекции. Тип результата выражения — Edm.Double.</summary>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение статистической дисперсии.</param>
      <returns>Новое выражение DbFunctionExpression, создающее значение статистической дисперсии.</returns>
      <exception cref="T:System.ArgumentNullException">коллекция</exception>
      <exception cref="T:System.ArgumentException">коллекция</exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию "Year" с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset. Типом результата выражения является Edm.Int32.</summary>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь год.</param>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение года из dateValue.</returns>
      <exception cref="T:System.ArgumentNullException">dateValue</exception>
      <exception cref="T:System.ArgumentException">dateValue</exception>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.ExpressionBuilder.Row">
      <summary>Предоставляет средства наподобие конструктора для вызова <see cref="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}})" />.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.Comm*******Trees.DbExpression}[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.Comm*******Trees.ExpressionBuilder.Row" /> указанным значением первого столбца и (необязательно) значениями последующих столбцов.</summary>
      <param name="columnValue">Пара "ключ-значение", задающая первый столбец в новом экземпляре строки. (обязательно)</param>
      <param name="columnValues">Пары "ключ-значение", задающие последующие столбцы в новом экземпляре строки. (необязательно)</param>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Row.op_Implicit(System.Data.Common.Comm*******Trees.ExpressionBuilder.Row)~System.Data.Common.Comm*******Trees.DbExpression">
      <summary>Преобразует указанный ряд в <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />.</summary>
      <param name="row">Преобразуемая строка.</param>
      <returns>Объект <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, представляющий преобразованный ряд.</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Row.ToExpression">
      <summary>Создает новый <see cref="T:System.Data.Common.Comm*******Trees.DbNewInstanceExpression" />, который создает новую строку, основанную на столбцах, содержащихся в этом экземпляре Row.</summary>
      <returns>Новое DbNewInstanceExpression, создающее строку с теми же именами столбцов и значениями DbExpression, как этот экземпляр Row.</returns>
    </member>
    <member name="T:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>Предоставляет API для создания объектов <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, вызывающих пространственные канонические функции модели EDM, и, где уместно, разрешает доступ к API как к методам расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Area с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной поверхности, для которого должна быть вычислена площадь.</param>
      <returns>Новое DbFunctionExpression, возвращающее площадь <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является поверхностью.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AsBinary с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Binary.</summary>
      <param name="spatialValue">Выражение, задающее пространственно значение, из которого требуется получить представление в языке WKB (известное бинарное значение).</param>
      <returns>Новое DbFunctionExpression, которое возвращает представление WKB (известное бинарное значение) <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AsGml с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.String.</summary>
      <param name="spatialValue">Выражение, задающее пространственное значение, из которого требуется получить представление в языке географической разметки (GML).</param>
      <returns>Новое DbFunctionExpression, которое возвращает представление языка разметки географии (GML) <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию AsText с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.String.</summary>
      <param name="spatialValue">Выражение, задающее пространственно значение, из которого требуется получить представление в языке WKT (известное текстовое значение).</param>
      <returns>Новое DbFunctionExpression, которое возвращает представление WKT (известное текстовое значение) <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Centroid с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрической поверхности, от которого требуется получить значение центра.</param>
      <returns>Новое DbFunctionExpression, возвращающее точку центроида <paramref name="geometryValue" /> (она может не быть на самой поверхности) или <see langword="null" /> если <paramref name="geometryValue" /> не поверхность.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'CoordinateSystemId' с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Типом результата выражения является Edm.Int32.</summary>
      <param name="spatialValue">Выражение, задающее значение, от которого требуется получить идентификатор системы координат (SRID).</param>
      <returns>Новое DbFunctionExpression, которое возвращает целое значение SRID из <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Distance с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.  Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения — Edm.Double.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, на основании которого требуется измерить расстояние от значения <paramref name="spatialValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает расстояние между ближайшими точками в <paramref name="spatialValue1" /> и <paramref name="spatialValue1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Elevation с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной точки, из которого требуется извлечь значение высоты (координаты по оси z).</param>
      <returns>Новое DbFunctionExpression, который возвращает значение высоты <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию EndPoint с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата такой же, как для <paramref name="spatialValue" />.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной кривой, от которого требуется получить значение конечной точки.</param>
      <returns>Новое DbFunctionExpression, возвращающее конечную точку <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является кривой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию ExteriorRing с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Новое DbFunctionExpression, возвращающее или внешнее кольцо многоугольника <paramref name="geometryValue" /> или <see langword="null" /> если <paramref name="geometryValue" /> не многоугольник.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyCollectionFromBinary с указанными аргументами.  Объект <paramref name="geographyCollectionWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="geographyCollectionWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географической коллекции.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географической коллекции.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географической коллекции на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyCollectionFromText с указанными аргументами.  Объект <paramref name="geographyCollectionWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="geographyCollectionWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географической коллекции.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географической коллекции.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географической коллекции на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromBinary с заданным аргументом, который должен иметь двоичный тип результата. Тип результата выражения — Edm.Geography.</summary>
      <param name="wellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии на основе указанного двоичного значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromBinary с указанными аргументами.  Объект <paramref name="wellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="wellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromGml с заданным аргументом, который должен иметь строковый тип результата. Тип результата выражения — Edm.Geography.</summary>
      <param name="geographyMarkup">Выражение, которое предоставляет представление в языке географической разметки GML географического значения.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии, основанное на указанном значении с идентификатором системы координат (SRID) по умолчанию базового поставщика.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromGml с указанными аргументами.  Объект <paramref name="geographyMarkup" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="geographyMarkup">Выражение, которое предоставляет представление в языке географической разметки GML географического значения.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromText с заданным аргументом, который должен иметь строковый тип результата. Тип результата выражения — Edm.Geography. Его значение содержит идентификатор системы координат по умолчанию (SRID) базового поставщика.</summary>
      <param name="wellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии на основе указанного значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyFromText с указанными аргументами.  Объект <paramref name="wellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="wellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyLineFromBinary с указанными аргументами.  Объект <paramref name="lineWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="lineWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географической линии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географической линии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географической линии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyLineFromText с указанными аргументами.  Объект <paramref name="lineWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="lineWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географической линии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географической линии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географической линии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'GeographyMultiLineFromBinary' с указанными аргументами.  Объект <paramref name="multiLineWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiLineWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географических нескольких линий.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких линий.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких линий на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'GeographyMultiLineFromText' с указанными аргументами.  Объект <paramref name="multiLineWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiLineWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географических нескольких линий.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких линий.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких линий на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyMultiPointFromBinary с указанными аргументами.  Объект <paramref name="multiPointWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiPointWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географических нескольких точек.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких точек.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких точек на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyMultiPointFromText с указанными аргументами.  Объект <paramref name="multiPointWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiPointWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географических нескольких точек.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких точек.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких точек на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyMultiPolygonFromBinary с указанными аргументами.  Объект <paramref name="multiPolygonWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiPolygonWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географических нескольких многоугольников.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких многоугольников.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких многоугольников на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyMultiPolygonFromText с указанными аргументами.  Объект <paramref name="multiPolygonWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="multiPolygonWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географических нескольких многоугольников.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географических нескольких многоугольников.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географических нескольких многоугольников на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyPointFromBinary с указанными аргументами.  Объект <paramref name="pointWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="pointWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географической точки.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) systempointWellKnownBinaryValue координат значения географической точки.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyPointFromText с указанными аргументами.</summary>
      <param name="pointWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географической точки.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) systempointWellKnownTextValue координат значения географической точки.</param>
      <returns>Каноническая функция "GeographyPointFromText".</returns>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyPolygonFromBinary с указанными аргументами.  Объект <paramref name="polygonWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="polygonWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения географического многоугольника.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географического многоугольника.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географического многоугольника на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeographyPolygonFromText с указанными аргументами.  Объект <paramref name="polygonWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geography.</summary>
      <param name="polygonWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения географического многоугольника.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения географического многоугольника.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение географического многоугольника на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryCollectionFromBinary с указанными аргументами.  Объект <paramref name="geometryCollectionWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryCollectionWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрической коллекции.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической коллекции.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической коллекции на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryCollectionWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryCollectionFromText с указанными аргументами.  Объект <paramref name="geometryCollectionWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryCollectionWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрической коллекции.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической коллекции.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической коллекции на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryCollectionWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromBinary с заданным аргументом, который должен иметь двоичный тип результата. Тип результата выражения — Edm.Geometry.</summary>
      <param name="wellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанного двоичного значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromBinary с указанными аргументами.  Объект <paramref name="wellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="wellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromGml с заданным аргументом, который должен иметь строковый тип результата. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryMarkup">Выражение, которое предоставляет представление в языке географической разметки GML геометрического значения.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрии, основанное на указанном значении с идентификатором системы координат (SRID) по умолчанию базового поставщика.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromGml с указанными аргументами.  Объект <paramref name="geometryMarkup" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryMarkup">Выражение, которое предоставляет представление в языке географической разметки GML геометрического значения.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryMarkup" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromText с заданным аргументом, который должен иметь строковый тип результата. Тип результата выражения — Edm.Geometry. Его значение содержит идентификатор системы координат по умолчанию (SRID) базового поставщика.</summary>
      <param name="wellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанного значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryFromText с указанными аргументами.  Объект <paramref name="wellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="wellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="wellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryLineFromBinary с указанными аргументами.  Объект <paramref name="lineWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="lineWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрической линии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической линии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической линии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryLineFromText с указанными аргументами.  Объект <paramref name="lineWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="lineWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрической линии.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической линии.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической линии на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiLineFromBinary с указанными аргументами.  Объект <paramref name="multiLineWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiLineWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрических нескольких линий.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких линий.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких линий на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiLineFromText с указанными аргументами.  Объект <paramref name="multiLineWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiLineWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрических нескольких линий.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких линий.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких линий на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiLineWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiPointFromBinary с указанными аргументами.  Объект <paramref name="multiPointWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiPointWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрических нескольких точек.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких точек.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких точек на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiPointFromText с указанными аргументами.  Объект <paramref name="multiPointWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiPointWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрических нескольких точек.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких точек.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких точек на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiPolygonFromBinary с указанными аргументами.  Объект <paramref name="multiPolygonWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiPolygonWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрических нескольких многоугольников.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких многоугольников.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких многоугольников на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryMultiPolygonFromText с указанными аргументами.  Объект <paramref name="multiPolygonWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="multiPolygonWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрических нескольких многоугольников.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрических нескольких многоугольников.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрических нескольких многоугольников на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiPolygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryPointFromBinary с указанными аргументами.  Объект <paramref name="pointWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="pointWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрической точки.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической точки.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryPointFromText с указанными аргументами.  Объект <paramref name="pointWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="pointWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрической точки.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрической точки.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрической точки на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pointWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryPolygonFromBinary с указанными аргументами.  Объект <paramref name="polygonWellKnownBinaryValue" /> должен иметь результат двоичного типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="polygonWellKnownBinaryValue">Выражение, которое предоставляет представление в языке WKB (известное бинарное значение) значения геометрического многоугольника.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрического многоугольника.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрического многоугольника на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownBinaryValue" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию GeometryPolygonFromText с указанными аргументами.  Объект <paramref name="polygonWellKnownText" /> должен иметь результат строкового типа, а объект <paramref name="coordinateSystemId" /> — результат целочисленного типа. Тип результата выражения — Edm.Geometry.</summary>
      <param name="polygonWellKnownText">Выражение, которое предоставляет представление в языке WKT (известное текстовое значение) значения геометрического многоугольника.</param>
      <param name="coordinateSystemId">Выражение, которое содержит идентификатор системы координат (SRID) системы координат значения геометрического многоугольника.</param>
      <returns>Новое DbFunctionExpression, которое возвращает новое значение геометрического многоугольника на основе указанных значений.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="polygonWellKnownText" />
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию InteriorRingAt с указанными аргументами. Первый аргумент должен иметь тип результата Edm.Geometry. Второй аргумент должен иметь числовые целые типы результата. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <param name="indexValue">Выражение, задающее позицию внутреннего кольца, которое должен извлекаться из многоугольника.</param>
      <returns>Новое DbFunctionExpression, который возвращает внутреннее кольцо в положении <paramref name="indexValue" /> в <paramref name="geometryValue" /> или <see langword="null" />, если <paramref name="geometryValue" /> не является многоугольником.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indexValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию InteriorRingCount с заданным аргументом, который должен иметь тип результата Edm.Geometry. Типом результата выражения является Edm.Int32.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Новое DbFunctionExpression, возвращающее или количество внутренних колец многоугольника <paramref name="geometryValue" /> или <see langword="null" /> если <paramref name="geometryValue" /> не многоугольник.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию IsClosedSpatial с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Результат имеет тип Edm.Boolean.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной кривой, от которого требуется получить значение IsClosedSpatial.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="spatialValue" /> закрытым или <see langword="null" /> если <paramref name="spatialValue" /> не является кривой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию IsEmptySpatial с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="spatialValue">Выражение, задающее пространственное значение, от которого требуется получить значение IsEmptySptiaal.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="spatialValue" /> пустым.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию IsRing с заданным аргументом, который должен иметь тип результата Edm.Geometry. Результат имеет тип Edm.Boolean.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрической кривой, от которого требуется получить значение IsRing.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="geometryValue" /> кольцом (закрытым или простым) или <see langword="null" /> если <paramref name="geometryValue" /> не является кривой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию IsSimpleGeometry с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="geometryValue" /> простой геометрической фигурой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию IsValidGeometry с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрии, которое должно быть проверено на предмет пространственной допустимости.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="geometryValue" /> действительным.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Latitude с заданным аргументом, который должен иметь тип результата Edm.Geography. Тип результата выражения — Edm.Double.</summary>
      <param name="geographyValue">Выражение, задающее значение географической точки, от которого требуется получить значение широты.</param>
      <returns>Новое DbFunctionExpression, который возвращает значение широты <paramref name="geographyValue" /> или <see langword="null" />, если <paramref name="geographyValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Longitude с заданным аргументом, который должен иметь тип результата Edm.Geography. Тип результата выражения — Edm.Double.</summary>
      <param name="geographyValue">Выражение, задающее значение географической точки, от которого требуется получить значение долготы.</param>
      <returns>Новое DbFunctionExpression, который возвращает значение долготы <paramref name="geographyValue" /> или <see langword="null" />, если <paramref name="geographyValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию Measure с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной точки, из которого требуется извлечь значение координаты меры (M).</param>
      <returns>Новое DbFunctionExpression, возвращающее меру <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию PointAt с указанными аргументами. Первый аргумент должен иметь тип результата Edm.Geography или Edm.Geometry. Второй аргумент должен иметь числовой целый тип результата. Тип результата выражения совпадает с типом результата <paramref name="spatialValue" />.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной строки линии.</param>
      <param name="indexValue">Выражение, задающее позицию точки, которая должен извлекаться из строки линии.</param>
      <returns>Новое DbFunctionExpression, который возвращает точку в положении <paramref name="indexValue" /> в <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является строкой линии.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indexValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию PointCount с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Типом результата выражения является Edm.Int32.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной строки линии, из которого требуется извлечь количество точек.</param>
      <returns>Новое DbFunctionExpression, который возвращает количество точек в <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является строкой линии.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию PointOnSurface с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрической поверхности, от которого требуется получить значение точки.</param>
      <returns>Новое DbFunctionExpression, возвращающее или точку, точно находящуюся на поверхности <paramref name="geometryValue" /> или <see langword="null" /> если <paramref name="geometryValue" /> не поверхность.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialBoundary с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Выражение, задающее геометрическое значение, от которого требуется получить значение SpatialBoundary.</param>
      <returns>Новое DbFunctionExpression, которое возвращает границу для <paramref name="geometryValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'SpatialBuffer' с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry и Edm.Double. Тип результата выражения — Edm.Geometry.</summary>
      <param name="spatialValue">Выражение, задающее пространственное значение.</param>
      <param name="distance">Выражение, задающее буферное расстояние.</param>
      <returns>Новое DbFunctionExpression, которое возвращает геометрическое значение, представляющее все точки, меньшие или равные <paramref name="distance" /> от <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
        <paramref name="distance" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="distance" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialContains с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, содержит ли пространственно <paramref name="geometryValue1" /><paramref name="geometryValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialConvexHull с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Выражение, задающее геометрическое значение, от которого требуется получить значение выпуклой оболочки.</param>
      <returns>Новое DbFunctionExpression, которое возвращает выпуклую оболочку для <paramref name="geometryValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialCrosses с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, пересекаются ли <paramref name="geometryValue1" /> и <paramref name="geometryValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialDifference с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения совпадает с типом результата <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, для которого требуется вычислить отличие от <paramref name="spatialValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает значение геометрии, представляющее различие между <paramref name="spatialValue2" /> и <paramref name="spatialValue1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'SpatialDimension' с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Типом результата выражения является Edm.Int32.</summary>
      <param name="spatialValue">Выражение, задающее значение, от которого требуется получить значение Dimension.</param>
      <returns>Новое DbFunctionExpression, которое возвращает значение Dimension из <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialDisjoint с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения — Edm.Boolean.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, которое требуется сравнить с <paramref name="spatialValue1" /> на предмет непересекаемости.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, разнесены ли в пространстве <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialElementAt с указанными аргументами. Первый аргумент должен иметь тип результата Edm.Geography или Edm.Geometry. Второй аргумент должен иметь числовой целый тип результата. Тип результата выражения совпадает с типом результата <paramref name="spatialValue" />.</summary>
      <param name="spatialValue">Выражение, задающее значение географической или геометрической коллекции.</param>
      <param name="indexValue">Выражение, задающее позицию элемента, который должен извлекаться из географической или геометрической коллекции.</param>
      <returns>Новое DbFunctionExpression, который возвращает элемент коллекции в положении <paramref name="indexValue" /> в <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является коллекцией.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indexValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
        <paramref name="indexValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'SpatialElementCount' с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Типом результата выражения является Edm.Int32.</summary>
      <param name="spatialValue">Выражение, задающее значение коллекции географической или геометрической, из которой должно быть извлечено количество элементов.</param>
      <returns>Новое DbFunctionExpression, который возвращает количество элементов в <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является коллекцией.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialEnvelope с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Geometry.</summary>
      <param name="geometryValue">Выражение, задающее значение, от которого требуется получить значение Envelope.</param>
      <returns>Новое DbFunctionExpression, которое возвращает минимальный ограничивающий прямоугольник для <paramref name="geometryValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialEquals с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения — Edm.Boolean.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, которое требуется сравнить с <paramref name="spatialValue1" /> на предмет равенства.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, является ли <paramref name="spatialValue1" /> и <paramref name="spatialValue2" /> равными.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialIntersection с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения совпадает с типом результата <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, для которого требуется вычислить пересечение с <paramref name="spatialValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает пространственное значение, представляющее пересечение между <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialIntersects с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения — Edm.Boolean.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, которое требуется сравнить с <paramref name="spatialValue1" /> на предмет пересечения.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, пересекаются ли <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialLength с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной кривой, от которого требуется получить значение длины.</param>
      <returns>Новое DbFunctionExpression, возвращающее длину <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является кривой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialOverlaps с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, пересекается ли пространственно <paramref name="geometryValue1" /> и <paramref name="geometryValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialRelate с заданными аргументами, которые должны иметь тип результата Edm.Geometry и строковый тип результата. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <param name="intersectionPatternMatrix">Выражение, определяющее текстовое представление шаблона пересечения в расширенной 9-мерной модели размерностей (DE-9IM), используемого для сравнения <paramref name="geometryValue1" /> и <paramref name="geometryValue2" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, связано ли пространственно <paramref name="geometryValue1" /> с <paramref name="geometryValue2" /> в соответствии с пространственным отношением, назначенным с помощью параметра <paramref name="intersectionPatternMatrix" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
        <paramref name="intersectionPatternMatrix" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
        <paramref name="intersectionPatternMatrix" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialSymmetricDifference с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения совпадает с типом результата <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, для которого требуется вычислить симметричное отличие от <paramref name="spatialValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает значение геометрии, представляющее симметричное различие между <paramref name="spatialValue2" /> и <paramref name="spatialValue1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialTouches с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, касается ли <paramref name="geometryValue1" /><paramref name="geometryValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialTypeName с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата выражения — Edm.String.</summary>
      <param name="spatialValue">Выражение, задающее значение, от которого требуется получить имя геометрического типа.</param>
      <returns>Новое DbFunctionExpression, которое возвращает строковое имя Geometry Type из <paramref name="spatialValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialUnion с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата <paramref name="spatialValue1" /> должен совпадать с типом результата <paramref name="spatialValue2" />. Тип результата выражения совпадает с типом результата <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</summary>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, задающее пространственное значение, для которого требуется вычислить объединение с <paramref name="spatialValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает пространственное значение, представляющее объединение между <paramref name="spatialValue1" /> и <paramref name="spatialValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue1" />
        <paramref name="spatialValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Common.Comm*******Trees.DbExpression,System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию SpatialWithin с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Boolean.</summary>
      <param name="geometryValue1">Выражение, задающее первое значение геометрии.</param>
      <param name="geometryValue2">Выражение, задающее геометрическое значение, которое требуется сравнить со значением <paramref name="geometryValue1" />.</param>
      <returns>Новое DbFunctionExpression, которое возвращает логическое значение, указывающее, находится ли <paramref name="geometryValue1" /> пространственно внутри <paramref name="geometryValue2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue1" />
        <paramref name="geometryValue2" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию 'StartPoint' с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry. Тип результата такой же, как для <paramref name="spatialValue" />.</summary>
      <param name="spatialValue">Выражение, задающее значение пространственной кривой, от которого требуется получить значение начальной точки.</param>
      <returns>Новое DbFunctionExpression, возвращающее начальную точку <paramref name="spatialValue" /> или <see langword="null" />, если <paramref name="spatialValue" /> не является кривой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="spatialValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию XCoordinate с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрической точки, из которого требуется извлечь значение координаты по оси х.</param>
      <returns>Новое DbFunctionExpression, который возвращает значение координаты по оси x <paramref name="geometryValue" /> или <see langword="null" />, если <paramref name="geometryValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Common.Comm*******Trees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Common.Comm*******Trees.DbFunctionExpression" />, вызывающий каноническую функцию YCoordinate с заданным аргументом, который должен иметь тип результата Edm.Geometry. Тип результата выражения — Edm.Double.</summary>
      <param name="geometryValue">Выражение, задающее значение геометрической точки, из которого требуется извлечь значение координаты по оси y.</param>
      <returns>Новое DbFunctionExpression, который возвращает значение координаты по оси y <paramref name="geometryValue" /> или <see langword="null" />, если <paramref name="geometryValue" /> не является точкой.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>Предоставляет доступ к сведениям о структурном типе и о столбцах для <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.DbDataRecord" /> для конкретного типа с перечислимой коллекцией полей данных.</summary>
      <param name="metadata">Метаданные для типа, представленного этим объектом, заданные <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">Перечисляемая коллекция объектов <see cref="T:System.Data.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>Возвращает <see cref="T:System.Data.Common.FieldMetadata" /> для этого объекта <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>Получает сведения о типе для этого объекта в виде объекта <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbComm*******Definition">
      <summary>Определяет кэшируемый план команд.</summary>
    </member>
    <member name="M:System.Data.Common.DbComm*******Definition.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbComm*******Definition" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbComm*******Definition.#ctor(System.Data.Common.DbComm*******)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbComm*******Definition" />, использующий предоставленный объект <see cref="T:System.Data.Common.DbComm*******" />.</summary>
      <param name="prototype">Указанный объект <see cref="T:System.Data.Common.DbComm*******" />.</param>
    </member>
    <member name="M:System.Data.Common.DbComm*******Definition.CreateComm*******">
      <summary>Создает и возвращает выполняемый объект <see cref="T:System.Data.Common.DbComm*******" />.</summary>
      <returns>Команда для базы данных.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>Интерфейс метаданных для всех типов среды CLR</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Значение, которое должно быть передано GetInformation для получения ConceptualSchemaDefinitionVersion.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>Значение, которое должно быть передано GetInformation для получения ConceptualSchemaDefinitionVersion3.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Разработчики поставщиков должны переопределять этот метод для возвращения аргумента со знаками подстановки и преобразованным escape-символом. Этот метод используется только в том случае, если метод SupportsEscapingLikeArgument возвращает значение true.</summary>
      <param name="argument">Аргумент, подвергаемый escape-преобразованию.</param>
      <returns>Аргумент с подстановочными знаками и преобразованным escape-символом.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>При переопределении в производном классе этот метод возвращает сведения, касающиеся конкретного поставщика.</summary>
      <param name="informationType">Тип возвращаемых сведений.</param>
      <returns>Объект XmlReader, представляющий сопоставление с базовым каталогом хранилища данных.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип хранилища и набор аспектов этого типа с типом модели EDM.</summary>
      <param name="storeType">Экземпляр TypeUsage, описывающий тип хранилища и набор аспектов этого типа, которые должны быть сопоставлены с типом модели EDM.</param>
      <returns>Экземпляр <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий тип EDM и набор аспектов этого типа.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Возвращает объекты FacetDescription для определенного типа.</summary>
      <param name="edmType">Тип модели EDM, для которого требуется получить описание аспектов.</param>
      <returns>Объекты FacetDescription для заданного типа EDM.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Получает сведения, касающиеся конкретного поставщика.</summary>
      <param name="informationType">Тип возвращаемых сведений.</param>
      <returns>Сведения, касающиеся конкретного поставщика.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>При переопределении в производном классе возвращает коллекцию функций EDM, поддерживаемых манифестом поставщика.</summary>
      <returns>Коллекция функций EDM.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип модели EDM и набор аспектов этого типа с типом хранилища.</summary>
      <param name="edmType">Экземпляр TypeUsage, описывающий тип EDM и набор аспектов этого типа, которые должны быть сопоставлены с типом хранилища.</param>
      <returns>Экземпляр TypeUsage, описывающий тип хранилища и набор аспектов этого типа.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>При переопределении в производном классе возвращает набор типов-примитивов, поддерживаемых источником данных.</summary>
      <returns>Набор типов, поддерживаемых источником данных.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>Получает пространство имен, используемое манифестом этого поставщика.</summary>
      <returns>Пространство имен, используемое манифестом этого поставщика.</returns>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Значение, которое должно быть передано GetInformation для получения StoreSchemaDefinitionVersion.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>Значение, которое должно быть передано GetInformation для получения StoreSchemaDefinitionVersion3.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Значение, которое должно быть передано методу GetInformation для получения StoreSchemaMappingVersion.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>Значение, которое должно быть передано методу GetInformation для получения StoreSchemaMappingVersion3.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Указывает, поддерживает ли поставщик escape-преобразование строк, используемых как шаблоны в выражении LIKE.</summary>
      <param name="escapeCharacter">Если поставщик поддерживает escape-преобразование, данный символ используется как escape-символ.</param>
      <returns>Значение <see langword="true" />, если данный поставщик поддерживает escape-преобразование строк, используемых в качестве шаблонов в выражении Like; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>Фабрика для построения определения команд; используйте тип этого объекта в качестве аргумента для метода IServiceProvider.GetService на фабрике поставщика;</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateComm*******Definition(System.Data.Common.Comm*******Trees.DbComm*******Tree)">
      <summary>Создает определение команды из дерева команд.</summary>
      <param name="comm*******Tree">Дерево команд.</param>
      <returns>Созданное определение команды.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateComm*******Definition(System.Data.Common.DbComm*******)">
      <summary>Создает определение команд, использующее указанную команду.</summary>
      <param name="prototype">Команда, используемая для создания определения команды.</param>
      <returns>Созданное определение команды, использующее указанную команду.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateComm*******Definition(System.Data.Common.DbProviderManifest,System.Data.Common.Comm*******Trees.DbComm*******Tree)">
      <summary>Создает определение команд из указанного манифеста и дерева команд.</summary>
      <param name="providerManifest">Манифест.</param>
      <param name="comm*******Tree">Дерево команд.</param>
      <returns>Созданное определение команды.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, указанную соединением, и создает объекты схемы.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром storeItemCollection.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает скрипт на языке описания данных (DDL), который создает объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура этой базы данных.</param>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbComm*******Definition(System.Data.Common.DbProviderManifest,System.Data.Common.Comm*******Trees.DbComm*******Tree)">
      <summary>Создает объект определения команд для указанного манифеста поставщика и дерева команд.</summary>
      <param name="providerManifest">Манифест поставщика, ранее извлеченный из поставщика хранилищ.</param>
      <param name="comm*******Tree">Дерево команд для инструкции.</param>
      <returns>Объект определения исполняемой команды.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли заданная база данных на сервере и были ли созданы объекты схемы, содержащиеся в коллекции storeItemCollection.</summary>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, содержащихся в базе данных, существование которой определяется этим методом.</param>
      <returns>Значение true, если поставщик может вывести базу данных только на основе соединения.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, определенную подключением, и объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого объекта StoreItemCollection.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром storeItemCollection.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает скрипт на языке описания данных (DDL), который создает объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура этой базы данных.</param>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли заданная база данных на сервере и были ли созданы объекты схемы, содержащиеся в коллекции storeItemCollection.</summary>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, существование которой определяется этим методом.</param>
      <returns>Значение <see langword="true" />, если база данных, обозначаемая подключением и параметром storeItemCollection, существует; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Удаляет все объекты хранилища, заданные в коллекции элементов хранилища, из базы данных и саму базу данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, которую необходимо удалить.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>Получает пространственные службы для <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Пространственные службы.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Удаляет все объекты хранилища, заданные в коллекции элементов хранилища, из базы данных и саму базу данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="comm*******Timeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, которую необходимо удалить.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>При переопределении в производном классе возвращает экземпляр класса, унаследованного от DbProviderManifest.</summary>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Объект DbProviderManifest, представляющий манифест поставщика.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста поставщика с подключением.</summary>
      <param name="connection">Подключение к поставщику.</param>
      <returns>Токен манифеста поставщика для указанного подключения.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Получает средство чтения пространственных данных для <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
      <param name="fromReader">Средство чтения, из которого поступили пространственные данные.</param>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Средство чтения пространственных данных.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Извлекает объект DbProviderFactory на основе указанного объекта DbConnection.</summary>
      <param name="connection">Подключение для использования.</param>
      <returns>Извлеченный объект DbProviderFactory.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Возвращает манифест поставщика с помощью заданных сведений о версии.</summary>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Манифест поставщика с помощью указанных сведений о версии.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста поставщика.</summary>
      <param name="connection">Подключение к поставщику.</param>
      <returns>Токен манифеста поставщика.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Возвращает поставщиков с подключением.</summary>
      <param name="connection">Подключение к поставщику.</param>
      <returns>
        <see cref="T:System.Data.Common.DbProviderServices" />, основанный на указанном подключении.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Получает средство чтения пространственных данных для <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
      <param name="fromReader">Средство чтения, из которого поступили пространственные данные.</param>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Средство чтения пространственных данных.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>Получает пространственные службы для <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
      <returns>Пространственные службы.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Задает значения параметра для <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
      <param name="parameter">Параметр.</param>
      <param name="parameterType">Тип параметра.</param>
      <param name="value">Значение параметра.</param>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>Представляет базовый класс, реализующий <see cref="T:System.Data.Common.DbProviderManifest" /> на основе определения XML. Класс <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> можно использовать для получения сведений о конкретном поставщике во время выполнения.</summary>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" />.</summary>
      <param name="reader">Объект <see cref="T:System.Xml.XmlReader" /> предоставляет доступ к XML-данным в файле манифеста поставщика.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Возвращает список описаний аспектов для заданного типа модели EDM.</summary>
      <param name="type">
        <see cref="T:System.Data.Metadata.Edm.EdmType" />, для которого нужно получить описания аспектов.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для заданного типа модели EDM.</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Возвращает список функций, поддерживаемых поставщиком.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список функций, поддерживаемых поставщиком.</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Возвращает список типов-примитивов, поддерживаемых поставщиком хранения.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов-примитивов, поддерживаемых поставщиком хранения.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Возвращает имя пространства имен, поддерживаемое манифестом этого поставщика.</summary>
      <returns>Имя пространства имен, поддерживаемое манифестом этого поставщика.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Возвращает наилучший эквивалент сопоставления типа модели EDM с заданным по имени типом хранения.</summary>
      <returns>Наилучший эквивалент сопоставления типа модели EDM для заданного по имени типа хранения.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Возвращает наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</summary>
      <returns>Наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</returns>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>Предоставляет доступ к метаданным сущности.</summary>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.EntityRecordInfo" /> указанного типа сущности с перечисляемой коллекцией полей данных, с указанным ключом и сведениями о наборе сущностей.</summary>
      <param name="metadata">Объект <see cref="T:System.Data.Metadata.Edm.EntityType" /> сущности, представленной <see cref="T:System.Data.Common.DbDataRecord" /> и описанной объектом <see cref="T:System.Data.Common.EntityRecordInfo" />.</param>
      <param name="memberInfo">Перечисляемая коллекция объектов <see cref="T:System.Data.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
      <param name="entityKey">Ключ для сущности.</param>
      <param name="entitySet">Набор сущностей, к которому принадлежит сущность.</param>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>Получает <see cref="T:System.Data.EntityKey" /> для сущности.</summary>
      <returns>Ключ для сущности.</returns>
    </member>
    <member name="T:System.Data.Common.EntitySql.EntitySqlParser">
      <summary>Представляет открытый класс анализатора Entity SQL.</summary>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Common.Comm*******Trees.DbParameterReferenceExpression[])">
      <summary>Синтаксический анализ указанного <paramref name="query" /> с указанными <paramref name="parameters" />.</summary>
      <param name="query">Запрос EntitySQL, для которого требуется выполнить синтаксический анализ.</param>
      <param name="parameters">Дополнительные параметры запроса.</param>
      <returns>Объект <see cref="T:System.Data.Common.EntitySql.ParseResult" />, содержащий объект <see cref="T:System.Data.Common.Comm*******Trees.DbComm*******Tree" /> и сведения, описывающие определения встроенных функций (при их наличии).</returns>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Common.Comm*******Trees.DbVariableReferenceExpression[])">
      <summary>Выполнить синтаксический анализ <paramref name="query" /> с определенным набором <paramref name="variables" /> и создать <see cref="T:System.Data.Common.Comm*******Trees.DbLambda" />.</summary>
      <param name="query">Запрос, который необходимо проанализировать.</param>
      <param name="variables">Дополнительные переменные запроса.</param>
      <returns>Объект <see cref="T:System.Data.Common.EntitySql.ParseResult" />, содержащий объект <see cref="T:System.Data.Common.Comm*******Trees.DbComm*******Tree" /> и сведения, описывающие определения встроенных функций (при их наличии).</returns>
    </member>
    <member name="T:System.Data.Common.EntitySql.FunctionDefinition">
      <summary>Определение встроенной функции запроса Entity SQL, возвращаемое как часть объекта <see cref="T:System.Data.Common.EntitySql.ParseResult" />.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>Конечное положение определения функции в тексте запроса eSQL.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>Тело и параметры функции.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Name">
      <summary>Имя функции.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>Начальное положение определения функции в тексте запроса eSQL.</summary>
    </member>
    <member name="T:System.Data.Common.EntitySql.ParseResult">
      <summary>Сведения о результате синтаксического анализатора Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.Comm*******Tree">
      <summary>Дерево команд, сформированное во время синтаксического анализа.</summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>Список объектов <see cref="T:System.Data.Common.EntitySql.FunctionDefinition" />, описывающих встроенные определения функций запроса.</summary>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>Предоставляет доступ к метаданным поля для объекта <see cref="T:System.Data.Common.DataRecordInfo" />.</summary>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.FieldMetadata" /> с указанными порядковым номером и типом поля.</summary>
      <param name="ordinal">Целое число, указывающее расположение метаданных.</param>
      <param name="fieldType">Тип поля.</param>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>Получает тип поля для этого объекта <see cref="T:System.Data.Common.FieldMetadata" />.</summary>
      <returns>Тип поля для этого объекта <see cref="T:System.Data.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>Возвращает порядковый номер для объекта <see cref="T:System.Data.Common.FieldMetadata" />.</summary>
      <returns>Целое число, представляющее порядковый номер.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityComm*******">
      <summary>Представляет команду для концептуального уровня.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityComm*******" />, используя указанные значения.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityComm*******" /> с заданной инструкцией.</summary>
      <param name="statement">Текст команды.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.#ctor(System.String,System.Data.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityComm*******" /> с указанной инструкцией и подключением.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Подключение к источнику данных.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.#ctor(System.String,System.Data.EntityClient.EntityConnection,System.Data.EntityClient.EntityTransaction)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityComm*******" /> с указанной инструкцией, подключением и транзакцией.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Подключение к источнику данных.</param>
      <param name="transaction">Транзакция, в которой выполняется команда.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.Cancel">
      <summary>Отменяет выполнение <see cref="T:System.Data.EntityClient.EntityComm*******" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Comm*******Text">
      <summary>Возвращает или задает инструкцию Entity SQL, которая определяет команду или хранимую процедуру, подлежащую выполнению.</summary>
      <returns>Инструкция Entity SQL, которая определяет команду или хранимую процедуру, подлежащую выполнению.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Comm*******Timeout">
      <summary>Возвращает или задает интервал времени, которое должно пройти до истечения времени ожидания.</summary>
      <returns>Время в секундах, в течение которого должно происходить ожидание выполнения команды.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Comm*******Tree">
      <summary>Получает или задает дерево команд для выполнения; может быть задано только дерево команд или текст команды, но не то и другое одновременно.</summary>
      <returns>Выполняемое дерево команд.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Comm*******Type">
      <summary>Возвращает или задает значение, которое указывает, как должно интерпретироваться свойство <see cref="P:System.Data.EntityClient.EntityComm*******.Comm*******Text" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.Comm*******Type" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Connection">
      <summary>Получает или задает объект <see cref="T:System.Data.EntityClient.EntityConnection" />, используемый этим объектом <see cref="T:System.Data.EntityClient.EntityComm*******" />.</summary>
      <returns>Подключение, используемое командой сущности.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.CreateParameter">
      <summary>Создает новый экземпляр объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Новый экземпляр объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.DesignTimeVisible">
      <summary>Возвращает или задает значение, которое указывает, должен ли объект команды быть видимым в элементе управления конструктора Windows Form.</summary>
      <returns>Значение <see langword="true" />, если объект команды должен выводиться на экран в элементе управления конструктором форм Windows; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.EnablePlanCaching">
      <summary>Получает или задает значение, указывающее, включено ли кэширование плана запроса.</summary>
      <returns>Значение <see langword="true" />, если кэширование плана запроса включено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.ExecuteNonQuery">
      <summary>Выполняет текущую команду.</summary>
      <returns>Число обработанных строк.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.ExecuteReader">
      <summary>Выполняет команду и возвращает модуль чтения данных.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.ExecuteReader(System.Data.Comm*******Behavior)">
      <summary>Компилирует <see cref="P:System.Data.EntityClient.EntityComm*******.Comm*******Text" /> в дерево команд и передает его к базовому поставщику хранилища для выполнения, затем создает <see cref="T:System.Data.EntityClient.EntityDataReader" /> из созданного результирующего набора, используя указанное <see cref="T:System.Data.Comm*******Behavior" />.</summary>
      <param name="behavior">Одно из значений <see cref="T:System.Data.Comm*******Behavior" />.</param>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.ExecuteScalar">
      <summary>Выполняет команду и возвращает первый столбец первой строки из результирующего набора. Дополнительные столбцы или строки не обрабатываются.</summary>
      <returns>Первый столбец первой строки из результирующего набора или ссылка на объект NULL (Nothing в Visual Basic), если результирующий набор пуст.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Parameters">
      <summary>Получает параметры инструкции Entity SQL или хранимой процедуры.</summary>
      <returns>Параметры инструкции Entity SQL или хранимой процедуры.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.Prepare">
      <summary>Компилирует команду уровня сущностей и создает подготовленную версию команды.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityComm*******.ToTraceString">
      <summary>Компилирует команду уровня сущности и возвращает текст команды хранилища.</summary>
      <returns>Текст команды сохранения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.Transaction">
      <summary>Получает или задает транзакцию, в которой выполняется <see cref="T:System.Data.SqlClient.SqlComm*******" />.</summary>
      <returns>Транзакция, в которой выполняется <see cref="T:System.Data.SqlClient.SqlComm*******" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityComm*******.UpdatedRowSource">
      <summary>Получает или задает значение, которое показывает, как результаты команды применяются к обновляемым строкам.</summary>
      <returns>Одно из значений <see cref="T:System.Data.UpdateRowSource" />.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnection">
      <summary>Содержит ссылку на концептуальную модель и подключение к источнику данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> с заданными объектами <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> и <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <param name="workspace">Рабочая область <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, которую необходимо связать с подключением <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
      <param name="connection">Подключение к базовому источнику данных для этого объекта <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="workspace" /> или параметра <paramref name="connection" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">В рабочей области отсутствует концептуальная модель.  

или - 
В рабочей области отсутствует файл сопоставлений.  

или - 
В рабочей области отсутствует модель хранения.  

или - 
<paramref name="connection" /> не в закрытом состоянии.</exception>
      <exception cref="T:System.Data.ProviderIncompatibleException">
        <paramref name="connection" /> не от поставщика совместимой ADO.NET Entity Framework.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> на основании строки подключения.</summary>
      <param name="connectionString">Строка соединения этого поставщика.</param>
      <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction">
      <summary>Начинает транзакцию посредством базового поставщика.</summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />. Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityComm*******" />.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.  

или - 
Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.  

или - 
Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Начинает транзакцию на указанном уровне изоляции посредством базового поставщика.</summary>
      <param name="isolationLevel">Уровень изоляции транзакции.</param>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />. Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityComm*******" />.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.  

или - 
Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.  

или - 
Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Не поддерживается.</summary>
      <param name="databaseName">Не поддерживается.</param>
      <exception cref="T:System.NotSupportedException">Если вызывается метод.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Close">
      <summary>Закрывает соединение с базой данных.</summary>
      <exception cref="T:System.InvalidOperationException">При закрытии подключения произошла ошибка.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionString">
      <summary>Возвращает или задает строку соединения <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Строка подключения, необходимая для установления начального подключения к источнику данных. Значение по умолчанию - пустая строка. Для закрытого соединения возвращается текущее установленное значение. Если значение не было задано, возвращается пустая строка.</returns>
      <exception cref="T:System.InvalidOperationException">Предпринята попытка установить свойство <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> после инициализации <see cref="T:System.Data.EntityClient.EntityConnection" /> из <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> инициализируется при создании экземпляра <see cref="T:System.Data.EntityClient.EntityConnection" /> через перегрузку, принимающую как параметр <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> или при открытии экземпляра <see cref="T:System.Data.EntityClient.EntityConnection" />.</exception>
      <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Получает время ожидания (в секундах) при попытке установления подключения, по истечении которого попытка подключения завершается и создается ошибка.</summary>
      <returns>Время (в секундах), в течение которого должно производиться ожидание открытия соединения. Значением по умолчанию является стандартное время ожидания базового поставщика данных.</returns>
      <exception cref="T:System.ArgumentException">Заданное значение меньше 0.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.CreateComm*******">
      <summary>Создает новый экземпляр <see cref="T:System.Data.EntityClient.EntityComm*******" />, свойство <see cref="P:System.Data.EntityClient.EntityComm*******.Connection" /> которого установлено в значение <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityComm*******" />.</returns>
      <exception cref="T:System.InvalidOperationException">Имя базового поставщика данных неизвестно.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.Database">
      <summary>Получает имя текущей базы данных или той базы данных, которая будет использоваться после открытия подключения.</summary>
      <returns>Значение свойства базового поставщика данных <see langword="Database" />.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.DataSource">
      <summary>Возвращает имя или сетевой адрес источника данных, с которым должно быть установлено соединение.</summary>
      <returns>Имя источника данных. Значение по умолчанию - пустая строка.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Прикрепляет данный объект <see cref="T:System.Data.EntityClient.EntityConnection" /> в указанной транзакции.</summary>
      <param name="transaction">Объект транзакции, предназначенный для прикрепления.</param>
      <exception cref="T:System.InvalidOperationException">Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Возвращает рабочую область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанную с соединением <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Рабочая область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанная с этим соединением <see cref="T:System.Data.EntityClient.EntityConnection" />.</returns>
      <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова <see langword="Metadata" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Open">
      <summary>Устанавливает подключение к источнику данных посредством вызова метода <see langword="Open" /> базового поставщика данных.</summary>
      <exception cref="T:System.InvalidOperationException">При открытии подключения или неизвестном имени базового поставщика данных происходит ошибка.</exception>
      <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова <see langword="Metadata" />.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ServerVersion">
      <summary>Получает строку, содержащую версию источника данных, к которому подключается клиент.</summary>
      <returns>Версия источника данных, содержащаяся в строке подключения поставщика.</returns>
      <exception cref="T:System.InvalidOperationException">Соединение закрыто.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.State">
      <summary>Возвращает свойство <see cref="T:System.Data.ConnectionState" /> базового поставщика, если соединение <see cref="T:System.Data.EntityClient.EntityConnection" /> открыто. В противном случае возвращает значение <see cref="F:System.Data.ConnectionState.Closed" />.</summary>
      <returns>
        <see cref="F:System.Data.ConnectionState.Open" />, если и только если оба <see cref="T:System.Data.EntityClient.EntityConnection" />его внутреннее состояние и базового поставщика <see cref="T:System.Data.ConnectionState" /> открыты. Если <see cref="T:System.Data.EntityClient.EntityConnection" />в состоянии открыт, но поставщика <see cref="T:System.Data.ConnectionState" /> закрывается, это свойство возвращает <see cref="F:System.Data.ConnectionState.Broken" />. В противном случае возвращает значение <see cref="F:System.Data.ConnectionState.Closed" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.StoreConnection">
      <summary>Предоставляет доступ к подключению к базовому источнику данных, которое используется объектом <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" /> для подключения к источнику данных.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnectionStringBuilder">
      <summary>Предоставляет простой способ создания строк соединений, используемых EntityClient, и управления их содержимым.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> с помощью указанной строки соединения.</summary>
      <param name="connectionString">Строка подключения для конкретного поставщика к базовому источнику данных.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Удаляет содержимое экземпляра <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Определяет, содержит ли объект <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> указанный ключ.</summary>
      <param name="keyword">Ключ, который требуется найти в <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
      <returns>Значение <see langword="true" />, если в <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> фиксированный размер.</summary>
      <returns>
        <see langword="true" /> в любом случае так как <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> предоставляет коллекцию пар "ключевое слово/значение" фиксированного размера.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Возвращает или задает значение, связанное с указанным ключом. В языке C# это свойство является индексатором.</summary>
      <param name="keyword">Ключ возвращаемого или задаваемого элемента.</param>
      <returns>Значение, связанное с указанным ключом.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyword" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Попытка добавить ключ, не существующий в списке доступных ключей.</exception>
      <exception cref="T:System.FormatException">Недопустимое значение в строке соединения (конкретнее, ожидаемое логическое или численное значение не было передано).</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.ICollection" />, которая содержит ключи из <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, которая содержит ключи из <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Возвращает или задает расположение метаданных в строке соединения.</summary>
      <returns>Расположение метаданных в строке подключения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Возвращает или задает имя раздела, заданное в файле конфигурации.</summary>
      <returns>Имя раздела, заданное в файле конфигурации.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Возвращает или задает имя базового поставщика данных .NET Framework в строке соединения.</summary>
      <returns>Неизменяемое имя базового поставщика данных .NET Framework в строке соединения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Возвращает или задает внутреннюю, специфичную для данного поставщика строку соединения.</summary>
      <returns>Внутренняя, специфичная для данного поставщика строка соединения.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Удаляет из экземпляра <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> запись с указанным ключом.</summary>
      <param name="keyword">Ключ из пары «ключ-значение», которая будет удалена из строки соединения данного объекта <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
      <returns>Значение <see langword="true" />, если ключ существовал в строке подключения и был удален; значение <see langword="false" />, если ключ не существовал.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> имеет значение NULL (<see langword="Nothing" /> в Visual Basic).</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Получает значение, соответствующее заданному ключу, из данного объекта <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <param name="keyword">Ключ искомого элемента.</param>
      <param name="value">Значение, соответствующее <paramref name="keyword" />.</param>
      <returns>Значение <see langword="true" />, если ключевое слово <paramref name="keyword" /> найдено в строке подключения, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> содержит значение NULL (<see langword="Nothing" /> в Visual Basic).</exception>
    </member>
    <member name="T:System.Data.EntityClient.EntityDataReader">
      <summary>Считывает однопроходные потоки строк из источника данных.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Close">
      <summary>Закрывает объект <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Возвращает <see cref="T:System.Data.Common.DataRecordInfo" /> для этой транзакции <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>Сведения о записи данных.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Depth">
      <summary>Возвращает значение, показывающее глубину вложенности для текущей строки.</summary>
      <returns>Глубина вложенности для текущей строки.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые этим модулем <see cref="T:System.Data.EntityClient.EntityDataReader" />, и вызывает метод <see cref="M:System.Data.EntityClient.EntityDataReader.Close" />.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.FieldCount">
      <summary>Возвращает число столбцов в текущей строке.</summary>
      <returns>Число столбцов в текущей строке.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде логического значения.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде байта.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Считывает поток байтов из указанного столбца, начиная с местоположения, указанного параметром <paramref name="dataIndex" />, в буфер, начиная с местоположения, указанного параметром <paramref name="bufferIndex" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <param name="dataOffset">Индекс в строке, с которого необходимо начать считывание.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс в буфере, куда будут копироваться данные.</param>
      <param name="length">Максимальное число считываемых символов.</param>
      <returns>Число фактически считанных байтов.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде одного символа.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Считывает поток символов из указанного столбца, начиная с местоположения, указанного параметром <paramref name="dataIndex" />, в буфер, начиная с местоположения, указанного параметром <paramref name="bufferIndex" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <param name="dataOffset">Индекс в строке, с которого необходимо начать считывание.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс в буфере, куда будут копироваться данные.</param>
      <param name="length">Максимальное число считываемых символов.</param>
      <returns>Число фактически считанных символов.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные модули чтения данных в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <param name="i">Порядковый номер столбца.</param>
      <returns>Вложенные средства чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Возвращает вложенную запись <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <param name="i">Число возвращаемых записей <see langword="DbDataRecord" />.</param>
      <returns>Вложенная запись данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Получает имя типа данных указанного столбца.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Имя типа данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде объекта <see cref="T:System.DateTime" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Возвращает объект <see cref="T:System.Data.Common.DbDataReader" /> для запрошенного порядкового номера столбца, который можно переопределить реализацией, зависящей от поставщика.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Средство чтения данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде объекта <see cref="T:System.Decimal" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде числа с плавающей запятой двойной точности.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для просмотра строк в модуле чтения данных.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для просмотра строк в модуле чтения данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Возвращает тип данных заданного столбца.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Тип данных заданного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде числа с плавающей запятой одинарной точности.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде глобально-уникального идентификатора GUID.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Получает значение заданного столбца в виде 16-битового целого числа со знаком.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде 32-разрядного целого числа со знаком.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде 64-разрядного целого числа со знаком.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Возвращает имя столбца, если известен его порядковый номер (от нуля).</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Имя заданного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Возвращает порядковый номер столбца, если известно его имя.</summary>
      <param name="name">Имя столбца.</param>
      <returns>Порядковый номер столбца (от нуля).</returns>
      <exception cref="T:System.IndexOutOfRangeException">Заданное имя недопустимо для имени столбца.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Возвращает тип поля заданного столбца, зависящий от поставщика.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Объект <see cref="T:System.Type" />, описывающий тип данных указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляр <see cref="T:System.Object" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Возвращает из коллекции все столбцы атрибутов, зависящие от поставщика, для текущей строки.</summary>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который необходимо скопировать столбцы атрибутов.</param>
      <returns>Число экземпляров <see cref="T:System.Object" /> в массиве.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Возвращает объект <see cref="T:System.Data.DataTable" />, описывающий метаданные столбцов модуля чтения данных <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Объект <see cref="T:System.Data.DataTable" />, описывающий метаданные столбцов.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляр <see cref="T:System.String" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляр <see cref="T:System.Object" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями столбцов текущей строки.</summary>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который необходимо скопировать столбцы атрибутов.</param>
      <returns>Число экземпляров <see cref="T:System.Object" /> в массиве.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.HasRows">
      <summary>Возвращает значение, указывающее на то, что в модуле чтения данных <see cref="T:System.Data.EntityClient.EntityDataReader" /> содержится одна или несколько строк.</summary>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.EntityClient.EntityDataReader" /> содержит одну или несколько строк; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.IsClosed">
      <summary>Возвращает значение, указывающее, закрыт ли модуль чтения <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.EntityClient.EntityDataReader" /> закрыт; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Возвращает значение, указывающее, содержатся ли в столбце несуществующие или отсутствующие значения.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение <see langword="true" />, если указанный столбец эквивалентен <see cref="T:System.DBNull" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляр <see cref="T:System.Object" />.</summary>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Возвращает значение указанного столбца как экземпляр <see cref="T:System.Object" />.</summary>
      <param name="name">Имя столбца.</param>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.NextResult">
      <summary>Перемещает модуль чтения данных к следующему результату при чтении результатов из пакета инструкций.</summary>
      <returns>Значение <see langword="true" />, если имеются и другие наборы результатов, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Read">
      <summary>Перемещает модуль чтения к следующей записи в результирующем наборе.</summary>
      <returns>Значение <see langword="true" />, если имеются другие строки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Возвращает число строк, которые были изменены, вставлены или удалены инструкцией SQL.</summary>
      <returns>Число измененных, вставленных или удаленных строк. Возвращает значение -1 для инструкций SELECT и значение 0, если строки не были затронуты или инструкция завершилась ошибкой.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Возвращает число не скрытых полей в <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
      <returns>Число не скрытых полей.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameter">
      <summary>Представляет параметр, используемый в EntityComm*******.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />, используя значения по умолчанию.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" /> с использованием указанного имени параметра и типа данных.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <exception cref="T:System.ArgumentException">Значение, передаваемое в параметре <paramref name="dbType" />, имеет недопустимый тип внутренних данных.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" /> с использованием указанного имени параметра, типа данных и размера.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
      <exception cref="T:System.ArgumentException">Значение, передаваемое в параметре <paramref name="dbType" />, имеет недопустимый тип внутренних данных.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" /> с помощью заданных свойств.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
      <param name="direction">Одно из значений <see cref="T:System.Data.ParameterDirection" />.</param>
      <param name="isNullable">Значение <see langword="true" /> для указания, что параметр допускает значения NULL; в противном случае — значение <see langword="false" />.</param>
      <param name="precision">Количество знаков, которое можно использовать для представления значения.</param>
      <param name="scale">Количество десятичных разрядов для значения.</param>
      <param name="sourceColumn">Имя исходного столбца.</param>
      <param name="sourceVersion">Одно из значений <see cref="T:System.Data.DataRowVersion" />.</param>
      <param name="value">Значение параметра.</param>
      <exception cref="T:System.ArgumentException">Значение, передаваемое в параметре <paramref name="dbType" />, имеет недопустимый тип внутренних данных.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" /> с помощью заданных свойств.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
      <param name="sourceColumn">Имя исходного столбца.</param>
      <exception cref="T:System.ArgumentException">Значение, передаваемое в параметре <paramref name="dbType" />, имеет недопустимый тип внутренних данных.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.DbType">
      <summary>Возвращает или устанавливает тип <see cref="T:System.Data.DbType" /> параметра.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DbType" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Direction">
      <summary>Получает или задает направление параметра.</summary>
      <returns>Одно из значений <see cref="T:System.Data.ParameterDirection" />.</returns>
      <exception cref="T:System.ArgumentException">Для свойства не задано одно из допустимых значений типа <see cref="T:System.Data.ParameterDirection" />.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.EdmType">
      <summary>Получает или задает тип параметра в виде EdmType.</summary>
      <returns>Тип параметра в виде EdmType.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.IsNullable">
      <summary>Возвращает или задает значение, указывающее, принимает ли этот параметр значения NULL.</summary>
      <returns>
        <see langword="true" />, если допускаются значения null. В противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.ParameterName">
      <summary>Получает или задает имя параметра сущности.</summary>
      <returns>Имя параметра сущности.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Precision">
      <summary>Возвращает или задает количество знаков, используемых для представления свойства <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Количество знаков, которое можно использовать для представления значения.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ResetDbType">
      <summary>Сбрасывает тип, связанный с <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Scale">
      <summary>Возвращает или задает число десятичных разрядов, до которых вычисляется значение <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Количество десятичных разрядов для значения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Size">
      <summary>Возвращает или задает максимальный размер данных в столбце.</summary>
      <returns>Максимальный размер данных в столбце.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumn">
      <summary>Возвращает или задает имя исходного столбца, сопоставленного <see cref="T:System.Data.DataSet" /> и используемого для загрузки или возвращения значения <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Имя столбца источника, который сопоставляется с набором данных и используется для загрузки или возврата значения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Получает или задает значение, указывающее, поддерживает ли исходный столбец значение NULL.</summary>
      <returns>Значение <see langword="true" />, если столбец источника может содержать пустое значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceVersion">
      <summary>Получает или задает объект <see cref="T:System.Data.DataRowVersion" />, используемый при загрузке значения.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DataRowVersion" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ToString">
      <summary>Возвращает строковое представление параметра.</summary>
      <returns>Строковое представление параметра.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Value">
      <summary>Возвращает или задает значение параметра.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameterCollection">
      <summary>Представляет коллекцию параметров, связанных с командой <see cref="T:System.Data.EntityClient.EntityComm*******" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Data.EntityClient.EntityParameter)">
      <summary>Добавляет указанный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="value">Параметр <see cref="T:System.Data.EntityClient.EntityParameter" /> для добавления в коллекцию.</param>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.EntityClient.EntityParameter" />, заданный в параметре <paramref name="value" />, уже добавлен в эту или другую коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</exception>
      <exception cref="T:System.InvalidCastException">Передан параметр, отличный от объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Добавляет указанный объект в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />.</param>
      <returns>Индекс нового объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Добавляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в соответствии с заданным именем и типом данных параметра.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Добавляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в соответствии с заданным именем параметра, типом данных и длиной столбца.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Длина столбца.</param>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Добавляет массив значений в конец коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Добавляемые значения <see cref="T:System.Array" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Data.EntityClient.EntityParameter[])">
      <summary>Добавляет массив значений <see cref="T:System.Data.EntityClient.EntityParameter" /> в конец коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Добавляемые значения <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Добавляет значение в конец коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="value">Добавляемое значение.</param>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Clear">
      <summary>Удаляет все объекты <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Определяет, находится ли заданный объект <see cref="T:System.Object" /> в этой коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="value">Значение <see cref="T:System.Object" />.</param>
      <returns>
        <see langword="true" />, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Определяет, находится ли заданный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в этой коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="parameterName">Значение <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
      <returns>
        <see langword="true" />, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в указанный одномерный массив <see cref="T:System.Array" />, начиная с указанного индекса в массиве <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" /> — назначение для элементов, копируемых из текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее индекс в коллекции <see cref="T:System.Array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Data.EntityClient.EntityParameter[],System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в указанную коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />, начиная с указанного индекса в коллекции назначения.</summary>
      <param name="array">Коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> — назначение для элементов, копируемых из текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее индекс в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Count">
      <summary>Возвращает значение типа Integer, содержащее число элементов в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Число элементов в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> является значением типа Integer.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов списка <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Data.EntityClient.EntityParameter)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции.</summary>
      <param name="value">Искомый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
      <returns>Положение (отсчет с нуля) заданного объекта <see cref="T:System.Data.EntityClient.EntityParameter" />, который является объектом <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции. Возвращает значение -1, если объект не существует в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Object" /> в коллекции.</summary>
      <param name="value">Искомый объект <see cref="T:System.Object" />.</param>
      <returns>Положение (отсчет с нуля) заданного объекта <see cref="T:System.Object" />, который является объектом <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции. Возвращает значение -1, если объект не существует в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем.</summary>
      <param name="parameterName">Имя искомого объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> с учетом регистра.</param>
      <returns>Положение (отсчет с нуля) указанного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> с заданным именем с учетом регистра. Возвращает значение -1, если объект не существует в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.EntityClient.EntityParameter)">
      <summary>Вставляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Индекс (отсчет с нуля), по которому необходимо вставить значение.</param>
      <param name="value">Объект <see cref="T:System.Data.EntityClient.EntityParameter" />, вставляемый в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Вставляет объект <see cref="T:System.Object" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Индекс (отсчет с нуля), по которому необходимо вставить значение.</param>
      <param name="value">Объект <see cref="T:System.Object" />, вставляемый в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> фиксированный размер.</summary>
      <returns>Возвращает значение <see langword="true" />, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> имеет фиксированный размер, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> доступной только для чтения.</summary>
      <returns>Возвращает значение <see langword="true" />, если <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> синхронизированной.</summary>
      <returns>Возвращает значение <see langword="true" />, если объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> синхронизирован; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Возвращает объект <see cref="T:System.Data.EntityClient.EntityParameter" /> по указанному индексу.</summary>
      <param name="index">Индекс получаемого параметра (отсчет с нуля).</param>
      <returns>Параметр <see cref="T:System.Data.EntityClient.EntityParameter" /> по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Указанный индекс не существует.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем.</summary>
      <param name="parameterName">Имя получаемого параметра.</param>
      <returns>Параметр <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Указанное имя не существует.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Data.EntityClient.EntityParameter)">
      <summary>Удаляет указанный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Data.EntityClient.EntityParameter" />, который должен быть удален из коллекции.</param>
      <exception cref="T:System.InvalidCastException">Параметр не является объектом <see cref="T:System.Data.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.SystemException">Параметр отсутствует в коллекции.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Удаляет указанный параметр из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который должен быть удален из коллекции.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Удаляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным индексом из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="index">Индекс (отсчет с нуля) удаляемого объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Удаляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="parameterName">Имя удаляемого объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityProviderFactory">
      <summary>Представляет набор методов для создания экземпляров реализации поставщика для классов источника данных.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateComm*******">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.EntityClient.EntityComm*******" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityComm*******" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateComm*******Builder">
      <summary>Создает исключение <see cref="T:System.NotSupportedException" />. В настоящее время этот метод не поддерживается.</summary>
      <returns>В настоящее время этот метод не поддерживается.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Метод <see cref="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter" /> не поддерживается в этой версии .NET Framework.</summary>
      <returns>Объект <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует версию класса <see cref="T:System.Security.CodeAccessPermission" /> данного поставщика.</summary>
      <param name="state">Одно из значений <see cref="T:System.Security.Permissions.PermissionState" />.</param>
      <returns>Объект <see cref="T:System.Security.CodeAccessPermission" /> для указанного значения <see cref="T:System.Security.Permissions.PermissionState" />.</returns>
    </member>
    <member name="F:System.Data.EntityClient.EntityProviderFactory.Instance">
      <summary>Данный экземпляр <see cref="T:System.Data.EntityClient.EntityProviderFactory" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Возвращает запрошенный класс <see cref="T:System.IServiceProvider" />.</summary>
      <param name="serviceType">Возвращаемое значение <see cref="T:System.Type" />.</param>
      <returns>Новый экземпляр класса <see cref="T:System.IServiceProvider" />. Поддерживаются типы <see cref="T:System.Data.Common.DbProviderServices" /> и System.Data.IEntityAdapter. Возвращает значение null (или <see langword="Nothing" /> в Visual Basic) для любого другого типа.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityTransaction">
      <summary>Указывает транзакцию для объекта <see cref="T:System.Data.EntityClient.EntityComm*******" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Commit">
      <summary>Фиксирует базовую транзакцию.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.Connection">
      <summary>Возвращает <see cref="T:System.Data.EntityClient.EntityConnection" /> для этой транзакции <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>Экземпляр типа <see cref="T:System.Data.EntityClient.EntityConnection" /> для базового источника данных.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Возвращает уровень изоляции этой транзакции <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.IsolationLevel" />, которое представляет уровень изоляции базовой транзакции.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Rollback">
      <summary>Откатывает базовую транзакцию.</summary>
    </member>
    <member name="T:System.Data.EntityComm*******CompilationException">
      <summary>Представляет ошибки, которые возникают во время компиляции команды, если не удается сформировать дерево команд, представляющее текст команды.</summary>
    </member>
    <member name="M:System.Data.EntityComm*******CompilationException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******CompilationException" />.</summary>
    </member>
    <member name="M:System.Data.EntityComm*******CompilationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******CompilationException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityComm*******CompilationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******CompilationException" />.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая (<see langword="null" />) ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityComm*******ExecutionException">
      <summary>Представляет ошибки, возникающие, когда поставщик базового хранилища не может выполнить заданную команду. Это исключение, как правило, зависит от поставщика.</summary>
    </member>
    <member name="M:System.Data.EntityComm*******ExecutionException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******ExecutionException" />.</summary>
    </member>
    <member name="M:System.Data.EntityComm*******ExecutionException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******ExecutionException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityComm*******ExecutionException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityComm*******ExecutionException" />.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая (<see langword="null" />) ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>Представляет связанные с платформой Entity Framework ошибки, возникающие в пространстве имен <see langword="EntityClient" />. <see langword="EntityException" /> является базовым классом для всех исключений Entity Framework, которые были вызваны <see langword="EntityClient" />.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая (<see langword="null" />) ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>Предоставляет устойчивую ссылку на объект, являющийся экземпляром типа сущности.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> с именем набора сущностей и общей коллекцией <see cref="T:System.Collections.Generic.KeyValuePair" />.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, представляющий имя набора сущностей, сопровождаемое именем контейнера сущностей.</param>
      <param name="entityKeyValues">Общая коллекция <see cref="T:System.Collections.Generic.KeyValuePair" />.  
Каждая пара «ключ-значение» имеет имя свойства, выступающее в качестве ключа, и значение этого свойства, выступающее в качестве значения. Для каждого свойства, являющегося частью ключа <see cref="T:System.Data.EntityKey" />, должна существовать одна такая пара. Порядок пар «ключ-значение» не играет роли, однако должно быть включено каждое ключевое свойство. Имена свойств представляют собой простые имена, которые не дополняются именем типа сущности или именем схемы.</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> именем набора сущностей и коллекцией <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Data.EntityKeyMember" />.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, представляющий имя набора сущностей, сопровождаемое именем контейнера сущностей.</param>
      <param name="entityKeyValues">Коллекция <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Data.EntityKeyMember" />, которыми следует инициализировать ключ.</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> именем набора сущностей и конкретной парой ключей сущности.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, представляющий имя набора сущностей, сопровождаемое именем контейнера сущностей.</param>
      <param name="keyName">Объект <see cref="T:System.String" />, который является именем ключа.</param>
      <param name="keyValue">Объект <see cref="T:System.Object" />, представляющий значение ключа.</param>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>Получает или задает имя контейнера сущностей.</summary>
      <returns>Значение <see cref="T:System.String" />, представляющее имя контейнера сущностей, содержащего сущность, которой принадлежит ключ <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>Получает или задает значения ключей, связанные с этим объектом <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> значений ключей для этого объекта <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>Простой ключ <see cref="T:System.Data.EntityKey" />, определяющий сущность, полученную после неудачной операции TREAT.</summary>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>Получает или задает имя набора сущностей.</summary>
      <returns>Значение <see cref="T:System.String" />, представляющее имя набора сущностей, содержащего сущность, которой принадлежит ключ <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>Возвращает значение, указывающее, равен ли экземпляр заданному ключу <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="other">Ключ <see cref="T:System.Data.EntityKey" />, с которым сравнивается этот экземпляр.</param>
      <returns>
        <see langword="true" />, если данный экземпляр и <paramref name="other" /> имеют одинаковые значения, и значение <see langword="false" /> — в противном случае.</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" />, с которым сравнивается этот экземпляр.</param>
      <returns>
        <see langword="true" />, если данный экземпляр и <paramref name="obj" /> имеют одинаковые значения, и значение <see langword="false" /> — в противном случае.</returns>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Возвращает набор сущностей для этого ключа сущности из определенной рабочей области метаданных.</summary>
      <param name="metadataWorkspace">Рабочая область метаданных, содержащая сущность.</param>
      <returns>Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> для ключа сущности.</returns>
      <exception cref="T:System.ArgumentException">Не удалось найти набор сущностей в заданной рабочей области метаданных.</exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>Служит в качестве хэш-функции для текущего объекта <see cref="T:System.Data.EntityKey" />. Метод <see cref="M:System.Data.EntityKey.GetHashCode" /> может применяться в алгоритмах и структурах данных хэширования, например в хэш-таблицах.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>Возвращает значение, определяющее, является ли ключ <see cref="T:System.Data.EntityKey" /> временным.</summary>
      <returns>Значение <see langword="true" />, если объект  <see cref="T:System.Data.EntityKey" /> является временным; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>Одноэлементный ключ <see cref="T:System.Data.EntityKey" />, по которому определяется сущность, доступная только для чтения.</summary>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Вспомогательный метод, используемый для десериализации ключа <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Описывает источник и назначение заданного потока сериализации и обеспечивает дополнительный контекст, определяемый вызывающим объектом.</param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вспомогательный метод, используемый для десериализации ключа <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Описывает источник и назначение заданного потока сериализации и обеспечивает дополнительный контекст, определяемый вызывающим объектом.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Сравнивает два объекта <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="key1">Ключ <see cref="T:System.Data.EntityKey" /> для сравнения.</param>
      <param name="key2">Ключ <see cref="T:System.Data.EntityKey" /> для сравнения.</param>
      <returns>
        <see langword="true" />, если значения <paramref name="key1" /> и <paramref name="key2" /> равны; в противном случае – <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Сравнивает два объекта <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="key1">Ключ <see cref="T:System.Data.EntityKey" /> для сравнения.</param>
      <param name="key2">Ключ <see cref="T:System.Data.EntityKey" /> для сравнения.</param>
      <returns>
        <see langword="true" />, если значения <paramref name="key1" /> и <paramref name="key2" /> не равны; в противном случае —  <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>Представляет имя ключа и значение, которое является частью ключа <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKeyMember" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKeyMember" /> с указанной парой ключа сущности.</summary>
      <param name="keyName">Имя ключа.</param>
      <param name="keyValue">Значение ключа.</param>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>Получает или задает имя ключа сущности.</summary>
      <returns>Имя ключа.</returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>Возвращает строковое представление ключа сущности.</summary>
      <returns>Строковое представление текущего ключа.</returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>Получает или задает значение ключа сущности.</summary>
      <returns>Значение ключа.</returns>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>Представляет ошибки, возникающие при синтаксическом анализе текста команды на языке Entity SQL. Это исключение возникает при нарушении синтаксических и семантических правил.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntitySqlException" />.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntitySqlException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntitySqlException" />, содержащий указанное сообщение об ошибке и ссылку на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая (<see langword="null" />) ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>Возвращает приблизительный номер столбца, в котором возникла ошибка.</summary>
      <returns>Целое число, соответствующее номеру столбца, в котором возникла ошибка.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>По возможности возвращает приблизительный контекст, в котором возникла ошибка.</summary>
      <returns>Строка с описанием приблизительного контекста, в котором возникла ошибка, если такая информация имеется.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>Возвращает описание ошибки.</summary>
      <returns>Строка с описанием ошибки.</returns>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="info" /> является пустой (<see langword="null" />) ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>Возвращает приблизительный номер строки, в которой возникла ошибка.</summary>
      <returns>Целое число, соответствующее номеру строки, в которой возникла ошибка.</returns>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>Состояние объекта сущности.</summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>Объект является новым, он был добавлен в контекст объекта без вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Unchanged" />. У объектов в состоянии <see cref="F:System.Data.EntityState.Added" /> отсутствуют исходные значения в <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>Объект был удален из контекста объекта. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Detached" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>Объект существует, но не отслеживается. Сущность находится в этом состоянии сразу после создания и до добавления в контекст объекта. Сущность также находится в этом состоянии после ее удаления из контекста с помощью вызова метода <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> или в случае ее загрузки с помощью <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" />. Экземпляр <see cref="T:System.Data.Objects.ObjectStateEntry" />, который связан с объектами в состоянии <see cref="F:System.Data.EntityState.Detached" />, отсутствует.</summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>Одно из скалярных свойств объекта было изменено, а метод <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> не был вызван. В сущностях POCO без посредников, отслеживающих изменения, состояние измененных свойств при вызове метода <see cref="F:System.Data.EntityState.Modified" /> меняется на <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" />. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>Объект не был изменен с момента присоединения к контексту или с момента последнего вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>Предоставляет доступ к значениям столбцов в каждой строке <see cref="T:System.Data.Common.DbDataRecord" /> для <see cref="T:System.Data.Common.DbDataReader" />.</summary>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>Возвращает <see cref="T:System.Data.Common.DataRecordInfo" /> для этой транзакции <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные модули чтения данных в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <param name="i">Порядковый номер столбца.</param>
      <returns>Вложенные модули чтения данных в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Получает объект <see cref="T:System.Data.Common.DbDataRecord" /> с заданным индексом.</summary>
      <param name="i">Индекс строки.</param>
      <returns>Объект <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
    </member>
    <member name="T:System.Data.InvalidComm*******TreeException">
      <summary>Исключение, указывающее на недопустимость дерева команд. В настоящее время это исключение не произошло в Entity Framework.</summary>
    </member>
    <member name="M:System.Data.InvalidComm*******TreeException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidComm*******TreeException" /> с сообщением по умолчанию.</summary>
    </member>
    <member name="M:System.Data.InvalidComm*******TreeException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidComm*******TreeException" /> указанным сообщением.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.InvalidComm*******TreeException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidComm*******TreeException" /> с указанным сообщением и внутренним исключением.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Исключение, вызвавшее данное исключение <see cref="T:System.Data.InvalidComm*******TreeException" />.</param>
    </member>
    <member name="T:System.Data.Mapping.EntityViewContainer">
      <summary>Базовый класс для типа, созданного во время разработки для хранения генерируемых представлений.</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see langword="EntityViewContainer" />.</summary>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Получает или задает имя объекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Возвращает пару ключ-значение по указанному индексу, которая содержит представление и его ключ.</summary>
      <param name="index">Индекс представления.</param>
      <returns>Пара ключ-значение с индексом <paramref name="index" />, содержащая представление и его ключ.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Хэш-значение представлений.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Хэш-значение.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Получает или задает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> в схеме хранения.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.ViewCount">
      <summary>Получает или задает число представлений.</summary>
      <returns>Число представлений.</returns>
    </member>
    <member name="T:System.Data.Mapping.EntityViewGenerationAttribute">
      <summary>Атрибут для разметки сборок, содержащих тип созданных представлений.</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.EntityViewGenerationAttribute" />.</summary>
      <param name="viewGenerationType">Тип представления.</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Получает тип T:System.Type для представления.</summary>
      <returns>Свойство типа T:System.Type для представления.</returns>
    </member>
    <member name="T:System.Data.Mapping.MappingItemCollection">
      <summary>Коллекция объектов <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, предназначенных для хранения сведений о сопоставлении.</summary>
    </member>
    <member name="T:System.Data.Mapping.StorageMappingItemCollection">
      <summary>Представляет коллекцию элементов в области сопоставления хранилища (сопоставление CS).</summary>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />, используя указанные <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> и средства чтения XML.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="xmlReaders">Средства чтения XML, которые должны использоваться этим сопоставлением.</param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> с помощью заданных <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> и коллекции строк, указывающих пути к файлам метаданных.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="filePaths">Пути к файлам, которые должны использоваться этим сопоставлением.</param>
    </member>
    <member name="P:System.Data.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>Получает версию данного объекта <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Версия данного объекта <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />.</returns>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>Исключение, возникающее при сбое запросов связанной службы сопоставления.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.MappingException" />.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MappingException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.MappingException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationEndMember">
      <summary>Представляет <see langword="End" /> ассоциации в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSet">
      <summary>Представляет набор ассоциаций в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Возвращает элементы этого набора ассоциаций <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая элементы этого набора ассоциаций <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого экземпляра <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.ElementType">
      <summary>Возвращает ассоциацию, связанную с этим набором ассоциаций <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationType" />, представляющий ассоциацию, связанную с этим набором ассоциаций <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSetEnd">
      <summary>Представляет <see langword="End" /> набора ассоциаций в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Получает член <see langword="End" />, которому соответствует данный объект <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />, представляющий член <see langword="End" />, которому соответствует данный объект <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Получает набор сущностей, на который ссылается данная роль <see langword="End" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, представляющий набор сущностей, на который ссылается данная роль <see langword="End" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Возвращает имя элемента <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя элемента <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Возвращает родительский набор ассоциаций этого элемента <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationSet" />, который представляет родительский набор ассоциаций этого элемента <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Получает имя роли <see langword="End" /> для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли <see langword="End" /> для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Возвращает имя роли <see langword="End" /> для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли <see langword="End" /> для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationType">
      <summary>Представляет ассоциацию в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Возвращает список элементов для ассоциации типа <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список элементов для этого типа <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Получает логическое значение свойства, указывающее на то, является ли столбец внешним ключом.</summary>
      <returns>Логическое значение, указывающее на то, является ли столбец внешним ключом. Если значение равно <see langword="true" />, столбец является внешним ключом. Если значение равно <see langword="false" /> (по умолчанию), столбец не является внешним ключом.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Возвращает список ограничений для этого типа <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список ограничений для этого типа <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.BuiltInTypeKind">
      <summary>Представляет перечисление, содержащее список всех встроенных типов в концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.CollectionKind" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EdmMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EdmType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EnumMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.EnumType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.GlobalItem" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.MetadataItem" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.OperationAction" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.ParameterMode" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="System.Data.Metadata.Edm.ProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.SimpleType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.StructuralType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Элемент перечисления, указывающий тип объекта <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionKind">
      <summary>Представляет собой перечисление, задающее вид коллекции, применяемой к свойствам в файле CSDL. Применяется к свойствам любого типа.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.Bag">
      <summary>Эта коллекция обладает семантикой контейнера. Элементы неупорядочены, повторы допускаются.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.List">
      <summary>Эта коллекция обладает семантикой списка. Порядок элементов детерминирован, повторы допускаются.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.None">
      <summary>Это свойство не является коллекцией.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionType">
      <summary>Представляет коллекцию экземпляров конкретного типа. В концептуальной модели невозможно явно определить <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, который содержит тип элемента, включаемого текущим объектом <see cref="T:System.Data.Metadata.Edm.CollectionType" />, и аспекты для этого типа.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, который содержит тип элемента, включаемого текущим объектом <see cref="T:System.Data.Metadata.Edm.CollectionType" />, и аспекты для этого типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ComplexType">
      <summary>Представляет сложный тип в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ConcurrencyMode">
      <summary>Задает параметры параллелизма для свойств в концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Это свойство всегда проверяется во время записи.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.None">
      <summary>Это свойство никогда не проверяется во время записи. Это режим параллелизма по умолчанию.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.DataSpace">
      <summary>Задает имена по умолчанию для моделей в платформе Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSpace">
      <summary>Представляет имя по умолчанию для концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSSpace">
      <summary>Представляет имя, используемое по умолчанию для сопоставления между концептуальной моделью и моделью хранилища.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OCSpace">
      <summary>Представляет имя, используемое по умолчанию для сопоставления между объектной моделью и концептуальной моделью.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OSpace">
      <summary>Представляет имя по умолчанию для модели объектов.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.SSpace">
      <summary>Представляет имя по умолчанию для модели хранения.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Documentation">
      <summary>Представляет документацию, связанную с конструкцией концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.IsEmpty">
      <summary>Возвращает значение, указывающее на то, содержит ли этот объект <see cref="T:System.Data.Metadata.Edm.Documentation" /> только значение NULL или пустое значение <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />.</summary>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Data.Metadata.Edm.Documentation" /> содержит только значение NULL или пустое значение <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.LongDescription">
      <summary>Возвращает подробное описание для этой документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Подробное описание для этой документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.Summary">
      <summary>Возвращает сводку для документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Documentation.ToString">
      <summary>Возвращает сводку для документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для документации <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmError">
      <summary>Содержит сведения об универсальной ошибке концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmError.Message">
      <summary>Возвращает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmFunction">
      <summary>Представляет сведения о функциях, которые могут вызываться из запросов, написанных на языке запросов Entity SQL. Это могут быть встроенные функции, доступ к которым предоставляет поставщик хранения, или определяемые пользователем функции в какой-либо базе данных.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Comm*******TextAttribute">
      <summary>Получает запрос на языке, который используется системой управления базой данных или моделью хранения.</summary>
      <returns>Значение строки в синтаксисе, который используется системой управления базой данных или моделью хранения, содержащее инструкцию запроса или обновления объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.FullName">
      <summary>Возвращает полное имя этого типа (пространство имен и имя).</summary>
      <returns>Полное имя типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>Получает или задает значение, указывающее, чему сопоставлен данный экземпляр — функции или хранимой процедуре.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр сопоставляется функции; значение <see langword="false" />, если этот экземпляр сопоставляется хранимой процедуре.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Parameters">
      <summary>Возвращает параметры этой функции <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая параметры этой функции <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Возвращает выходной параметр этой функции <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />, представляющий выходной параметр этой функции <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>Получает возвращаемые параметры данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, которая представляет возвращаемые параметры данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmItemCollection">
      <summary>Загружает метаданные о концептуальной модели. Метод EdmItemCollection загружает метаданные из CSDL-файлов. Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, используя коллекцию объектов XMLReader, в которой существуют CSDL-файлы.</summary>
      <param name="xmlReaders">Коллекция объектов XMLReader, где находятся CSDL-файлы.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, используя пути, по которым расположены CSDL-файлы.</summary>
      <param name="filePaths">Пути, по которым расположены CSDL-файлы.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Получает версию концептуальной модели для данной коллекции.</summary>
      <returns>Версия концептуальной модели для данной коллекции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект ReadOnlyCollection, представляющий коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> с указанной версией концептуальной модели.</summary>
      <param name="edmVersion">Версия концептуальной модели.</param>
      <returns>Объект ReadOnlyCollection, представляющий коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmMember">
      <summary>Представляет собой элемент, который может иметь любой тип <see cref="T:System.Data.Metadata.Edm.StructuralType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Возвращает тип, который имеет данный элемент.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип, который имеет данный элемент.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.Name">
      <summary>Возвращает имя данного элемента.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmMember.ToString">
      <summary>Возвращает имя данного элемента.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий тип элемента и аспекты этого типа.</summary>
      <returns>Объект класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий тип элемента и аспекты этого типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmProperty">
      <summary>Представляет свойство для объекта <see cref="T:System.Data.Metadata.Edm.EntityType" /> в концептуальной модели. Класс <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> происходит от класса <see cref="T:System.Data.Metadata.Edm.EdmMember" /> и предоставляет аспекты <see cref="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue" /> и <see cref="P:System.Data.Metadata.Edm.EdmProperty.Nullable" /> для типа свойства <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Возвращает значение по умолчанию для свойства <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Значение по умолчанию для свойства <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.Nullable">
      <summary>Возвращает значение, указывающее, допускает ли свойство <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> значения NULL.</summary>
      <returns>
        <see langword="true" />, если данное свойство <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> может иметь значение null; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaError">
      <summary>Содержит подробные сведения об ошибке схемы концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Column">
      <summary>Возвращает столбец, в котором произошла ошибка.</summary>
      <returns>Столбец, в котором произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Возвращает код ошибки.</summary>
      <returns>Код ошибки.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Line">
      <summary>Возвращает номер строки, в которой произошла ошибка.</summary>
      <returns>Номер строки, в которой произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Возвращает расположение схемы, содержащей ошибку. В конце этой строки содержится имя схемы.</summary>
      <returns>Расположение схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Возвращает имя схемы, содержащей ошибку.</summary>
      <returns>Имя схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Возвращает степень серьезности ошибки.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity" />. Значение по умолчанию — <see cref="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Возвращает строковое представление трассировки стека при возникновении ошибки.</summary>
      <returns>Строковое представление трассировки стека при возникновении ошибки.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Возвращает сообщение ошибки.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Указывает степень серьезность ошибки.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Ошибка указывает, что возникла серьезная проблема и схема не может использоваться.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Предупреждение указывает на наличие некоторых проблем в схеме, при этом она все еще может использоваться.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmType">
      <summary>Представляет базовый класс для всех типов в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Abstract">
      <summary>Возвращает значение, указывающее, является ли тип абстрактным.</summary>
      <returns>
        <see langword="true" />, если тип является абстрактным; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.BaseType">
      <summary>Возвращает базовый тип этого типа.</summary>
      <returns>Базовый тип этого типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.FullName">
      <summary>Возвращает полное имя этого типа.</summary>
      <returns>Полное имя этого типа.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Metadata.Edm.CollectionType" />, элементы которого имеют этот тип.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.CollectionType" />, элементы которого имеют этот тип.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Name">
      <summary>Возвращает имя этого типа.</summary>
      <returns>Имя этого типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.NamespaceName">
      <summary>Возвращает пространство имен этого типа.</summary>
      <returns>Пространство имен этого типа.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.ToString">
      <summary>Возвращает полное имя этого типа.</summary>
      <returns>Полное имя этого типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityContainer">
      <summary>Представляет контейнер сущностей в концептуальной модели. Контейнер <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> является логическим группированием наборов сущностей и наборов ассоциаций.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Возвращает список наборов сущностей и наборов ассоциаций, входящих в этот контейнер <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащий список наборов сущностей и наборов ассоциаций, входящих в этот контейнер <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Задает коллекцию элементов <see cref="T:System.Data.Metadata.Edm.EdmFunction" />. Каждая функция содержит подробные сведения о хранимой процедуре, которая существует в базе данных, или эквивалентном объекте <c>Comm*******Text</c>, который сопоставлен с сущностью и ее свойствами.</summary>
      <returns>Коллекция <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая элементы <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntitySet" /> с использованием заданного имени для набора сущностей.</summary>
      <param name="name">Имя искомого набора сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, представляющий набор сущностей с указанным именем.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> с использованием заданного имени для набора связей.</summary>
      <param name="name">Имя искомого набора связей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, представляющий набор связей с указанным именем.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.Name">
      <summary>Возвращает имя этого аспекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя этого аспекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.ToString">
      <summary>Возвращает имя этого аспекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя этого аспекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Metadata.Edm.EntitySet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntitySet" /> с использованием заданного имени для набора сущностей.</summary>
      <param name="name">Имя искомого набора сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="entitySet">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />. Если набор сущностей отсутствует, этот выходной параметр содержит значение NULL.</param>
      <returns>
        <see langword="true" />, если существует набор сущностей, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Metadata.Edm.RelationshipSet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> с использованием заданного имени для набора связей.</summary>
      <param name="name">Имя искомого набора связей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="relationshipSet">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</param>
      <returns>
        <see langword="true" />, если существует набор отношений, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySet">
      <summary>Представляет набор сущностей в концептуальной модели. Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> для типа <see cref="T:System.Data.Metadata.Edm.EntityType" /> содержит экземпляры <see cref="T:System.Data.Metadata.Edm.EntityType" /> или любые из его подтипов. Можно определить несколько наборов <see cref="T:System.Data.Metadata.Edm.EntitySet" />, используя один и тот же тип <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.ElementType">
      <summary>Возвращает тип сущности этого объекта <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityType" />, представляющий тип сущности этого объекта <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySetBase">
      <summary>Базовый класс объектов <see cref="T:System.Data.Metadata.Edm.EntitySet" /> и <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Получает тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Возвращает контейнер сущностей текущей сущности или набора связей.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, представляющий контейнер сущностей текущего набора сущностей или отношений.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.Name">
      <summary>Получает имя текущего набора сущностей или отношений.</summary>
      <returns>Имя текущего набора сущностей или отношений.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntitySetBase.ToString">
      <summary>Возвращает имя текущей сущности или набора связей.</summary>
      <returns>Имя текущего набора сущностей или отношений.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityType">
      <summary>Представляет определенный тип данных, например сущность клиента или сущность заказа, в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RefType" />, ссылающийся на этот тип <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RefType" />, ссылающийся на этот тип <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Возвращает свойства навигации этого типа <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств навигации для этого типа <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityTypeBase">
      <summary>Базовый тип для типов <see cref="T:System.Data.Metadata.Edm.EntityType" /> и <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Возвращает список всех ключевых элементов для текущего типа сущности или связи.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, который представляет список ключевых элементов для текущего типа сущности или связи.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumMember">
      <summary>Представляет член перечисления.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>Возвращает вид этого типа.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Name">
      <summary>Получает имя данного члена перечисления.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EnumMember.ToString">
      <summary>Переопределение System.Object.ToString для получения лучшего строкового представления для данного типа.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Value">
      <summary>Получает значение данного члена перечисления.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumType">
      <summary>Представляет тип перечисления.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>Возвращает вид типа.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.IsFlags">
      <summary>Получает значение, указывающее, определен ли тип enum в виде флагов (т е могут рассматриваться как битовое поле)</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.Members">
      <summary>Получает коллекцию элементов перечисления для этого типа перечисления.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.UnderlyingType">
      <summary>Получает базовый тип для данного типа перечисления.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Facet">
      <summary>Предоставляет дополнительные сведения об элементах. В иерархии типов метаданных ADO.NET аспекты предоставляют дополнительные сведения о членах в соответствии с объявленным типом члена.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Description">
      <summary>Возвращает описание этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.FacetDescription" />, представляющий описание этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.FacetType">
      <summary>Возвращает тип этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.IsUnbounded">
      <summary>Возвращает значение, показывающее, является ли значения аспекта неограниченным.</summary>
      <returns>Значение <see langword="true" />, если значение аспекта не ограничено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Name">
      <summary>Возвращает имя этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Имя этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Facet.ToString">
      <summary>Возвращает имя этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Имя этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Value">
      <summary>Возвращает значение этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Значение этого аспекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FacetDescription">
      <summary>Задает описание аспекта.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Возвращает значение аспекта по умолчанию с этим описанием аспекта.</summary>
      <returns>Значение аспекта по умолчанию с этим описанием аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetName">
      <summary>Возвращает имя этого аспекта.</summary>
      <returns>Имя этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetType">
      <summary>Возвращает тип этого аспекта.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Возвращает значение, указывающее, является ли значение этого аспекта константой.</summary>
      <returns>
        <see langword="true" />, если этот аспект является константой; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Возвращает значение, указывающее, является ли этот аспект обязательным.</summary>
      <returns>
        <see langword="true" />, если этот аспект является обязательным; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Возвращает максимальное значение для этого аспекта.</summary>
      <returns>Максимальное значение для этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MinValue">
      <summary>Возвращает минимальное значение для этого аспекта.</summary>
      <returns>Минимальное значение для этого аспекта.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FacetDescription.ToString">
      <summary>Возвращает имя этого аспекта.</summary>
      <returns>Имя этого аспекта.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FunctionParameter">
      <summary>Описывает параметры <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Возвращает или задает функцию <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, в которой объявлен этот параметр.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, представляющий функцию, в которой объявлен этот параметр.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Mode">
      <summary>Получает режим данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.ParameterMode" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Name">
      <summary>Возвращает имя данной коллекции <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FunctionParameter.ToString">
      <summary>Возвращает имя <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип параметра, так и аспекты типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип параметра, так и аспекты типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.GlobalItem">
      <summary>Представляет базовый класс элементов для всех типов концептуальной модели и контейнеров сущностей.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ItemCollection">
      <summary>Базовый класс для классов <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />, <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> и <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />. Класс <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> является абстрактным и содержит основной API для загрузки и размещения метаданных, хранящихся в памяти. Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Возвращает модель данных, связанную с этой коллекцией элементов.</summary>
      <returns>Модель данных, связанная с этой коллекцией элементов.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <param name="functionCollection">Словарь функций.</param>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Коллекция типа ReadOnlyCollection, содержащая все функции с заданным именем.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <param name="functionName">Полное имя функции.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> по указанному идентификатору.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Элемент, заданный идентификатором.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> по указанному идентификатору. Возможен поиск с учетом регистра или без учета регистра.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Элемент, заданный идентификатором.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Возвращает все элементы указанного типа из этой коллекции элементов.</summary>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы указанного типа.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен в этой коллекции элементов.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данных, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данных, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей. Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="entityContainer">Если этот метод возвращает значение, он содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />. Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</param>
      <returns>
        <see langword="true" />, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей. Если контейнер сущностей отсутствует, выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="entityContainer">Если этот метод возвращает значение, он содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />. Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</param>
      <returns>
        <see langword="true" />, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> с использованием указанного идентификатора из этой коллекции элементов.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <param name="item">Если этот метод возвращает значение, выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />. При отсутствии глобального элемента с заданным идентификатором в коллекции элементов этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>
        <see langword="true" />, если существует элемент, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> с использованием указанного идентификатора из этой коллекции элементов.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="item">Если этот метод возвращает значение, выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />. При отсутствии глобального элемента с заданным идентификатором в коллекции элементов этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>
        <see langword="true" />, если существует элемент, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="type">Если этот метод возвращает значение, данный выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />. При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="type">Если этот метод возвращает значение, данный выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />. При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataItem">
      <summary>Представляет базовый класс элемента для всех метаданных в иерархии типов метаданных ADO.NET.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Возвращает вид встроенного типа для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.Documentation">
      <summary>Возвращает или задает документацию, связанную с этим типом.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.Documentation" />, представляющий документацию по этому типу.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)">
      <summary>Возвращает встроенный тип концептуальной модели, соответствующий одному из значений <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />.</summary>
      <param name="builtInTypeKind">Одно из значений перечисления <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий встроенный тип в модели EDM.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Возвращает список общих описаний аспектов для указанного типа.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, представляющий список общих описаний аспектов для указанного типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Возвращает список свойств текущего типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств текущего типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataProperty">
      <summary>Представляет атрибут метаданных для элемента в иерархии метаданных ADO.NET.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Name">
      <summary>Возвращает имя данной коллекции <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Имя <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Получает значение данного объекта <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</summary>
      <returns>Значение данной структуры <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />, так и аспекты типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />, так и аспекты типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Value">
      <summary>Получает значение данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Значение данной структуры <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataWorkspace">
      <summary>Представляет компонент службы среды выполнения метаданных ADO.NET, обеспечивающий поддержку извлечения метаданных из различных источников.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> с использованием указанных путей и сборок.</summary>
      <param name="paths">Пути к метаданным рабочей области.</param>
      <param name="assembliesToConsider">Имена сборок, используемых при создании рабочего пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Удаляет все записи из кэша метаданных.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>Создает <see cref="T:System.Data.Common.EntitySql.EntitySqlParser" />, настроенный для использования пространства данных <see cref="F:System.Data.Metadata.Edm.DataSpace.CSpace" />.</summary>
      <returns>Созданный объект синтаксического анализатора.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateQueryComm*******Tree(System.Data.Common.Comm*******Trees.DbExpression)">
      <summary>Создает новое дерево команд <see cref="T:System.Data.Common.Comm*******Trees.DbQueryComm*******Tree" />, привязанное к данной рабочей области метаданных и основанное на указанном выражении запроса.</summary>
      <param name="query">
        <see cref="T:System.Data.Common.Comm*******Trees.DbExpression" />, определяющий запрос.</param>
      <returns>Новый <see cref="T:System.Data.Common.Comm*******Trees.DbQueryComm*******Tree" /> с заданным выражением в качестве свойства <see cref="P:System.Data.Common.Comm*******Trees.DbQueryComm*******Tree.Query" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" />
      </exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, представляющий тип в пространстве объектов.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип в пространстве объектов.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени, имени пространства имен и модели данных.</summary>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем из указанного пространства имен и модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени, имени пространства имен и модели данных.</summary>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем из указанного пространства имен и модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Элемент, соответствующий указанному идентификатору в заданной модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Элемент, соответствующий указанному идентификатору в заданной модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>Получает элементы <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <param name="dataSpace">
        <see cref="T:System.Data.Metadata.Edm.DataSpace" />, из которого получаются элементы.</param>
      <returns>Элементы <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает все элементы в заданной модели данных.</summary>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы в заданной модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает все элементы в заданной модели данных.</summary>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы в заданной модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства, который совпадает с типом, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства, который совпадает с типом, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает список типов-примитивов в указанной модели данных.</summary>
      <param name="dataSpace">Модель данных, для которой необходим список типов-примитивов.</param>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все типы-примитивы в заданной модели данных.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>Возвращает члены данного <see cref="T:System.Data.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Metadata.Edm.EntityType" />, для которого требуются исходные значения при изменении сущности.</summary>
      <param name="entitySet">
        <see cref="T:System.Data.Metadata.Edm.EntitySet" /> принадлежащий C-Space.</param>
      <param name="entityType">Объект <see cref="T:System.Data.Metadata.Edm.EntityType" />, участвующий в заданном <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</param>
      <param name="partialUpdateSupported">
        <see langword="true" />, если сущности могут быть частично обновлены; в противном случае — значение <see langword="false" />.</param>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EdmMember" />, для которых требуется исходное значение.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>Возвращает элементы исходных значений из набора сущностей и типа сущности.</summary>
      <param name="entitySet">Набор сущностей, из которого извлекаются исходные значения.</param>
      <param name="entityType">Тип сущности, из которого извлекаются исходные значения.</param>
      <returns>Элементы исходных значений из набора сущностей и типа сущности.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип, который соответствует заданному имени типа и имени пространства имен в этой модели данных. Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="logLoadMessage">Делегат для ведения журнала сообщений о загрузке.</param>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Представляет собой наиболее новую версию модели EDM, поддерживаемую платформой времени выполнения Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>Регистрирует коллекцию элементов в каждой связанной с ней модели данных.</summary>
      <param name="collection">Коллекция выходных параметров, которую нужно заполнить.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент collection имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">В указанной модели данных уже зарегистрирована коллекция элементов.</exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EnumType" /> посредством параметра out <paramref name="edmSpaceType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, представляющий тип пространства объектов.</param>
      <param name="edmSpaceType">При возврате этого метода он содержит объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, который представляет <see cref="T:System.Data.Metadata.Edm.EdmType" />. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" /> в случае успеха, <see langword="false" /> в случае неудачи.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" /> посредством параметра out <paramref name="edmSpaceType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
      <param name="edmSpaceType">При возврате этого метода он содержит объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет <see cref="T:System.Data.Metadata.Edm.EdmType" />. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />. Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он возвращает первый контейнер сущностей. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />. Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он возвращает первый контейнер сущностей. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <param name="identity">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />. Этот параметр передается неинициализированным.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>
        <see langword="true" />, если существует элемент, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <param name="identity">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="space">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />. Этот параметр передается неинициализированным.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>
        <see langword="true" />, если существует элемент, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>Проверяет извлечение <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <param name="dataSpace">
        <see cref="T:System.Data.Metadata.Edm.DataSpace" />, из которого производится попытка извлечения <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">При возврате этого метода содержит коллекцию элементов. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если извлечение проведено успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EnumType" /> посредством параметра out <paramref name="objectSpaceType" />, представляющий тип, который совпадает с типом <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Когда выполнение этого метода завершается, содержит объект <see cref="T:System.Data.Metadata.Edm.EnumType" />, который представляет тип пространства объектов. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" /> посредством параметра out <paramref name="objectSpaceType" />, представляющий тип, который совпадает с типом <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Когда выполнение этого метода завершается, содержит объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, который представляет тип пространства объектов. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />. Этот параметр передается неинициализированным.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>Представляет переход от одного типа сущности к другому в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Возвращает последний элемент «начального» объекта связи для данного перемещения.</summary>
      <returns>Последний элемент «начального» объекта связи для данного перемещения.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Получает свойства внешнего ключа для свойства навигации, расположенного в зависимом элементе справочного ограничения.</summary>
      <returns>Коллекция свойств внешнего ключа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Возвращает тип связи, с которым работает данное свойство навигации.</summary>
      <returns>Тип связи, с которым работает данное свойство навигации.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Возвращает последний элемент «конечного» объекта связи для данного перемещения.</summary>
      <returns>Последний элемент «конечного» объекта связи для данного перемещения.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>Класс для представления коллекции элементов для слоя объектов. Большая часть реализации для фактического технического обслуживания коллекции выполняется в коллекции ItemCollection.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.EnumType)">
      <summary>Метод возвращает базовый тип среды CLR для указанного аргумента типа OSpace. Если DataSpace параметра имеет значение, отличное от OSpace, вызывается исключение ArgumentException.</summary>
      <param name="objectSpaceType">Искомый тип OSpace.</param>
      <returns>Тип среды CLR аргумента OSpace.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает тип CLR, соответствующий <see cref="T:System.Data.Metadata.Edm.StructuralType" />, переданному в параметре objectSpaceType.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
      <returns>Тип среды CLR аргумента OSpace.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Возвращает все элементы указанного типа из этой коллекции элементов.</summary>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все элементы заданного типа.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов типа-примитива.</summary>
      <returns>Коллекция объектов типа-примитива.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>Загружает метаданные из указанной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
      <param name="logLoadMessage">Делегат, которому отправляются сообщения журнала.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.EnumType,System.Type@)">
      <summary>Возвращает базовый тип среды CLR для указанного аргумента типа перечисления OSpace. Если DataSpace параметра имеет значение, отличное от OSpace, метод возвращает значение false и задает выходной параметр равным null.</summary>
      <param name="objectSpaceType">Тип перечисления OSpace для поиска</param>
      <param name="clrType">Тип enum среды CLR аргумента OSpace</param>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Возвращает тип CLR, соответствующий объекту <see cref="T:System.Data.Metadata.Edm.StructuralType" />, переданному в параметре objectSpaceType.</summary>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
      <param name="clrType">Тип CLR.</param>
      <returns>
        <see langword="true" />, если существует тип, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>Задает список возможных действий при удалении родительского члена <see langword="End" /> объекта <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>При удалении родительского члена <see langword="End" /> связанные с ним дочерние окончания также удаляются.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>Удалить можно только родительский член <see langword="End" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>Родительский член <see langword="End" /> удалить нельзя, если он содержит один или несколько связанных дочерних окончаний.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>Задает направление параметра.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>Входной параметр.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>Параметр, являющийся и входным, и выходным.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>Выходной параметр.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Возвращаемое значение метода.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>Указывает семантику типа, которая используется для разрешения перегрузок функций. Каждый поставщик хранения должен использовать эти флаги перечисления в файле манифеста поставщика для каждого определения функции.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Флаг, указывающий неявное преобразование между данными типами аргументов и формальными типами аргументов. Это тип преобразования по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Флаг, указывающий повышения типов между данными типами аргументов и формальными типами аргументов.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Флаг, задающий использование только строгой эквивалентности.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>Описывает типы-примитивы платформы .NET Framework и концептуальной модели, а также типы-примитивы, связанные с конкретными поставщиками хранилища.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Возвращает эквивалентный типу среды CLR тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. Следует отметить, что свойство <see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> всегда возвращает значение типа, не допускающего значений NULL.</summary>
      <returns>Объект <see cref="T:System.Type" />, который представляет эквивалентный типу среды CLR тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Возвращает список описаний аспектов для типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Возвращает эквивалент <see cref="T:System.Data.Metadata.Edm.EdmType" /> типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, который является эквивалентом типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, эквивалентный типу <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <param name="primitiveTypeKind">Значение типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, являющийся эквивалентом указанного типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Возвращает список типов-примитивов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов-примитивов.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Возвращает значение перечисления <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />, которое указывает тип-примитив <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />, которое указывает тип-примитив <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>Задает типы-примитивы, определенные в модели EDM.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Двоичный тип.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Логический тип.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Тип Byte.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Тип DateTime.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Тип DateTimeOffset.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Тип десятичного значения.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Тип Double.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Географический тип.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Тип географической коллекции.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Тип строки географической линии.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Тип строки множественных географических линий.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Тип множественных географических точек.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Тип множественных географических многоугольников.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Тип географической точки.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Тип географического многоугольника.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Геометрический тип.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Тип геометрической коллекции.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Тип строки геометрической линии.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Тип строки множественных геометрических линий.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Тип множественных геометрических точек.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Тип множественных геометрических многоугольников.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Тип геометрической точки.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Тип геометрического многоугольника.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Тип Guid.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Тип Int16.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Тип Int32.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Тип Int64.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Тип SByte.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Тип Single.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Строковый тип.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Тип Time.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>Задает типы атрибутов элемента в концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>Элемент перечисления, показывающий, что атрибут элемента имеет значение <c>Extended</c>.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>Элемент перечисления, показывающий, что атрибут элемента имеет значение <c>System</c>.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Представляет коллекцию членов в иерархии метаданных ADO.NET, предоставляя коллекцию с расширенными возможностями поиска, доступную только для чтения. Этот класс является производным от класса <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <typeparam name="T">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Определяет, содержит ли коллекция элемент с указанным идентификатором.</summary>
      <param name="identity">Идентификатор элемента.</param>
      <returns>
        <see langword="true" />, если коллекция содержит искомый элемент; в противном случае — <see langword="false" />. Значение по умолчанию – false.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Поддерживает простой итератор для коллекции <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Возвращает элемент в текущей позиции.</summary>
      <returns>Элемент в текущей позиции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Освобождает этот перечислитель.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Переходит к следующему элементу в коллекции с типом <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>
        <see langword="true" />, если перечислитель переместился в коллекции типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Помещает перечислитель перед первой позицией в коллекции с типом <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент в текущей позиции.</summary>
      <returns>Элемент в текущей позиции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель для просмотра этой коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />, который предназначен для просмотра этой коллекции <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <param name="identity">Идентификатор искомого элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <returns>Элемент из этой коллекции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Возвращает индекс указанного значения в этой коллекции.</summary>
      <param name="value">Искомое значение.</param>
      <returns>Индекс указанного значения в этой коллекции.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если данная коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Возвращает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <param name="identity">Идентификатор искомого элемента.</param>
      <returns>Элемент из этой коллекции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <param name="identity">Идентификатор искомого элемента.</param>
      <param name="ignoreCase">
        <see langword="true" /> для выполнения поиска без учета регистра; в противном случае — <see langword="false" />.</param>
      <param name="item">Если этот метод возвращает значение, данный выходной параметр содержит элемент из коллекции. Если искомый элемент отсутствует, этот выходной параметр содержит значение NULL.</param>
      <returns>
        <see langword="true" />, если существует элемент, соответствующий критериям поиска; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>Описывает справочные ограничения связей в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Возвращает список свойств для «исходной роли», на которой определено это ограничение <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для «исходной роли», на которой определено это ограничение <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Возвращает «исходную роль», участвующую в этом ограничении <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />, представляющий «исходную роль», участвующую в этом ограничении <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Получает список свойств для роли "к", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, которая содержит список свойств для роли "к", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Возвращает «целевую роль», участвующую в этом ограничении <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />, представляющий роль "к", которая принимает участие в данном <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Возвращает сочетание имен <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>Сочетание имен <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>Предоставляет адрес сущности для операций с этой сущностью. В схеме концептуальной модели невозможно явно определить <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>Возвращает тип сущности, на которую ссылается объект <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности, на которую ссылается <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>Определяет член <see langword="End" /> для <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Возвращает рабочие характеристики члена элемента связи.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.Metadata.Edm.OperationAction" />. Значение по умолчанию — <see cref="F:System.Data.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Обращается к типу сущности EntityType конечного элемента EndMember в ассоциации.</summary>
      <returns>Тип сущности EntityType конечного элемента EndMember в ассоциации.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Возвращает кратность члена элемента связи.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>Представляет сведения о кратности для элемента <see langword="End" /> типа отношения.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>Нижняя граница диапазона — ноль, а верхняя граница имеет значение NULL.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Нижняя граница диапазона — один, и верхняя граница — один.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>Нижняя граница диапазона — ноль, а верхняя граница — один.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>Представляет набор связей в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Возвращает тип связи для этого набора <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipType" />, представляющий тип связи для этого набора <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>Представляет базовый класс связей в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Возвращает список элементов для этого типа связи.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список элементов для этого типа связи.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>Описывает строку, например результат запроса. Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.StructuralType" />. Структура типа строки зависит от того, какие столбцы базы данных проецируются в запросе. Объект <see cref="T:System.Data.Metadata.Edm.RowType" /> может быть полезен в функциях концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>Базовый класс, который описывает типы-примитивы в концептуальной модели.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>Представляет перечисление, которое задает три параметра, показывающие, требует ли столбец в SSDL (язык определения структуры схемы) значение в ходе операций вставки и обновления. ADO.NET считывает значение столбца, а затем сохраняет его в кэше памяти.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Значение формируется как при вставке, так и при обновлении.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Значение формируется при вставке и остается неизменным после обновления.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>Значение, указывающее, что это свойство сформировано не сервером. Это значение по умолчанию.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>Загружает метаданные о модели хранения (базы данных). Класс <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> загружает метаданные из SSDL-файлов. Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, используя указанный XMLReader.</summary>
      <param name="xmlReaders">Средство чтения XML, использованное для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, используя указанные пути к файлам.</summary>
      <param name="filePaths">Пути к файлам, используемые для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, представляющий коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>Получает версию схемы хранилища для данной коллекции.</summary>
      <returns>Версия схемы коллекции для данной коллекции.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>Базовый тип для всех типов в концептуальной модели, имеющей члены.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>Возвращает список элементов для этого типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая набор элементов для этого типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>Описывает тип и список аспектов для этого типа.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Возвращает разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий разновидность встроенного типа для этой функции <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания двоичного типа с помощью указанных значений аспектов.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">
        <see langword="true" />, чтобы задать фиксированную длину двоичного типа; в противном случае — <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания двоичного типа с помощью указанных значений аспектов.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">
        <see langword="true" />, чтобы задать фиксированную длину двоичного типа; в противном случае — <see langword="false" />.</param>
      <param name="maxLength">Максимальная длина двоичного типа.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" /> типа, описанного параметрами.</summary>
      <param name="primitiveType">Простой тип, определяющий единицы измерения смещения.</param>
      <param name="precision">Точность значения <see cref="T:System.DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов. Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
      <returns>Объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" /> типа, описанного параметрами.</summary>
      <param name="primitiveType">Простой тип, определяющий единицы измерения для объекта <see cref="T:System.DateTime" />.</param>
      <param name="precision">Точность значения <see cref="T:System.DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов. Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
      <returns>Объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с помощью указанных значений аспектов.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="precision">Точность десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
      <param name="scale">Масштаб десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий десятичный тип с помощью указанных значений аспектов.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> с заданным типом концептуальной модели.</summary>
      <param name="edmType">Тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> со значениями аспектов по умолчанию для указанного типа <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания строкового типа с использованием заданных значений аспектов и неограниченного значения <see langword="MaxLength" />.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">
        <see langword="true" />, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — <see langword="false" />.</param>
      <param name="isFixedLength">Значение <see langword="true" />, чтобы задать фиксированную длину строкового типа; в противном случае — значение <see langword="false" /></param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий строковый тип с помощью указанных значений аспектов и неограниченного параметра <see langword="MaxLength" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания строкового типа с помощью указанных значений аспектов.</summary>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">
        <see langword="true" />, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — <see langword="false" />.</param>
      <param name="isFixedLength">
        <see langword="true" />, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — <see langword="false" />.</param>
      <param name="maxLength">
        <see langword="true" />, чтобы задать фиксированную длину строкового типа; в противном случае — <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий строковый тип с помощью указанных значений аспектов.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" /> типа, описанного параметрами.</summary>
      <param name="primitiveType">Простой тип, определяющий единицы измерения для объекта <see cref="T:System.DateTime" />.</param>
      <param name="precision">Точность значения <see cref="T:System.DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов. Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
      <returns>Объект <see cref="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time" /><see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>Возвращает сведения о типе, описанные в этой сущности <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий сведения о типе, описанные в этой сущности <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>Возвращает список аспектов для типа, который описан этой сущностью <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список аспектов для типа, описанного этой сущностью <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Проверяет, является ли этот объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> подтипом указанного типа <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <param name="typeUsage">Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для проверки.</param>
      <returns>
        <see langword="true" />, если данный <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> является подтипом указанного <see cref="T:System.Data.Metadata.Edm.TypeUsage" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>Возвращает полное имя типа, описанного в этой сущности <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Полное имя типа, описанного данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, в виде строки.</returns>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>Исключение, возникающее при сбое запросов метаданных связанной службы.</summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> сообщением по умолчанию.</summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> указанным сообщением.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> указанным сообщением и внутренним исключением.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Исключение, вызвавшее данное исключение <see cref="T:System.Data.MetadataException" />.</param>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>Исключение, возникающее при отсутствии объекта.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.ObjectNotFoundException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.ObjectNotFoundException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>Представляет кэшируемый запрос LINQ to Entities.</summary>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`10" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`11" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`12" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg11" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`13" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg11" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg12" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`14" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg11" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg12" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg13" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`15" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg11" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg12" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg13" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg14" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`16" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg8" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg9" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg10" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg11" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg12" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg13" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg14" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg15">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg15" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`17" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`2" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`3" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`4" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`5" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`6" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`7" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`8" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg2" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg3" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg4" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg5" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg6" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который передается при выполнении делегата, возвращенного этим методом. <typeparamref name="TArg7" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип результатов запроса, возвращаемых путем выполнения делегата, возвращаемого <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> метод.</typeparam>
      <returns>
        <see cref="T:System.Func`9" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>Предоставляет доступ к текущим значениям данных объекта.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>Базовый класс для сложных типов.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства сложного объекта.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении свойства сложного объекта.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> — <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Атрибут, указывающий, что свойство представляет сложное свойство.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Атрибут, указывающий, что класс представляет сложный тип.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Атрибут, указывающий, что класс представляет тип сущности.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>Атрибут, указывающий тип перечисления.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса EdmEnumTypeAttribute.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Атрибут, указывающий при применении к методу, что метод является прокси-методом для функции в концептуальной модели или модели хранения.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" />.</summary>
      <param name="namespaceName">Пространство имен сопоставляемой функции.</param>
      <param name="functionName">Имя сопоставляемой функции.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>Имя сопоставляемой функции.</summary>
      <returns>Имя сопоставляемой функции.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>Пространство имен сопоставляемой функции.</summary>
      <returns>Пространство имен сопоставляемой функции.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Базовый класс для атрибутов, указывающих сопоставление свойств типов на уровне объектов со свойствами типов сущностей или сложных типов в концептуальной модели.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Задает связь между двумя типами сущностей на основе ассоциации в концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность.</param>
      <param name="role1Name">Имя роли для типа одного из элементов ассоциации.</param>
      <param name="role1Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее кратность одного из элементов ассоциации, например «один» или «много».</param>
      <param name="role1Type">Тип сущности, представляющей собой один из элементов ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого элемента ассоциации.</param>
      <param name="role2Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее кратность второго элемента ассоциации, например «один» или «много».</param>
      <param name="role2Type">Тип сущности, представляющей собой другой элемент ассоциации.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность.</param>
      <param name="role1Name">Имя роли для типа одного из элементов ассоциации.</param>
      <param name="role1Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее кратность одного из элементов ассоциации, например «один» или «много».</param>
      <param name="role1Type">Тип сущности, представляющей собой один из элементов ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого элемента ассоциации.</param>
      <param name="role2Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее кратность второго элемента ассоциации, например «один» или «много».</param>
      <param name="role2Type">Тип сущности, представляющей собой другой элемент ассоциации.</param>
      <param name="isForeignKey">Значение, указывающее на то, основывается ли отношение на значении внешнего ключа.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Получает логическое значение, указывающее, основывается ли связь на значении внешнего ключа.</summary>
      <returns>Значение <see langword="true" />, если связь основана на значении внешнего ключа; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Имя связи.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя связи, заданной этим атрибутом <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Пространство имен данной связи.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя пространства имен данной связи.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Кратность на одном конце связи.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, показывающее кратность.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Имя роли для одного из элементов связи.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Тип сущности одного из элементов связи.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой один из элементов ассоциации.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Кратность на другом конце связи.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, показывающее кратность.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Имя роли для второго элемента связи.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Тип сущности другого элемента связи.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой второй элемент ассоциации.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Атрибут, который указывает, что свойство является свойством навигации.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен свойства связи.</param>
      <param name="relationshipName">Имя связи. В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя роли для другого окончания отношения.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Возвращает неполное имя связи.</summary>
      <returns>Имя связи.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Имя пространства имен свойства навигации.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Получает имя роли для другого окончания отношения.</summary>
      <returns>Имя целевой роли задается атрибутом <see langword="Role" /> другого элемента <see langword="End" /> ассоциации, которая определяет отношение в концептуальной модели. Дополнительные сведения см. в разделе Элемент Association (CSDL).</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Атрибут, который указывает, что свойство является скалярным.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Получает или задает значение, которое указывает, является ли свойство частью ключа сущности.</summary>
      <returns>Значение, которое указывает, является ли свойство частью ключа сущности.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Получает или задает значение, которое указывает, может ли свойство иметь значение <see langword="null" />.</summary>
      <returns>Значение, которое указывает, может ли свойство иметь значение <see langword="null" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Атрибут, указывающий, что сборка содержит классы, которые сопоставлены с типами сущностей в концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> с уникальным значением для каждой модели, упоминаемой в сборке.</summary>
      <param name="assemblyGuid">Строка, являющаяся уникальным значением идентификатора GUID для модели в сборке.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>Базовый класс для атрибутов, определяющих, как типы на уровне объектов сопоставляются с типами сущностей и сложными типами в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Имя типа в концептуальной схеме, сопоставляемого с классом, к которому применен этот атрибут.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Имя пространства имен типа объекта сущности или сложного типа в концептуальной схеме, которая сопоставляется с этим типом.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>Представляет коллекцию объектов, образующих элемент связи «многие».</summary>
      <typeparam name="TEntity">Тип сущности коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Добавляет объект в коллекцию.</summary>
      <param name="entity">Объект для добавления в коллекцию. <paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Определяет связь между двумя присоединенными объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект <paramref name="entity" /> не может быть связан с исходным объектом. Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.  
-или- 
Если объект имеет значение <see langword="null" /> либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет связи между объектом и коллекцией связанных объектов в контексте объекта.</summary>
      <param name="entities">Коллекция объектов в контексте объекта, которые связаны с исходным объектом.</param>
      <exception cref="T:System.ArgumentNullException">Коллекция <paramref name="entities" /> равна <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный объект или объект в коллекции <paramref name="entities" /> имеет значение <see langword="null" /> либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.  
-или- 
Не удается определить связь на основании метаданных модели EDM. Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Удаляет все сущности из коллекции.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Определяет, существует ли в коллекции указанный объект.</summary>
      <param name="entity">Объект для поиска в <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <returns>Значение <see langword="true" />, если объект найден в коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует все содержимое коллекции в массив, начиная с указанного индекса в массиве назначения.</summary>
      <param name="array">Массив для копирования данных.</param>
      <param name="arrayIndex">Индекс (отсчет с нуля) в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Возвращает число объектов, содержащихся в коллекции.</summary>
      <returns>Число элементов, содержащихся в <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Возвращает запрос объектов, в результате выполнения которого возвращается набор объектов, существующих в текущей коллекции.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий коллекцию сущностей.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  
-или- 
Если объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" /> с параметром <see cref="T:System.Data.Objects.MergeOption" />, отличным от <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель, используемый для прохода по объектам в коллекции.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" />, проходящий по набору значений, помещенных в кэш коллекцией <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> доступной только для чтения.</summary>
      <returns>Всегда возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанные объекты в коллекцию, используя заданный параметр слияния.</summary>
      <param name="mergeOption">Задает порядок слияния объектов в этой коллекции с объектами, которые могли быть возвращены предыдущими запросами того же контекста <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности.</summary>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для сериализации объектов сущности.</summary>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Удаляет объект из коллекции и помечает связь к удалению.</summary>
      <param name="entity">Объект, который должен быть удален из коллекции.</param>
      <returns>
        <see langword="true" />, если элемент был успешно удален; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Объект <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Объект <paramref name="entity" /> не присоединен к тому же контексту объекта.  
-или- 
У объекта <paramref name="entity" /> нет допустимого диспетчера связей.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для прохода по набору значений, помещенных в кэш коллекцией <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" />, проходящий по набору значений, помещенных в кэш коллекцией <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение, показывающее, содержит ли коллекция связанных сущностей объекты-коллекции.</summary>
      <returns>Это свойство всегда возвращает значение <see langword="false" />, поскольку коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> содержит объекты, а не коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде интерфейса <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>Базовый класс для типов сущностей, создаваемых средствами модели EDM.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EntityObject" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Возвращает или задает ключ для этого объекта.</summary>
      <returns>Ключ <see cref="T:System.Data.EntityKey" /> для этого объекта.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>Возвращает состояние сущности объекта.</summary>
      <returns>Состояние <see cref="T:System.Data.EntityState" /> этого объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об отложенном изменении свойства.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Указывает экземпляр <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, который используется, чтобы сообщать об изменениях свойств.</summary>
      <param name="changeTracker">Ссылка на объект отслеживания изменений, который используется, чтобы сообщать об изменениях свойств.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Возвращает диспетчер связей, используемый этим объектом.</summary>
      <returns>Диспетчер <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый этим объектом.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>Базовый класс, реализующий специализированные функции для <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Возвращает ключ для связанного объекта.</summary>
      <returns>Объект <see cref="T:System.Data.EntityKey" />, который является ключом для связанного объекта.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>Представляет связанный элемент ассоциации, имеющий кратность 0 или 1.</summary>
      <typeparam name="TEntity">Тип сущности ссылки.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Создает связь «многие к одному» или «один к одному» между двумя объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект <paramref name="entity" /> не может быть связан с текущим связанным элементом. Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Создает эквивалентный запрос объектов, возвращающий связанный объект.</summary>
      <returns>Запрос <see cref="T:System.Data.Objects.ObjectQuery`1" />, возвращающий связанный объект.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  
-или- 
Если объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" /> с параметром <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" />, отличным от <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанный объект для этого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> с указанным параметром слияния.</summary>
      <param name="mergeOption">Определяет, как должен происходит возврат объекта, если он уже существует в контексте объекта <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">Источник <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> имеет значение <see langword="null" />.  
-или- 
Запрос возвращает больше одного связанного элемента.  
-или- 
Запрос возвращает нулевое количество связанных элементов, хотя ожидался возврат одного связанного элемента.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренне для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренне для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>Возвращает или задает связанный объект, возвращаемый этим объектом <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
      <returns>Объект, возвращаемый этим объектом <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>Определяет средства, используемые службами объектов для отслеживания изменений свойств объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства сложного типа.</summary>
      <param name="entityMemberName">Имя измененного сложного свойства типа сущности.</param>
      <param name="complexObject">Сложный тип, содержащий измененное свойство.</param>
      <param name="complexObjectMemberName">Имя измененного свойства сложного типа.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Уведомляет объект отслеживания изменений об отложенном изменении сложного свойства.</summary>
      <param name="entityMemberName">Имя изменяемого свойства сущности верхнего уровня.</param>
      <param name="complexObject">Сложный тип, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного типа.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства типа сущности.</summary>
      <param name="entityMemberName">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении свойства типа сущности.</summary>
      <param name="entityMemberName">Имя изменяемого свойства.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Возвращает текущее состояние отслеживаемого объекта.</summary>
      <returns>Свойство <see cref="T:System.Data.EntityState" />, являющееся состоянием отслеживаемого объекта.  
Дополнительные сведения см. в разделе разрешение идентичности, управление состоянием и отслеживание изменений и отслеживание изменений в сущностях POCO.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Определяет тип сущности, реализующей отслеживание изменений.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Возвращает или задает интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, используемый для формирования сообщений об изменениях.</summary>
      <param name="changeTracker">Интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, используемый для формирования сообщений об изменениях.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>Определяет тип сущности, предоставляющей ключ сущности.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Возвращает или задает ключ <see cref="T:System.Data.EntityKey" /> для экземпляров типов сущностей, реализующих этот интерфейс.</summary>
      <returns>
        <see cref="T:System.Data.EntityKey" /> для экземпляров типов сущностей, реализующих этот интерфейс.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>Определяет тип сущности со связью с одним или несколькими другими типами сущности.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Возвращает диспетчер связей, который управляет связями экземпляра типа сущности.</summary>
      <returns>Диспетчер связей <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для этой сущности.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>Определяет окончание отношения.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет объект в связанное окончание.</summary>
      <param name="entity">Объект, добавляемый в коллекцию. <paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Добавляет объект в связанное окончание.</summary>
      <param name="entity">Объект, добавляемый в коллекцию.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Определяет отношение между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект. <paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Определяет отношение между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному окончанию.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному окончанию.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, выполняющий перебор коллекции связанных объектов.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, выполняющий итерацию коллекции связанных объектов.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Получает значение, показывающее, все ли связанные объекты загружены.</summary>
      <returns>Значение <see langword="true" />, если связанное окончание содержит все связанные сущности из базы данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Загружает связанный объект или объекты в это связанное окончание с параметром слияния по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанный объект или объекты в связанное окончание с указанным параметром слияния.</summary>
      <param name="mergeOption">Объект <see cref="T:System.Data.Objects.MergeOption" />, используемый при слиянии объектов в существующую коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Получает имя отношения, в котором участвует данное связанное окончание.</summary>
      <returns>Имя отношения, в котором участвует данный <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />. Имя отношения не содержит пространства имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Возвращает ссылку на метаданные для связанного окончания.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, который содержит метаданные для окончания отношения.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет объект из коллекции объектов связанного окончания.</summary>
      <param name="entity">Объект, удаляемый из коллекции. <paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <returns>Значение <see langword="true" />, если сущность <paramref name="entity" /> успешно удалена, значение <see langword="false" />, если сущность <paramref name="entity" />не входила в <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Удаляет объект из коллекции объектов связанного окончания.</summary>
      <param name="entity">Объект, удаляемый из коллекции.</param>
      <returns>Значение <see langword="true" />, если сущность <paramref name="entity" /> успешно удалена; значение <see langword="false" />, если сущность <paramref name="entity" />не входила в <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Получает имя роли в исходном окончании отношения.</summary>
      <returns>Имя роли в исходном окончании отношения.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Получает имя роли в целевом окончании отношения.</summary>
      <returns>Имя роли в целевом окончании отношения.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>Представляет базовый класс, реализующий общие функции для связанного окончания.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Происходит, если изменяется связанный элемент.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerator" />, проходящий по коллекции связанных объектов.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, выполняющий итерацию коллекции связанных объектов.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Возвращает значение, показывающее, все ли связанные объекты загружены.</summary>
      <returns>Значение <see langword="true" />, если связанное окончание содержит все связанные объекты из базы данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>В случае переопределения в производном классе загружает связанный объект или объекты в связанный элемент с параметром слияния по умолчанию.</summary>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с помощью запроса <see cref="F:System.Data.Objects.MergeOption.NoTracking" />, а параметр <see cref="T:System.Data.Objects.MergeOption" /> отличен от <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены.  
-или- 
Если исходный объект не присоединен к <see cref="T:System.Data.Objects.ObjectContext" />.  
-или- 
Если исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />, либо параметр <see cref="T:System.Data.Objects.MergeOption" />, используемый для <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" />, имеет значение <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Этот метод, переопределенный в производном классе, загружает объекты из связанного элемента с заданным параметром слияния.</summary>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Objects.MergeOption" />, используемый для слияния объектов в существующую коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с помощью запроса <see cref="F:System.Data.Objects.MergeOption.NoTracking" />, а параметр <see cref="T:System.Data.Objects.MergeOption" /> отличен от <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены.  
-или- 
Если исходный объект не присоединен к <see cref="T:System.Data.Objects.ObjectContext" />.  
-или- 
Если исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />, либо параметр <see cref="T:System.Data.Objects.MergeOption" />, используемый для <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" />, имеет значение <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности вместе с экземплярами <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Возвращает имя связи, в которой участвует этот связанный элемент.</summary>
      <returns>Имя связи, в которой участвует этот элемент <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" />. В имени связи не указано пространство имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Получает ссылку на метаданные для связанного окончания.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, который содержит метаданные для окончания отношения.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Возвращает имя роли в исходном элементе связи.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет объект в связанный элемент.</summary>
      <param name="entity">Объект для добавления в коллекцию. В этом объекте должен реализовываться интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Добавляет объект в связанный элемент.</summary>
      <param name="entity">Экземпляр сущности для добавления в связанное окончание.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Присоединяет объект к связанному элементу.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Присоединяет объект к связанному окончанию.</summary>
      <param name="entity">Экземпляр сущности для присоединения к связанному окончанию.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному элементу.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному элементу.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет объект из связанного элемента коллекции.</summary>
      <param name="entity">Экземпляр сущности для удаления из коллекции.</param>
      <returns>Значение, указывающее, удален ли объект.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Удаляет объект из связанного окончания, если объект является его частью.</summary>
      <param name="entity">Экземпляр сущности для удаления из связанного окончания.</param>
      <returns>Значение <see langword="true" />, если сущность успешно удалена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Возвращает имя роли в целевом элементе связи.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>Перечисляет типы связей между двумя или более сущностями.</summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>Связь определяется ассоциацией в концептуальной модели. Дополнительные сведения см. в разделе Элемент Association (CSDL).</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>Отслеживает связи между объектами в контексте объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Создает новый объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="owner">Ссылка на сущность, вызывающую этот метод.</param>
      <returns>Запрошенный <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Возвращает перечисление всех связанных элементов, управляемых диспетчером связей.</summary>
      <returns>Перечисление <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов, реализующих <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />. Возвращается пустое перечисление, если связи еще не заполнены.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> связанных объектов с заданными именем связи и целевой роли.</summary>
      <param name="relationshipName">Имя связи для навигации. В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя целевой роли для навигации. Показывает направление перемещения по связи.</param>
      <typeparam name="TTargetEntity">Тип возвращаемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <returns>Коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> связанных объектов.</returns>
      <exception cref="T:System.InvalidOperationException">Указанная роль вернула ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> вместо коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> или <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> правильного типа для указанной целевой роли в связи.</summary>
      <param name="relationshipName">Имя отношения, в котором определено имя <paramref name="targetRoleName" />. В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Целевая роль для получения другого окончания <paramref name="relationshipName" />.</param>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />, представляющий полученную коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> или ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="relationshipName" /> или <paramref name="targetRoleName" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный тип не соответствует типу владельца.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetRoleName" /> недопустим.  
-или- 
не удалось найти тип связи в метаданных.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Возвращает ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> для связанного объекта, используя заданное сочетание имени связи и целевой роли.</summary>
      <param name="relationshipName">Имя связи для навигации. В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя целевой роли для навигации. Показывает направление перемещения по связи.</param>
      <typeparam name="TTargetEntity">Тип возвращаемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <returns>Ссылка <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> связанного объекта.</returns>
      <exception cref="T:System.InvalidOperationException">Указанная роль вернула ссылку <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> вместо коллекции <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>Инициализирует существующий объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />, который был создан конструктором по умолчанию.</summary>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли связанного элемента.</param>
      <param name="entityCollection">Объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> для инициализации.</param>
      <typeparam name="TTargetEntity">Тип инициализируемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Если переданный объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> уже инициализирован.  
-или- 
Если диспетчер связей уже присоединен к контексту <see cref="T:System.Data.Objects.ObjectContext" />.  
-или- 
Если диспетчер связей уже содержит связь с таким именем и целевой ролью.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>Инициализирует существующий объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />, который был создан конструктором по умолчанию.</summary>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли связанного элемента.</param>
      <param name="entityReference">Объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> для инициализации.</param>
      <typeparam name="TTargetEntity">Тип инициализируемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Если переданный объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> уже инициализирован.  
-или- 
Если диспетчер связей уже присоединен к контексту <see cref="T:System.Data.Objects.ObjectContext" />.  
-или- 
Если диспетчер связей уже содержит связь с таким именем и целевой ролью.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности вместе с экземплярами <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вызывается службами объектов для подготовки <see cref="T:System.Data.EntityKey" /> к двоичной сериализации с сериализованной связью.</summary>
      <param name="context">Описывает источник и назначение заданного потока сериализации и обеспечивает дополнительный контекст, определяемый вызывающим объектом.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>Представляет класс, который содержит общие методы, необходимые для объекта даты.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.StructuralObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Определяет, содержат ли указанные байтовые массивы одинаковые значения.</summary>
      <param name="first">Значение первого байтового массива, подлежащего сравнению.</param>
      <param name="second">Второй байтовый массив для сравнения.</param>
      <returns>Значение равно <see langword="true" />, если оба массива имеют одинаковую длину и содержат одинаковые байтовые значения, или же если оба массива имеют значение <see langword="null" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Возвращает минимальное значение даты и времени, поддерживаемое источником данных.</summary>
      <returns>Значение <see cref="T:System.DateTime" />, представляющее собой минимальное значение даты и времени, поддерживаемое источником данных.</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Имя этой константы используется для отслеживания.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Возвращает копию значения текущего байта.</summary>
      <param name="currentValue">Текущее значение массива байт.</param>
      <returns>Копия текущего значения <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Возвращает сложный тип для указанного свойства.</summary>
      <param name="currentValue">Сложный объект, который наследуется от сложного объекта.</param>
      <param name="property">Имя сложного свойства, представляющего собой сложный объект.</param>
      <param name="isNullable">Указывает, допускает ли тип значения NULL.</param>
      <param name="isInitialized">Указывает, является ли тип инициализированным.</param>
      <typeparam name="T">Тип запрашиваемого сложного объекта.</typeparam>
      <returns>Объект сложного типа для свойства.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" />.</summary>
      <param name="property">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" />.</summary>
      <param name="property">Имя изменяемого свойства.</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Происходит при изменении значения свойства.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Происходит, если изменение значения свойства находится на этапе выполнения.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>Создает событие, которое используется для передачи сообщения об изменении свойства.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="property" /> пуст.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>Создает событие, которое используется для передачи сообщения о том, что изменение свойства отложено.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Гарантирует, что значение <see cref="T:System.Boolean" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Логическое значение.</param>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Boolean" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Логическое значение.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Гарантирует, что значение <see cref="T:System.Byte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Проверяемое значение.</param>
      <returns>Установленное значение <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Byte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Byte" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Заданный объект <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Гарантирует, что значение <see cref="System.Byte[]" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Задаваемое значение.</param>
      <param name="isNullable">Указывает, допускает ли свойство значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Если значение NULL указано для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>Гарантирует, что значение массива <see cref="T:System.Byte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение, передаваемое в метод присвоения свойства.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Проверяемое значение <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Если значение NULL указано для свойства, не допускающего значения NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Значение <see cref="T:System.Data.Spatial.DbGeography" /> для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <returns>Задаваемое значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Значение равно NULL для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Значение <see cref="T:System.Data.Spatial.DbGeography" /> для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Значение равно NULL для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Значение <see cref="T:System.Data.Spatial.DbGeometry" /> для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <returns>Задаваемое значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Значение равно NULL для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Значение <see cref="T:System.Data.Spatial.DbGeometry" /> для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Значение равно NULL для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTime" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTime" />.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTime" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTime" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTimeOffset" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTimeOffset" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Гарантирует, что значение <see cref="T:System.Decimal" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Decimal" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Decimal" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Decimal" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Гарантирует, что значение <see cref="T:System.Double" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Double" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Double" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Double" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Гарантирует, что значение <see cref="T:System.Guid" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Guid" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Guid" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Guid" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Гарантирует, что значение <see cref="T:System.Int16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int16" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int16" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Гарантирует, что значение <see cref="T:System.Int32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int32" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int32" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Гарантирует, что значение <see cref="T:System.Int64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int64" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int64" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Гарантирует, что значение <see cref="T:System.Boolean" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Boolean" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Boolean" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Boolean" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Гарантирует, что значение <see cref="T:System.Byte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Byte" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Byte" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Byte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Byte" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Byte" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Гарантирует, что значение <see cref="T:System.DateTime" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTime" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTime" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTime" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Гарантирует, что значение <see cref="T:System.DateTimeOffset" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.DateTimeOffset" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Гарантирует, что значение <see cref="T:System.Decimal" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Decimal" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Decimal" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Decimal" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Гарантирует, что значение <see cref="T:System.Double" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Double" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Double" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Double" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Double" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Double" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Гарантирует, что значение <see cref="T:System.Guid" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Guid" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Guid" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Guid" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Guid" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Guid" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Гарантирует, что значение <see cref="T:System.Int16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int16" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Int16" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int16" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int16" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Гарантирует, что значение <see cref="T:System.Int32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int32" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Int32" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int32" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int32" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Гарантирует, что значение <see cref="T:System.Int64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int64" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Int64" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Int64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Int64" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Int64" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Гарантирует, что значение <see cref="T:System.SByte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.SByte" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.SByte" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.SByte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.SByte" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.SByte" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Гарантирует, что значение <see cref="T:System.Single" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Single" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.Single" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.Single" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Single" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Single" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Гарантирует, что значение <see cref="T:System.TimeSpan" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.TimeSpan" />, допускающее значение NULL.</param>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.TimeSpan" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.TimeSpan" />, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Гарантирует, что значение UInt16, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt16, допускающее значение NULL.</param>
      <returns>Задаваемое значение UInt16, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>Гарантирует, что значение UInt16, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt16, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение UInt16, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Гарантирует, что значение UInt32, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt32, допускающее значение NULL.</param>
      <returns>Задаваемое значение UInt32, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>Гарантирует, что значение UInt32, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt32, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение UInt32, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Гарантирует, что значение <see cref="T:System.UInt64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt64, допускающее значение NULL.</param>
      <returns>Задаваемое значение UInt64, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение UInt64, допускающее значение NULL.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение UInt64, допускающее значение NULL.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Гарантирует, что значение <see cref="T:System.SByte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.SByte" />.</param>
      <returns>Задаваемое значение <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.SByte" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.SByte" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Гарантирует, что значение Single, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Single" />.</param>
      <returns>Задаваемое значение <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>Гарантирует, что значение Single, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.Single" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Строковое значение для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <returns>Проверенное значение <see cref="T:System.String" />.</returns>
      <exception cref="T:System.Data.ConstraintException">Если значение NULL указано для свойства, не допускающего значение NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>Проверяет, отличается ли значение свойства от значения null, и вызывает исключение, если его значение — null.</summary>
      <param name="value">Строковое значение для проверки.</param>
      <param name="isNullable">Флаг, указывающий, разрешается ли этому свойству принимать значение null.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Проверенное свойство.</returns>
      <exception cref="T:System.Data.ConstraintException">Строковое значение NULL указано для строки, не допускающей значения NULL.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Гарантирует, что значение <see cref="T:System.TimeSpan" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.TimeSpan" />.</param>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.TimeSpan" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.TimeSpan" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt16" />.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt16" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt16" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt32" />.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt32" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt32" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt64" />.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>Гарантирует, что значение <see cref="T:System.UInt64" />, устанавливаемое для свойства, допустимо.</summary>
      <param name="value">Значение <see cref="T:System.UInt64" />.</param>
      <param name="propertyName">Имя свойства, которое проверяется в данный момент.</param>
      <returns>Задаваемое значение <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Задает сложный объект для указанного свойства.</summary>
      <param name="oldValue">Первоначальный сложный объект для этого свойства, если он существует.</param>
      <param name="newValue">Задаваемый сложный объект.</param>
      <param name="property">Сложное свойство, которое задается для сложного объекта.</param>
      <typeparam name="T">Тип заменяемого объекта.</typeparam>
      <returns>Сложный тип, наследуемый от сложного объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Проверяет, не содержит ли сложный объект значение <see langword="null" />.</summary>
      <param name="complexObject">Сложный объект, подлежащий проверке.</param>
      <param name="propertyName">Сложное свойство родительского объекта, связанного с объектом <paramref name="complexObject" />.</param>
      <typeparam name="TComplex">Тип проверяемого сложного объекта.</typeparam>
      <returns>Проверяемый сложный объект.</returns>
      <exception cref="T:System.Data.ConstraintException">Если сложный тип имеет значение NULL.</exception>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>Предоставляет доступ к исходным значениям данных объекта. <see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> реализует методы, позволяющие обновлять исходные значения объекта.</summary>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Возвращает сведения о записи данных.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Получает количество полей в записи.</summary>
      <returns>Целочисленное значение, представляющее число полей.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Получает значение поля типа Boolean.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля типа Boolean.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Получает значение поля как тип <see langword="byte" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see langword="byte" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Извлекает значение поля в виде массива <see langword="byte" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число байт для копирования.</param>
      <returns>Скопированное число байт.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Получает значение поля как тип <see langword="char" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see langword="char" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Извлекает значение поля в виде массива <see langword="char" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число символов для копирования.</param>
      <returns>Число скопированных символов.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <param name="i">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see cref="T:System.Data.Common.DbDataReader" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Получает значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Получает имя типа данных поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Имя типа данных поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.DateTime" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see cref="T:System.Data.Common.DbDataReader" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Получает значение поля как тип <see langword="decimal" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see langword="decimal" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Получает значение поля как тип <see langword="double" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see langword="double" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Получает тип поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Тип поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Получает значение поля как тип <see langword="float" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see langword="float" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Guid" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля как тип <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int16" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля типа <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int32" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля типа <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int64" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля типа <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Получает имя поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Имя поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Извлекает порядковый номер поля с использованием имени поля.</summary>
      <param name="name">Имя поля.</param>
      <returns>Порядковый номер поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Возвращает значение поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Получает значение поля типа string.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Возвращает значение поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями полей текущей записи.</summary>
      <param name="values">Массив объектов для хранения значений полей.</param>
      <returns>Число возвращенных значений полей.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Возвращает логическое значение, показывающее, имеет ли указанное поле значение <see cref="T:System.DBNull" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение <see langword="true" />, если поле имеет значение <see cref="T:System.DBNull" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Возвращает значение с заданным порядковым номером поля.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение с заданным порядковым номером поля.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Получает значение с заданным именем поля.</summary>
      <param name="name">Имя поля.</param>
      <returns>Значение поля.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Задает для поля значение <see cref="T:System.DBNull" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Задает значения полей в записи.</summary>
      <param name="values">Значения поля.</param>
      <returns>Число полей, для которых были заданы значения.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Data.IDataReader" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <returns>Значение поля типа <see cref="T:System.Data.IDataReader" />.</returns>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>Предоставляет методы среды CLR, обеспечивающие канонические функции концептуальной модели в запросах LINQ to Entities. Сведения о канонических функциях см. в разделе Канонические функции.</summary>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddDays" />. Сведения о канонической функции <see langword="AddDays" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число дней для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddDays" />. Сведения о канонической функции <see langword="AddDays" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число дней для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddHours" />. Сведения о канонической функции <see langword="AddHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddHours" />. Сведения о канонической функции <see langword="AddHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddHours" />. Сведения о канонической функции <see langword="AddHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMicroseconds" />. Сведения о канонической функции <see langword="AddMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMicroseconds" />. Сведения о канонической функции <see langword="AddMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMicroseconds" />. Сведения о канонической функции <see langword="AddMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMilliseconds" />. Сведения о канонической функции <see langword="AddMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMilliseconds" />. Сведения о канонической функции <see langword="AddMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMilliseconds" />. Сведения о канонической функции <see langword="AddMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMinutes" />. Сведения о канонической функции <see langword="AddMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMinutes" />. Сведения о канонической функции <see langword="AddMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMinutes" />. Сведения о канонической функции <see langword="AddMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMonths" />. Сведения о канонической функции <see langword="AddMonths" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число месяцев для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddMonths" />. Сведения о канонической функции <see langword="AddMonths" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число месяцев для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddNanoseconds" />. Сведения о канонической функции <see langword="AddNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddNanoseconds" />. Сведения о канонической функции <see langword="AddNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddNanoseconds" />. Сведения о канонической функции <see langword="AddNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddSeconds" />. Сведения о канонической функции <see langword="AddSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddSeconds" />. Сведения о канонической функции <see langword="AddSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddSeconds" />. Сведения о канонической функции <see langword="AddSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddYears" />. Сведения о канонической функции <see langword="AddYears" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число лет для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="AddYears" />. Сведения о канонической функции <see langword="AddYears" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число лет для добавления к значению <paramref name="dateValue" />.</param>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>Оператор LINQ to Entities, который обрабатывает входную строку в качестве строки, кодировка которой отлична от Юникода. Этот метод применяется только к запросам LINQ to Entities.</summary>
      <param name="value">Входная строка.</param>
      <returns>Строка, кодировка которой отлична от Юникода.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>Оператор LINQ to Entities, который обеспечивает обработку входной строки в качестве строки, кодировка которой отлична от Юникода. Этот метод применяется только к запросам LINQ to Entities.</summary>
      <param name="value">Входная строка.</param>
      <returns>Строка Юникода.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="CreateDateTime" />. Сведения о канонической функции <see langword="CreateDateTime" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="year">Часть новой даты, содержащая год.</param>
      <param name="month">Часть новой даты, содержащая месяц.</param>
      <param name="day">Часть новой даты, содержащая день.</param>
      <param name="hour">Часть новой даты, содержащая час.</param>
      <param name="minute">Часть новой даты, содержащая минуты.</param>
      <param name="second">Часть новой даты, содержащая секунды. Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
      <returns>Новая дата.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="CreateDateTimeOffset" />. Сведения о канонической функции <see langword="CreateDateTimeOffset" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="year">Часть новой даты, содержащая год.</param>
      <param name="month">Часть новой даты, содержащая месяц.</param>
      <param name="day">Часть новой даты, содержащая день.</param>
      <param name="hour">Часть новой даты, содержащая час.</param>
      <param name="minute">Часть новой даты, содержащая минуту.</param>
      <param name="second">Часть новой даты, содержащая секунды. Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
      <param name="timeZoneOffset">Часть новой даты, содержащая часовой пояс.</param>
      <returns>Новая дата.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="CreateTime" />. Сведения о канонической функции <see langword="CreateTime" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="hour">Часть нового интервала времени, содержащая часы.</param>
      <param name="minute">Часть нового интервала времени, содержащая минуты.</param>
      <param name="second">Часть нового интервала времени, содержащая секунды. Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
      <returns>Новый интервал времени.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffDays" />. Сведения о канонической функции <see langword="DiffDays" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
      <returns>Число дней между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffDays" />. Сведения о канонической функции <see langword="DiffDays" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
      <returns>Число дней между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffHours" />. Сведения о канонической функции <see langword="DiffHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffHours" />. Сведения о канонической функции <see langword="DiffHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffHours" />. Сведения о канонической функции <see langword="DiffHours" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffMicroseconds" />. Сведения о канонической функции <see langword="DiffMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffMicroseconds" />. Сведения о канонической функции <see langword="DiffMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffMicroseconds" />. Сведения о канонической функции <see langword="DiffMicroseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffMilliseconds" />. Сведения о канонической функции <see langword="DiffMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffMilliseconds" />. Сведения о канонической функции <see langword="DiffMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffMilliseconds" />. Сведения о канонической функции <see langword="DiffMilliseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffMinutes" />. Сведения о канонической функции <see langword="DiffMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffMinutes" />. Сведения о канонической функции <see langword="DiffMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffMinutes" />. Сведения о канонической функции <see langword="DiffMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffMonths" />. Сведения о канонической функции <see langword="DiffMonths" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
      <returns>Число месяцев между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffMonths" />. Сведения о канонической функции <see langword="DiffMonths" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
      <returns>Число месяцев между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffNanoseconds" />. Сведения о канонической функции <see langword="DiffNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffNanoseconds" />. Сведения о канонической функции <see langword="DiffNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffNanoseconds" />. Сведения о канонической функции <see langword="DiffNanoseconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffSeconds" />. Сведения о канонической функции <see langword="DiffSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffSeconds" />. Сведения о канонической функции <see langword="DiffSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию <see langword="DiffSeconds" />. Сведения о канонической функции <see langword="DiffSeconds" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="DiffYears" />. Сведения о канонической функции <see langword="DiffYears" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
      <returns>Число лет между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="DiffYears" />. Сведения о канонической функции <see langword="DiffYears" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
      <returns>Число лет между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="GetTotalOffsetMinutes" />. Сведения о канонической функции <see langword="GetTotalOffsetMinutes" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateTimeOffsetArgument">Допустимое смещение даты и времени.</param>
      <returns>Число минут, на которое <paramref name="dateTimeOffsetArgument" /> смещено относительно времени по Гринвичу (GMT). Обычно это значение находится в диапазоне от +780 до -780 (плюс-минус 13 ч).</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="Left" />. Сведения о канонической функции <see langword="Left" /> см. в разделе Строковые канонические функции.</summary>
      <param name="stringArgument">Допустимое строковое выражение.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>Число знаков с левого края <paramref name="length" /> в <paramref name="stringArgument" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Вызывает каноническую функцию <see langword="Reverse" />. Сведения о канонической функции <see langword="Reverse" /> см. в разделе Строковые канонические функции.</summary>
      <param name="stringArgument">Допустимая строка.</param>
      <returns>Входная строка с обратным порядком символов.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="Right" />. Сведения о канонической функции <see langword="Right" /> см. в разделе Строковые канонические функции.</summary>
      <param name="stringArgument">Допустимое строковое выражение.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>Число знаков с правого края <paramref name="length" /> в <paramref name="stringArgument" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию <see langword="StDev" />. Сведения о канонической функции <see langword="StDev" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.St*******ardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию <see langword="StDevP" />. Сведения о канонической функции <see langword="StDevP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор числовых значений.</param>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="Truncate" />. Сведения о канонической функции <see langword="Truncate" /> см. в разделе Математические канонические функции.</summary>
      <param name="value">Усекаемое число.</param>
      <param name="digits">Длина или точность усечения.</param>
      <returns>Значение <paramref name="value" />, усеченное до длины или точности, заданной параметром <paramref name="digits" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="Truncate" />. Сведения о канонической функции <see langword="Truncate" /> см. в разделе Математические канонические функции.</summary>
      <param name="value">Усекаемое число.</param>
      <param name="digits">Длина или точность усечения.</param>
      <returns>Значение <paramref name="value" />, усеченное до длины или точности, заданной параметром <paramref name="digits" />.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию <see langword="TruncateTime" />. Сведения о канонической функции <see langword="TruncateTime" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Усекаемая дата.</param>
      <returns>Входная дата без части, содержащей время.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию <see langword="TruncateTime" />. Сведения о канонической функции <see langword="TruncateTime" /> см. в разделе Канонические функции даты и времени.</summary>
      <param name="dateValue">Усекаемое смещение даты и времени.</param>
      <returns>Входная дата без части, содержащей время.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию <see langword="Var" />. Сведения о канонической функции <see langword="Var" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию <see langword="VarP" />. Сведения о канонической функции <see langword="VarP" /> см. в разделе Канонические функции.</summary>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>Предоставляет функциональные возможности, обеспечивающие внесение изменений в набор объектов данных.</summary>
      <typeparam name="TEntity">Тип объекта сущности, возвращаемого запросом.</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий новую сущность.</summary>
      <param name="entity">Новый объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий текущую сущность.</summary>
      <param name="entity">Существующий объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Уведомляет набор о том, что из набора нужно удалить объект, представляющий имеющуюся сущность.</summary>
      <param name="entity">Существующий объект для удаления из набора.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>Уведомляет набор о том, что от набора нужно отсоединить объект, представляющий имеющуюся сущность.</summary>
      <param name="entity">Объект, который необходимо отсоединить от набора.</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>Определяет, как объекты, загружаемые в контекст объекта, объединяются с объектами, которые уже находятся в этом контексте объекта.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>Объекты, которые не существуют в контексте объекта, присоединяются к контексту. Если объект уже находится в контексте, текущие и исходные значения свойств объекта в записи не переписываются значениями из источника данных. Состояние записи объекта и состояние свойств объекта в записи не меняется. Параметр <see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> является параметром слияния по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>Объекты обслуживаются в состоянии <see cref="F:System.Data.EntityState.Detached" /> и не отслеживаются экземпляром <see cref="T:System.Data.Objects.ObjectStateManager" />. Однако для упрощения загрузки связанных объектов сущности, созданные в Entity Framework, и сущности POCO с прокси-объектами поддерживают ссылку на контекст объекта.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>Объекты, которые не существуют в контексте объекта, присоединяются к контексту. Если объект уже находится в контексте, текущие и исходные значения свойств объекта в записи переписываются значениями из источника данных. Состоянию записи объекта присваивается значение <see cref="F:System.Data.EntityState.Unchanged" />, а свойства, отмеченные как измененные, отсутствуют.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>Объекты, которые не существуют в контексте объекта, присоединяются к контексту.</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>Предоставляет возможность выполнять запросы и работать с данными сущности как с объектами.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с данным соединением. Во время построения рабочая область метаданных извлекается из объекта <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="connection" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connection" /> не является допустимым.  

или - 
Недопустимая рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с данным соединением и именем контейнера сущностей.</summary>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию. Если задание <paramref name="defaultContainerName" /> осуществляется посредством данного метода, это свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="connection" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="connection" /> или <paramref name="defaultContainerName" /> либо рабочая область метаданных недопустимы.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с данной строкой соединения и именем контейнера сущностей.</summary>
      <param name="connectionString">Строка соединения, которая также предоставляет доступ к метаданным.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="connectionString" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="connectionString" /> не является допустимым.  
-или- 
Недопустимая рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с данной строкой соединения и именем контейнера сущностей.</summary>
      <param name="connectionString">Строка соединения, которая также предоставляет доступ к метаданным.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию. Если задание <paramref name="defaultContainerName" /> осуществляется посредством данного метода, это свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="connectionString" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="connectionString" /> или <paramref name="defaultContainerName" /> либо рабочая область метаданных недопустимы.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>Принимает все изменения, внесенные в объекты в данном контексте объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Добавляет объект в контекст объекта.</summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить именем контейнера сущностей (необязательно).</param>
      <param name="entity">Добавляемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entity" /> имеет значение <see langword="null" />.  
-или- 
Имя <paramref name="entitySetName" /> не уточнено.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Копирует скалярные значения из указанного объекта в объект в контексте <see cref="T:System.Data.Objects.ObjectContext" />, содержащем тот же ключ.</summary>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="currentEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту. Ключ сущности объекта <paramref name="currentEntity" /> должен совпадать со свойством <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> сущности в контексте <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Тип сущности объекта.</typeparam>
      <returns>Обновленный объект.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entitySetName" /> или <paramref name="current" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.  
-или- 
Объект не находится в состоянии <see cref="T:System.Data.Objects.ObjectStateManager" /> или находится в состоянии <see cref="F:System.Data.EntityState.Detached" />.  
-или- 
Ключ сущности предоставленного объекта является недопустимым.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="entitySetName" /> равен пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Копирует скалярные значения из переданного объекта в набор исходных значений для объекта в <see cref="T:System.Data.Objects.ObjectContext" />, имеющего тот же ключ.</summary>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту. Ключ сущности объекта <paramref name="originalEntity" /> должен совпадать со свойством <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> сущности в контексте <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Тип объекта сущности.</typeparam>
      <returns>Обновленный объект.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entitySetName" /> или <paramref name="original" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.  
-или- 
Для объекта не удается найти <see cref="T:System.Data.Objects.ObjectStateEntry" /> в <see cref="T:System.Data.Objects.ObjectStateManager" />. -или- 
Объект находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />.  
-или- 
Ключ сущности предоставленного объекта является недопустимым или имеет измененные свойства.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="entitySetName" /> равен пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Применяет изменения свойств из отсоединенного объекта к объекту, который уже присоединен к контексту объекта.</summary>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="changed">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту.</param>
      <exception cref="T:System.ArgumentNullException">Если <paramref name="entitySetName" /> равно <see langword="null" /> или пустая строка.  

или - 
Если значение параметра <paramref name="changed" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Когда набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.  
-или- 
Сущность находится в состоянии, отличном от <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Unchanged" />.  

или - 
Исходный объект не присоединен к контексту.</exception>
      <exception cref="T:System.ArgumentException">Когда тип объекта <paramref name="changed" /> отличается от типа исходного объекта.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>Присоединяет объект или граф объектов к контексту объекта, если объект имеет ключ сущности.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="entity" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый ключ сущности.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Присоединяет объект или граф объектов к контексту объекта в конкретном наборе сущностей.</summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить именем контейнера сущностей (необязательно).</param>
      <param name="entity">Присоединяемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="entity" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый набор сущностей.  
-или- 
Объект имеет временный ключ.  

или - 
Объект имеет ключ <see cref="T:System.Data.EntityKey" />, а набор <see cref="T:System.Data.Metadata.Edm.EntitySet" /> не соответствует набору сущностей, переданному в качества параметра метода.  

или - 
Объект не имеет ключа <see cref="T:System.Data.EntityKey" />, и не предоставлено ни одного набора сущностей.  


-или- 
Объект из графа объектов имеет временный ключ <see cref="T:System.Data.EntityKey" />.  
-или- 
Объект из графа объектов имеет недопустимый ключ <see cref="T:System.Data.EntityKey" /> (например, значения в ключе не совпадают со значениями в объекте).  
-или- 
Не удалось найти набор сущностей по заданному имени <paramref name="entitySetName" /> и имени контейнера сущностей.  

или - 
Объект из графа объектов уже существует в другом диспетчере состояния.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Comm*******Timeout">
      <summary>Возвращает или задает значение времени ожидания (в секундах) для всех операций контекста объекта. Значение <see langword="null" /> указывает, что будет использоваться значение базового поставщика по умолчанию.</summary>
      <returns>Значение <see cref="T:System.Int32" />, которое является значением времени ожидания (в секундах).</returns>
      <exception cref="T:System.ArgumentException">Время ожидания меньше 0.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>Возвращает соединение, используемое контекстом объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" />, который является соединением.</returns>
      <exception cref="T:System.ObjectDisposedException">Когда экземпляр <see cref="T:System.Data.Objects.ObjectContext" /> был удален.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>Получает экземпляр <see cref="T:System.Data.Objects.ObjectContextOptions" />, содержащий параметры, которые воздействуют на поведение <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Objects.ObjectContextOptions" />, содержащий параметры, которые воздействуют на поведение <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>Создает базу данных, используя текущее подключение к источнику данных и метаданные в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Формирует DDL-скрипт, создающий объекты схемы (таблицы, первичные ключи, внешние ключи) для метаданных в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />. Класс <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> загружает метаданные из SSDL-файлов.</summary>
      <returns>DDL-скрипт, создающий объекты схемы для метаданных в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Создает ключ сущности для определенного объекта или возвращает ключ сущности, если он уже существует.</summary>
      <param name="entitySetName">Полное имя набора сущностей, к которому принадлежит объект сущности.</param>
      <param name="entity">Объект, для которого получается ключ сущности.</param>
      <returns>Ключ сущности <see cref="T:System.Data.EntityKey" /> объекта.</returns>
      <exception cref="T:System.ArgumentNullException">Один из параметров имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Если <paramref name="entitySetName" /> пуст.  
-или- 
Когда тип объекта <paramref name="entity" /> не существует в наборе сущностей.  
-или- 
Когда имя <paramref name="entitySetName" /> является неполным.</exception>
      <exception cref="T:System.InvalidOperationException">Ключ сущности невозможно построить на основе предоставленных параметров.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>Создает и возвращает экземпляр запрашиваемого типа.</summary>
      <typeparam name="T">Тип возвращаемого объекта.</typeparam>
      <returns>Экземпляр запрашиваемого типа <paramref name="T" /> или экземпляр производного типа, позволяющий использовать <paramref name="T" /> с Entity Framework. Возвращаемый объект является экземпляром запрашиваемого типа или экземпляром производного типа, который позволяет использовать запрашиваемый тип с Entity Framework.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа сущности.</summary>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задается в <see cref="T:System.Data.Objects.ObjectContext" />.  

или - 
Заданный тип относится к более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа с заданным именем набора сущностей.</summary>
      <param name="entitySetName">Имя набора сущностей для возвращенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />. Если свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задано в контексте <see cref="T:System.Data.Objects.ObjectContext" />, строка определяется именем контейнера по умолчанию.</param>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.  
-или- 
Свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задается на <see cref="T:System.Data.Objects.ObjectContext" />, а имя не задано как часть параметра <paramref name="entitySetName" />.  
-или- 
Заданный тип относится к более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Создает эквивалентный тип, который можно использовать с Entity Framework для каждого типа в предоставленном перечислении.</summary>
      <param name="types">Перечисление объектов <see cref="T:System.Type" />, представляющих пользовательские классы данных, которые сопоставляются с концептуальной моделью.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Создает объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> в контексте текущего объекта с помощью указанной строки запроса.</summary>
      <param name="queryString">Выполняемая строка запроса.</param>
      <param name="parameters">Параметры для передачи запросу.</param>
      <typeparam name="T">Тип сущности возвращенного объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />.</typeparam>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> указанного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="queryString" /> или параметра <paramref name="parameters" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>Проверяет, существует ли в источнике данных база данных, указанная в качестве базы данных в текущем подключении к источнику данных.</summary>
      <returns>Значение <see langword="true" />, если база данных существует.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>Возвращает или задает имя контейнера по умолчанию.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем контейнера по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>Удаляет базу данных, указанную в качестве базы данных в текущем подключении к источнику данных.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Помечает объект для удаления.</summary>
      <param name="entity">Объект, указывающий удаляемую сущность. Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.EntityState.Detached" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entity" /> — не существует.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект. Удаляется только <paramref name="entity" />; при наличии связанных объектов, отслеживаемых тем же <see cref="T:System.Data.Objects.ObjectStateManager" />, они не будут автоматически отсоединены.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="entity" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность <paramref name="entity" /> не ассоциирована с этим контекстом <see cref="T:System.Data.Objects.ObjectContext" /> (например, она вновь создана и еще не ассоциирована с каким-либо контекстом, или была получена через какой-либо другой контекст, или уже была отсоединена).</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>Обеспечивает синхронизацию изменений объекта <see cref="T:System.Data.Objects.ObjectStateEntry" /> с изменениями во всех объектах, отслеживаемых посредством объекта <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели; отменяет любые результаты, возвращенные функцией; возвращает количество строк, обработанных при выполнении команды.</summary>
      <param name="functionName">Имя хранимой процедуры или функции. Имя может содержать имя контейнера, например <c>&lt;Имя контейнера&gt;.&lt;Имя функции&gt;</c>. Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <returns>Число обработанных строк.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст 

или - 
<paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.  
-или- 
Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет данную хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели (с применением указанных параметров и команды слияния). Возвращает типизированный объект <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <param name="functionName">Имя хранимой процедуры или функции. Имя может содержать имя контейнера, например <c>&lt;Имя контейнера&gt;.&lt;Имя функции&gt;</c>. Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Objects.MergeOption" /> для использования при выполнении запроса.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных. Данный тип должен реализовывать <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст 
-или- 
 <paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.  
-или- 
Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и сопоставленную в концептуальной модели (с применением указанных параметров). Возвращает типизированный объект <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <param name="functionName">Имя хранимой процедуры или функции. Имя может содержать имя контейнера, например <c>&lt;Имя контейнера&gt;.&lt;Имя функции&gt;</c>. Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных. Данный тип должен реализовывать <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст 
-или- 
 <paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.  
-или- 
Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreComm*******(System.String,System.Object[])">
      <summary>Выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.</summary>
      <param name="comm*******Text">Выполняемая команда на языке источника данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <returns>Число обработанных строк.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Выполняет запрос непосредственно в отношении источника данных, возвращающего последовательность типизированных результатов.</summary>
      <param name="comm*******Text">Выполняемая команда на языке источника данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TElement">Тип возвращаемых данных.</typeparam>
      <returns>Перечисление объектов типа <paramref name="TElement" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>Выполняет запрос непосредственно в отношении источника данных и возвращает последовательность типизированных результатов. Укажите набор сущностей и параметр слияния, посредством которых результаты запроса можно будет отслеживать в качестве сущностей.</summary>
      <param name="comm*******Text">Выполняемая команда на языке источника данных.</param>
      <param name="entitySetName">Набор сущностей типа <typeparamref name="TEntity" />. Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Objects.MergeOption" /> для использования при выполнении запроса. Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TEntity">Тип сущности возвращенных данных.</typeparam>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Возвращает все существующие типы прокси.</summary>
      <returns>Перечисление <see cref="T:System.Collections.Generic.IEnumerable`1" /> всех существующих типов прокси.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <param name="key">Ключ искомого объекта.</param>
      <returns>Объект <see cref="T:System.Object" />, который является экземпляром типа сущности.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">Объект не найден ни в объекте <see cref="T:System.Data.Objects.ObjectStateManager" />, ни в источнике данных.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Возвращает тип сущности POCO, связанной с прокси-объектом заданного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" /> прокси-объекта.</param>
      <returns>Тип <see cref="T:System.Type" /> связанной сущности POCO.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и параметра слияния по умолчанию.</summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="entity" /> в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />. 
-или- 
Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и указанного параметра слияния.</summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="entity" /> в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />. 
-или- 
Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и параметра слияния по умолчанию.</summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <typeparam name="TEntity">Тип предоставленного объекта.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> не поддерживает допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="entity" /> в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />. 

или - 
Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и указанного параметра слияния.</summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <typeparam name="TEntity">Тип предоставленного объекта.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> не поддерживает допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="entity" /> в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />. 
-или- 
Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>Возвращает рабочую область метаданных, используемую контекстом объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, ассоциированный с этим классом <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>Возникает при создании нового объекта сущности на основании данных в источнике данных в составе операции загрузки или запроса.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>Возвращает диспетчер состояния объекта, используемый контекстом объекта, чтобы отслеживать изменения объекта.</summary>
      <returns>Диспетчер <see cref="T:System.Data.Objects.ObjectStateManager" />, используемый этим классом <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>Получает поставщик запроса LINQ, связанного с контекстом данного объекта.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.IQueryProvider" />, используемый контекстом данного объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Обновляет коллекцию объектов в контексте объекта, используя данные из источника данных.</summary>
      <param name="refreshMode">Значение <see cref="T:System.Data.Objects.RefreshMode" />, которое указывает, перезаписываются ли изменения свойств в контексте объекта значениями свойств из источника данных.</param>
      <param name="collection">Обновляемая коллекция объектов <see cref="T:System.Collections.IEnumerable" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="collection" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый параметр <paramref name="refreshMode" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="collection" /> пуст.  
-или- 
Объект не присоединен к контексту.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>Обновляет какой-либо объект в контексте объекта, используя данные из источника данных.</summary>
      <param name="refreshMode">Одно из значений <see cref="T:System.Data.Objects.RefreshMode" />, которое указывает, какой режим использовать для обновления диспетчера <see cref="T:System.Data.Objects.ObjectStateManager" />.</param>
      <param name="entity">Обновляемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="collection" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый параметр <paramref name="refreshMode" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="collection" /> пуст.  

или - 
Объект не присоединен к контексту.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>Сохраняет все обновления в источнике данных и сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Число объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">В источнике данных произошло нарушение оптимистичного параллелизма.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Сохраняет все обновления в источнике данных и при необходимости сбрасывает отслеживание изменений в контексте объекта.</summary>
      <param name="acceptChangesDuringSave">Этот параметр необходим для поддержки транзакций на стороне клиента. Если он имеет значение <see langword="true" />, сброс отслеживания изменений во всех объектах производится по завершении работы <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />. Если значение параметра равно <see langword="false" />, необходимо вызвать метод <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> по окончании работы <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />.</param>
      <returns>Число объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">Произошло нарушение оптимистичного параллелизма.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>Сохраняет все обновления в источнике данных, используя указанные параметры <see cref="T:System.Data.Objects.SaveOptions" />.</summary>
      <param name="options">Значение <see cref="T:System.Data.Objects.SaveOptions" />, определяющее поведение операции.</param>
      <returns>Число объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">Произошло нарушение оптимистичного параллелизма.</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>Возникает при сохранении изменений в источнике данных.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности.</summary>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <typeparam name="TElement">Тип сущности данных в интерфейсе <see cref="T:System.Data.Common.DbDataReader" />.</typeparam>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException">Если значение параметра <paramref name="reader" /> равно <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности (в определенном наборе сущностей и с применением указанного параметра слияния).</summary>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <param name="entitySetName">Набор сущностей типа <typeparamref name="TEntity" />.</param>
      <param name="mergeOption">Объект <see cref="T:System.Data.Objects.MergeOption" />, используемый при добавлении преобразованных объектов в контекст объекта. Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity">Тип сущности данных в интерфейсе <see cref="T:System.Data.Common.DbDataReader" />.</typeparam>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException">Если значение параметра <paramref name="reader" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Когда предоставленный <paramref name="mergeOption" /> не является допустимым значением <see cref="T:System.Data.Objects.MergeOption" />.</exception>
      <exception cref="T:System.InvalidOperationException">Когда предоставленный <paramref name="entitySetName" /> не является допустимым набором сущностей для типа <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <param name="key">Ключ искомого объекта.</param>
      <param name="value">Если этот метод возвращает значение, содержит объект.</param>
      <returns>
        <see langword="true" />, если объект был успешно извлечен. Значение <see langword="false" />, если ключ <paramref name="key" /> является временным, подключение равно значению <see langword="null" /> или объект <paramref name="value" /> равен значению <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">Несовместимые метаданные для <paramref name="key" />.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>Определяет параметры, воздействующие на поведение <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Получает или задает логическое значение, которое определяет, происходит ли автоматическая загрузка связанных объектов при осуществлении доступа к какому-либо свойству навигации.</summary>
      <returns>
        <see langword="true" />, если отложенная загрузка разрешена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Получает или задает логическое значение, которое определяет, создаются ли экземпляры прокси для пользовательских классов данных, игнорирующих сохраняемость.</summary>
      <returns>Значение <see langword="true" />, если создаются прокси; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>Получает или задает логическое значение, которое определяет, следует ли использовать согласованное поведение NullReference.</summary>
      <returns>Значение <see langword="true" />, если необходимо использовать согласованное поведение NullReference; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>Получает или задает логическое значение, которое определяет, следует ли использовать поведение C# NullComparison.</summary>
      <returns>Значение <see langword="true" />, если необходимо использовать поведение C# NullComparison; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Получает или задает логическое значение, которое определяет, следует ли использовать традиционное поведение PreserveChanges.</summary>
      <returns>Значение <see langword="true" />, если необходимо использовать устаревшее поведение PreserveChanges; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>Содержит данные события <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Получает созданный объект сущности.</summary>
      <returns>Созданный объект сущности.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventH*******ler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> класса <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <param name="sender">Экземпляр <see cref="T:System.Data.Objects.ObjectContext" />, вызвавший данное событие.</param>
      <param name="e">Объект <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" />, содержащий данные о событии.</param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>Представляет параметр запроса, передающийся запросу объектов.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectParameter" /> указанным именем и значением.</summary>
      <param name="name">Имя параметра. Это имя не должно содержать маркер параметра «@», используемый для инструкций Entity SQL, а только фактическое имя. Выражение должно начинаться с буквы. Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="value">Начальное значение (следовательно, и тип) параметра.</param>
      <exception cref="T:System.ArgumentNullException">Если один из аргументов имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если имя аргумента недопустимо. Имена параметров должны начинаться с буквы и могут содержать только буквы, цифры и символы подчеркивания.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectParameter" /> указанным именем и типом.</summary>
      <param name="name">Имя параметра. Это имя не должно содержать маркер параметра «@», используемый для инструкций Entity SQL, а только фактическое имя. Выражение должно начинаться с буквы. Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="type">Тип параметра среды CLR.</param>
      <exception cref="T:System.ArgumentNullException">Если один из аргументов имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если имя аргумента недопустимо. Имена параметров должны начинаться с буквы и могут содержать только буквы, цифры и символы подчеркивания.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>Возвращает имя параметра, которое можно задать только с помощью конструктора.</summary>
      <returns>Имя параметра, которое можно задать только с помощью конструктора.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>Возвращает тип параметра.</summary>
      <returns>Тип <see cref="T:System.Type" /> параметра.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>Возвращает или задает значение параметра.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>Представляет параметры запроса в виде объектов <see cref="T:System.Data.Objects.ObjectParameter" />, определенных в <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>Добавляет указанный параметр <see cref="T:System.Data.Objects.ObjectParameter" /> в коллекцию.</summary>
      <param name="parameter">Параметр для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="parameter" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Аргумент <paramref name="parameter" /> уже присутствует в коллекции. Это условие отличается от большинства коллекций, в которых допускаются повторяющиеся записи.  

или - 
В коллекции уже присутствует другой параметр с тем же именем, что и у аргумента <paramref name="parameter" />. Учтите, что в поиске не учитывается регистр. Это условие отличается от большинства коллекции и близко к правилам словаря <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый тип <paramref name="parameter" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>Удаляет все экземпляры <see cref="T:System.Data.Objects.ObjectParameter" /> из коллекции.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>Проверяет наличие указанного параметра <see cref="T:System.Data.Objects.ObjectParameter" /> в коллекции по ссылке.</summary>
      <param name="parameter">Параметр <see cref="T:System.Data.Objects.ObjectParameter" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если объект параметра найден в коллекции; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="parameter" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Определяет, присутствует ли в коллекции объект <see cref="T:System.Data.Objects.ObjectParameter" /> с указанным именем.</summary>
      <param name="name">Имя параметра, который необходимо найти в коллекции. Это имя не должно содержать маркер параметра "@", используемый для инструкций Entity SQL, а только фактическое имя.</param>
      <returns>Значение <see langword="true" />, если параметр с указанным именем найден в коллекции; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>Позволяет копировать параметры коллекции в указанный массив, начиная с объекта по указанному индексу.</summary>
      <param name="array">Массив, в который копируются параметры.</param>
      <param name="index">Индекс в массиве, с которого начинается копирование параметров.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>Возвращает число параметров, находящихся в коллекции в данный момент.</summary>
      <returns>Число объектов <see cref="T:System.Data.Objects.ObjectParameter" />, находящихся в коллекции в данный момент.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Представляет индексатор, который позволяет вызывающим методам получать параметры по имени.</summary>
      <param name="name">Имя искомого параметра. Это имя не должно содержать маркер параметра "@", используемый для инструкций Entity SQL, а только фактическое имя.</param>
      <returns>Экземпляр класса <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">В коллекции не найден параметр с указанным именем.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>Удаляет экземпляр <see cref="T:System.Data.Objects.ObjectParameter" /> из коллекции по ссылке, если он существует в этой коллекции.</summary>
      <param name="parameter">Объект, который должен быть удален из коллекции.</param>
      <returns>Значение <see langword="true" />, если объект параметра найден и удален из коллекции; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="parameter" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция доступной только для чтения.</summary>
      <returns>Логическое значение <see langword="true" />, если коллекция доступна только для чтения; если коллекцию можно изменять — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator">
      <summary>Возвращает типизированный перечислитель по коллекции.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.IEnumerator`1" /> типа <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает нетипизированный перечислитель по коллекции.</summary>
      <returns>Экземпляр <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>Реализует общие функции для запросов в концептуальной модели с помощью LINQ to Entities и <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Comm*******Text">
      <summary>Возвращает текст команды запроса.</summary>
      <returns>Значение <see langword="string" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>Возвращает контекст объекта, ассоциированный с этим запросом объектов.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectContext" />, ассоциированный с этим экземпляром <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Возвращает или задает значение, указывающее, должен ли быть кэширован план запроса.</summary>
      <returns>Значение, указывающее, должен ли быть кэширован план запроса.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>Выполняет нетипизированный запрос объектов с указанным параметром слияния.</summary>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Objects.MergeOption" /> для использования при выполнении запроса. Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" />, который содержит коллекцию объектов сущности, возвращенных запросом.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>Возвращает сведения о результирующем типе запроса.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, которое содержит сведения об результирующем типе запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>Возвращает или задает способ добавления к контексту объекта объектов, возвращенных запросом.</summary>
      <returns>Свойство <see cref="T:System.Data.Objects.MergeOption" /> запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>Возвращает коллекцию параметров для этого запроса объектов.</summary>
      <returns>Коллекция параметров для этого запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение, которое показывает, содержит ли коллекция, возвращенная запросом, объекты-коллекции.</summary>
      <returns>Значение типа Boolean.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде интерфейса <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Возвращает результирующий тип элемента для этого экземпляра запроса.</summary>
      <returns>Тип <see cref="T:System.Type" />, который является результирующим типом элемента для этого экземпляра запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Возвращает выражение, описывающее этот запрос.</summary>
      <returns>Выражение LINQ типа <see cref="T:System.Linq.Expressions.Expression" />, которое описывает этот запрос.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Возвращает поставщик LINQ типа <see cref="T:System.Linq.IQueryProvider" />, ассоциированный с этим экземпляром запроса.</summary>
      <returns>Поставщик <see cref="T:System.Linq.IQueryProvider" />, ассоциированный с этим экземпляром запроса.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>Возвращает команды для выполнения относительно источника данных.</summary>
      <returns>Строка <see langword="string" />, представляющая команды, которые запрос выполняет относительно источника данных.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>Представляет типизированный запрос к концептуальной модели в данном контексте объекта.</summary>
      <typeparam name="T">Тип сущности запроса.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> с помощью указанной команды языка Entity SQL в качестве начального запроса.</summary>
      <param name="comm*******Text">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Objects.ObjectContext" />, в котором выполняется запрос.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, используя указанную команду языка Entity SQL в качестве начального запроса, а также указанные параметры слияния.</summary>
      <param name="comm*******Text">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Objects.ObjectContext" />, в котором выполняется запрос.</param>
      <param name="mergeOption">Указывает, каким образом сущности, получаемые этим запросом, должны сливаться с сущностями, возвращенными в результате предыдущих запросов к тому же контексту <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>Ограничивает запрос для выдачи результатов без повторов.</summary>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением SELECT DISTINCT.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>Ограничивает результаты запроса, исключая принадлежащие к результатам другого запроса объектов.</summary>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> представляющий результаты, исключаемые из запроса.</param>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением EXCEPT, основанном на указанном элементе <paramref name="query" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="query" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>Выполняет запрос объектов с указанным параметром слияния.</summary>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Objects.MergeOption" /> для использования при выполнении запроса. Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" />, который содержит коллекцию объектов сущности, возвращенных запросом.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Группирует результаты запроса по заданному критерию.</summary>
      <param name="keys">Ключевые столбцы, по которым группируются результаты.</param>
      <param name="projection">Список выбранных свойств, определяющий проекцию.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему предложением GROUP BY.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="query" /> имеет значение <see langword="null" /> или является пустой строкой.  
-или- 
Параметр <paramref name="projection" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
      <returns>Новый запрос <see cref="T:System.Data.Objects.ObjectQuery`1" /> с определенным путем запроса.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="path" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Свойство <paramref name="path" /> имеет значение <see langword="empty" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>Ограничивает результаты запроса, включая только те, которые вошли в результаты другого запроса объектов.</summary>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий результаты, включаемые в запрос.</param>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением INTERSECT, основанном на указанном элементе <paramref name="query" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="query" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>Возвращает или задает имя данного запроса объектов.</summary>
      <returns>Значение <see langword="string" />, представляющее имя данного объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
      <exception cref="T:System.ArgumentException">Значение, указанное в наборе, не является допустимым.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>Запрос ограничивается результатами определенного типа.</summary>
      <typeparam name="TResultType">Тип <see cref="T:System.Data.Objects.ObjectResult`1" /> возвращается, если запрос выполняется с применением фильтра.</typeparam>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному, с примененным к нему предложением OFTYPE.</returns>
      <exception cref="T:System.Data.EntitySqlException">Указан недопустимый тип.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Сортирует результаты запроса по заданному критерию.</summary>
      <param name="keys">Ключевые столбцы, по которым упорядочиваются результаты.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением ORDER BY.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="keys" /> или параметра <paramref name="parameters" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только теми свойствами, которые определены в заданной проекции.</summary>
      <param name="projection">Список выбранных свойств, определяющий проекцию.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему предложением SELECT.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="projection" /> имеет значение <see langword="null" />.  
-или- 
 Свойство <paramref name="parameters" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="projection" /> является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только свойствами, заданными в данной проекции.</summary>
      <param name="projection">Список проекций.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <typeparam name="TResultType">Тип элемента <see cref="T:System.Data.Objects.ObjectQuery`1" />, возвращаемого методом <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />.</typeparam>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа, совместимого с конкретной проекцией. Возвращаемый запрос <see cref="T:System.Data.Objects.ObjectQuery`1" /> эквивалентен первоначальному с примененным к нему предложением SELECT VALUE.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="projection" /> имеет значение <see langword="null" />.  
-или- 
 Свойство <paramref name="parameters" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="projection" /> является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Упорядочивает результаты запроса по заданному критерию и пропускает указанное число результатов.</summary>
      <param name="keys">Ключевые столбцы, по которым упорядочиваются результаты.</param>
      <param name="count">Число результатов, которые нужно пропустить. Может быть константой или ссылкой на параметр.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененными к нему предложениями ORDER BY и SKIP.</returns>
      <exception cref="T:System.ArgumentNullException">Любой аргумент равен <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="keys" /> равен пустой строке.  
-или- 
 Параметр <paramref name="count" /> равен пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель для прохода по результатам запроса.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" /> для последовательного просмотра результатов.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Результаты запроса ограничиваются определенным числом элементов.</summary>
      <param name="count">Количество элементов в результирующем наборе в виде строки.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением TOP.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="count" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="count" /> равен пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>Сочетает результаты запроса с результатами другого запроса объектов и исключает повторы.</summary>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий добавляемые результаты.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным предложением UNION для добавления результатов указанного элемента <paramref name="query" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="query" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>Сочетает результаты запроса с результатами другого запроса объектов и исключает повторы.</summary>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий добавляемые результаты.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением UNION ALL для добавления результатов указанного запроса <paramref name="query" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="query" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает запрос результатами, соответствующими определенному критерию фильтрации.</summary>
      <param name="predicate">Предикат фильтра.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением WHERE.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="predicate" /> имеет значение <see langword="null" />.  
-или- 
 Свойство <paramref name="parameters" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> является пустой строкой.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>Представляет класс, реализующий интерфейсы IEnumerable и IDisposable. Экземпляр этого класса возвращается из метода ObjectQuery.Execute.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>Выполняет задачи, связанные с освобождением или сбросом ресурсов.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>При переопределении в производном классе получает тип универсального <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Тип универсального <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.GetNextResult``1">
      <summary>Получает следующий результирующий набор хранимой процедуры.</summary>
      <typeparam name="TElement">Тип элемента.</typeparam>
      <returns>ObjectResult, который перечисляет значения следующего набора результатов. Значение null, если их больше нет, или если ObjectResult не является результатом вызова хранимой процедуры.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, проходящий по результатам запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение, которое показывает, содержит ли коллекция, возвращенная запросом, объекты-коллекции.</summary>
      <returns>Значение <see langword="true" />, если коллекция, возвращенная запросом, содержит объекты коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает результаты в формате, применимом для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>Представляет результат запроса <see cref="T:System.Data.Objects.ObjectQuery`1" /> в виде перечисляемой коллекции объектов.</summary>
      <typeparam name="T">Тип сущности результата.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>Выполняет задачи, связанные с освобождением или сбросом ресурсов.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>Возвращает тип службы <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, который является типом результата <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, проходящий по результатам запроса.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>Представляет набор типизированных сущностей, который используется для операций создания, чтения, обновления и удаления.</summary>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Добавляет объект к контексту объекта в текущем наборе сущностей.</summary>
      <param name="entity">Добавляемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Копирует скалярные значения из указанного объекта в объект в контексте <see cref="T:System.Data.Objects.ObjectContext" />, содержащем тот же ключ.</summary>
      <param name="currentEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту. Ключ сущности объекта <paramref name="currentEntity" /> должен совпадать со свойством <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> сущности в контексте <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <returns>Обновленный объект.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Задает свойство <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <param name="originalEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту. Ключ сущности объекта <paramref name="originalEntity" /> должен совпадать со свойством <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> сущности в контексте <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <returns>Обновленный объект.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>Присоединяет объект или граф объектов к контексту объекта в текущем наборе сущностей.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>Создает новый объект типа сущности.</summary>
      <returns>Новый объект типа сущности или экземпляр прокси-типа, соответствующий типу сущности.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>Создает экземпляр заданного типа.</summary>
      <typeparam name="T">Тип возвращаемого объекта.</typeparam>
      <returns>Экземпляр запрошенного типа <paramref name="T" /> или экземпляр прокси-типа, соответствующего типу <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Помечает объект для удаления.</summary>
      <param name="entity">Объект, представляющий удаляемую сущность. Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект. Удаляется только <paramref name="entity" />; при наличии связанных объектов, отслеживаемых тем же <see cref="T:System.Data.Objects.ObjectStateManager" />, они не будут автоматически отсоединены.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>Получает метаданные набора сущностей, представленного данным экземпляром <see cref="T:System.Data.Objects.ObjectSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>Представляет сущность, заглушку сущности или отношение.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Принимает текущие значения как исходные.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Задает текущие значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="currentEntity">Отсоединенный объект с обновленными значениями, применяемыми к данному объекту. <paramref name="currentEntity" /> может также быть ключом сущности объекта.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Задает исходные значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту. <paramref name="originalEntity" /> может также быть ключом сущности объекта.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>Изменяет состояние записи на указанное значение <see cref="T:System.Data.EntityState" />.</summary>
      <param name="state">Значение <see cref="T:System.Data.EntityState" />, задаваемое для свойства <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> записи.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>Возвращает текущие значения свойств объекта или связи, ассоциированной с этим экземпляром <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Экземпляр типа <see cref="T:System.Data.Objects.CurrentValueRecord" />, который содержит текущие значения объекта или связи, ассоциированной с экземпляром <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>Обозначает сущность как удаленную.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>Получает объект сущности.</summary>
      <returns>Объект сущности.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>Получает или задает целевой ключ.</summary>
      <returns>Ключ сущности.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>Получает <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> для объекта или отношения.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> для объекта или отношения.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Возвращает имена свойств объекта, которые изменились с момента последнего вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</summary>
      <returns>Коллекция имен <see cref="T:System.Collections.Generic.IEnumerable`1" /> как строка.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Получает обновляемую версию исходных значений объекта, связанного с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Обновляемые исходные значения данных объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>Использует DetectChanges, чтобы определить, отличается ли текущее значение свойства с заданным именем от его исходного значения. Обратите внимание, что это может отличаться от пометки свойства как измененного, поскольку свойство, которое не изменилось, все равно может быть помечено как измененное.</summary>
      <param name="propertyName">Имя свойства.</param>
      <returns>Значение <see langword="true" />, если свойство было изменено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>Получает значение, показывающее, представляет ли данный объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> отношение.</summary>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Data.Objects.ObjectStateEntry" /> представляет связь; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Возвращает состояние <see cref="T:System.Data.Objects.ObjectStateManager" /> для экземпляра <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateManager" /> для <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>Получает предназначенную только для чтения версию исходных значений объекта или отношения.</summary>
      <returns>Предназначенная только для чтения версия исходных значений сущности или записи набора отношений.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>Отклоняет все изменения, внесенные в свойство с заданным именем с момента последней загрузки свойства, его вложения, сохранения или принятия изменений. Исходное значение свойства сохраняется, а свойство больше не будет помечено как измененное.</summary>
      <param name="propertyName">Имя изменяемого свойства.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Получает экземпляр <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для объекта, представленного записью.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>Задает объекту или связи состояние Modified.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Обозначает указанное свойство как измененное.</summary>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>Получает или задает состояние <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Состояние объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Уведомляет диспетчер состояния об изменении сложного свойства.</summary>
      <param name="entityMemberName">Имя измененяемого свойства объекта верхнего уровня.</param>
      <param name="complexObject">Сложный объект, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного объекта.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Уведомляет диспетчер состояния, что сложное свойство имеет отложенное изменение.</summary>
      <param name="entityMemberName">Имя сложного свойства.</param>
      <param name="complexObject">Сложный объект, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного объекта.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Уведомляет диспетчер состояния об изменении свойства.</summary>
      <param name="entityMemberName">Имя измененного свойства сущности.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Уведомляет диспетчер состояния, что свойство имеет отложенное изменение.</summary>
      <param name="entityMemberName">Имя изменяемого свойства сущности.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Возвращает состояние <see cref="T:System.Data.EntityState" /> для экземпляра <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityState" /> для <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>Поддерживает состояние объекта и обеспечивает управление идентификаторами для экземпляров типа сущности и экземпляров связи.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
      <param name="metadataWorkspace">Рабочая область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, которая предоставляет информацию о сопоставлении и метаданных.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>Изменяет состояние записи <see cref="T:System.Data.Objects.ObjectStateEntry" /> для определенного объекта на указанное состояние <paramref name="entityState" />.</summary>
      <param name="entity">Объект, для которого должно быть изменено состояние.</param>
      <param name="entityState">Новое состояние объекта.</param>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для предоставленной записи <paramref name="entity" />.</returns>
      <exception cref="T:System.ArgumentNullException">Если значение параметра <paramref name="entity" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Когда объект не отсоединен и не имеет записи в диспетчере состояния.  
-или- 
При попытке изменить состояние на <see cref="F:System.Data.EntityState.Detached" /> из любого другого <see cref="T:System.Data.EntityState" />  
-или- 
Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и имени свойства навигации.</summary>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="navigationProperty">Имя свойства навигации исходного объекта <paramref name="sourceEntity" />, возвращающего указанный объект <paramref name="targetEntity" />.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <exception cref="T:System.ArgumentNullException">Если <paramref name="source" /> или <paramref name="target" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />.  

или - 
При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  

-или- 
Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и свойств отношения.</summary>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли на стороне <paramref name="targetEntity" /> отношения.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <exception cref="T:System.ArgumentNullException">Если <paramref name="source" /> или <paramref name="target" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />.  
-или- 
При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  

или - 
Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и выражения LINQ, определяющего свойство навигации.</summary>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="navigationPropertySelector">Выражение LINQ, выбирающее свойство навигации исходного объекта <paramref name="sourceEntity" />, возвращающего указанный объект <paramref name="targetEntity" />.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <typeparam name="TEntity">Тип сущности объекта <paramref name="sourceEntity" />.</typeparam>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="source" />, <paramref name="target" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> имеет неверный формат или не может возвратить свойство навигации.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />.  

или - 
При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  

-или- 
Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" /> для объектов или связей с заданным состоянием.</summary>
      <param name="state">Состояние <see cref="T:System.Data.EntityState" /> используется для фильтрации возвращаемых объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
      <returns>Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" /> в заданном состоянии <see cref="T:System.Data.EntityState" />.</returns>
      <exception cref="T:System.ArgumentException">Если значение параметра <paramref name="state" /> равно <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>Возвращает запись <see cref="T:System.Data.Objects.ObjectStateEntry" /> для объекта или запись связи с указанным ключом.</summary>
      <param name="key">
        <see cref="T:System.Data.EntityKey" />.</param>
      <returns>Соответствующая запись <see cref="T:System.Data.Objects.ObjectStateEntry" /> для заданного ключа <see cref="T:System.Data.EntityKey" />.</returns>
      <exception cref="T:System.ArgumentNullException">Если значение параметра <paramref name="key" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Когда указанный <paramref name="key" /> не удается найти в диспетчере состояния.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность с указанным ключом <see cref="T:System.Data.EntityKey" /> отсутствует в диспетчере <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Возвращает запись <see cref="T:System.Data.Objects.ObjectStateEntry" /> для указанного объекта.</summary>
      <param name="entity">Класс <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
      <returns>Соответствующая запись <see cref="T:System.Data.Objects.ObjectStateEntry" /> для заданного ключа <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">Сущность для указанного ключа <see cref="T:System.Object" /> отсутствует в диспетчере <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом.</summary>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <returns>Операция <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для заданного объекта.</returns>
      <exception cref="T:System.InvalidOperationException">Когда <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> не может быть возвращен для указанного параметра <paramref name="entity" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Возвращает рабочую область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанную с этим диспетчером состояний.</summary>
      <returns>Рабочая область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанная с этим соединением <see cref="T:System.Data.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Событие происходит при добавлении или удалении сущностей из диспетчера состояний.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>Пытается получить элемент <see cref="T:System.Data.Objects.ObjectStateEntry" /> для объекта или связи с указанным ключом <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="key">Заданное значение ключа <see cref="T:System.Data.EntityKey" />.</param>
      <param name="entry">После того как этот метод вернет управление, содержит значение записи <see cref="T:System.Data.Objects.ObjectStateEntry" /> для указанного ключа <see cref="T:System.Data.EntityKey" />. Этот параметр передается в неинициализированном виде.</param>
      <returns>Логическое значение <see langword="true" />, если имеется соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для данного <see cref="T:System.Data.EntityKey" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">значение <see langword="null" /> (<see langword="Nothing" /> в Visual Basic) значение предоставляется для параметра <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>Пытается получить элемент <see cref="T:System.Data.Objects.ObjectStateEntry" />, соответствующий указанному объекту <see cref="T:System.Object" />.</summary>
      <param name="entity">Класс <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
      <param name="entry">После того как этот метод вернет управление, содержит запись <see cref="T:System.Data.Objects.ObjectStateEntry" /> для указанного объекта <see cref="T:System.Data.EntityKey" />. Этот параметр передается в неинициализированном виде.</param>
      <returns>Логическое значение <see langword="true" />, если для заданного объекта имеется соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом.</summary>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">После выполнения возврата этим методом содержит объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для сущности <paramref name="entity" />.</param>
      <returns>Значение <see langword="true" />, если для предоставленной сущности <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> возвращен экземпляр объекта <paramref name="entity" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>Предоставляет доступ к исходным значениям данных объекта.</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>Этот класс помогает преобразовать типы прокси, созданные для классов данных, игнорирующих сохраняемость, в фактические типы объектов, игнорирующих сохраняемость.</summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>При десериализации сопоставляет все данные <see langword="xsi:type" /> с фактическим типом объекта, игнорирующего сохраняемость.</summary>
      <param name="typeName">Данные <see langword="xsi:type" /> для сопоставления.</param>
      <param name="typeNamespace">Пространство имен <see langword="xsi:type" />.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <returns>Тип, с которым сопоставляется <see langword="xsi:type" />, или <see langword="null" />, если не найдено известных типов, соответствующих <see langword="xsi:type" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>При сериализации сопоставляет фактические типы с информацией <see langword="xsi:type" />.</summary>
      <param name="dataContractType">Фактический тип объекта, игнорирующего сохраняемость.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">При возвращении этот метод содержит список объявлений <see langword="xsi:type" />.</param>
      <param name="typeNamespace">При возвращении данного метода содержит список использованных пространств имен.</param>
      <returns>Значение <see langword="true" />, если тип был разрешен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>Указывает, сохраняются ли изменения свойств объектов, отслеживаемые службами объектов, или заменяются значениями свойств из источника данных.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>Изменения свойств объектов в контексте объектов не заменяются значениями из источника данных. При следующем вызове метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> эти изменения будут переданы в источник данных.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>Изменения свойств объектов в контексте объектов заменяются значениями из источника данных.</summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>Задает поведение контекста объекта при вызове метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>После сохранения изменений вызывается метод <see cref="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave" />, который сбрасывает отслеживание изменений в <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>До того как изменения сохранены, метод <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> вызывается для синхронизации значений свойств объектов, прикрепленных к контексту объектов, с данными в <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>Изменения сохраняются без вызова методов <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> или <see cref="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave" />.</summary>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>Предоставляет методы среды CLR, вызывающие функции базы данных в запросах LINQ to Entities.</summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), косинус которого равен указанному числовому значению. Этот угол называется арккосинусом.</summary>
      <param name="arg1">Косинус угла.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), косинус которого равен указанному числовому значению. Этот угол называется арккосинусом.</summary>
      <param name="arg1">Косинус угла.</param>
      <returns>Угол в радианах, определяемый входным значением косинуса.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>Возвращает код ASCII самого левого символа указанного символьного выражения.</summary>
      <param name="arg">Допустимая строка.</param>
      <returns>Код ASCII первого символа входной строки.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), синус которого равен указанному числовому значению. Этот угол называется арксинусом.</summary>
      <param name="arg">Синус угла.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), синус которого равен указанному числовому значению. Этот угол называется арксинусом.</summary>
      <param name="arg">Синус угла.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), тангенс которого равен указанному числовому значению. Этот угол называется арктангенсом.</summary>
      <param name="arg">Тангенс угла.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), тангенс которого равен указанному числовому значению. Этот угол называется арктангенсом.</summary>
      <param name="arg">Тангенс угла.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает положительное значение угла (в радианах) между положительной часть оси X и прямой, проведенной через начало координат и точку (x, y), где x и y — два заданных числовых значения. Первый параметр, передаваемый функции, представляет собой значение y, а второй параметр — значение x.</summary>
      <param name="arg1">Координата y точки.</param>
      <param name="arg2">Координата х точки.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает положительное значение угла (в радианах) между положительной часть оси X и прямой, проведенной через начало координат и точку (x, y), где x и y — два заданных числовых значения. Первый параметр, передаваемый функции, представляет собой значение y, а второй параметр — значение x.</summary>
      <param name="arg1">Координата y точки.</param>
      <param name="arg2">Координата х точки.</param>
      <returns>Угол, измеряемый в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>Возвращает символ, соответствующий указанному целому значению ASCII.</summary>
      <param name="arg">Код ASCII.</param>
      <returns>Символ, соответствующий указанному значению ASCII.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
      <returns>
        <see cref="T:System.Nullable`1" /> значения <see cref="T:System.Int64" />, являющегося начальным положением <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает контрольную сумму значений в коллекции. Значения NULL не учитываются.</summary>
      <param name="arg">Коллекция значений, для которой вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает контрольную сумму значений в коллекции. Значения NULL не учитываются.</summary>
      <param name="arg">Коллекция значений, для которой вычисляется контрольная сумма.</param>
      <returns>Контрольная сумма, вычисленная для входной коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический косинус указанного угла (в радианах) в указанном выражении.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический косинус заданного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический косинус указанного угла (в радианах) в указанном выражении.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический косинус заданного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение котангенса заданного угла (в радианах).</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический котангенс заданного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение котангенса заданного угла (в радианах).</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический котангенс заданного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>Возвращает текущие дату и время.</summary>
      <returns>Текущая дата и время.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>Возвращает имя текущего пользователя.</summary>
      <returns>Имя текущего пользователя.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>Возвращает число байтов, используемых для представления выражения.</summary>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
      <returns>Число байтов во входном значении.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>Возвращает новое значение <see langword="datetime" />, полученное в результате прибавления интервала к указанной дате.</summary>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="date">Дата, которую требуется увеличить.</param>
      <returns>Новая дата.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает новое значение даты, полученное в результате прибавления интервала к указанной дате.</summary>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="dateTimeOffsetArg">Дата, которую требуется увеличить.</param>
      <returns>Новый момент времени, который выражается в виде даты и времени суток относительно времени в формате UTC.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>Возвращает новое значение промежутка времени, полученное в результате прибавления интервала к указанному промежутку времени.</summary>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="time">Увеличиваемый интервал времени.</param>
      <returns>Новый интервал времени.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>Возвращает новое значение <see langword="datetime" />, полученное в результате прибавления интервала к указанной дате.</summary>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="date">Дата, которую требуется увеличить.</param>
      <returns>Значение <see cref="T:System.Nullable`1" /> значения <see cref="T:System.DateTime" />, являющееся новой датой.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Значение, задающее число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
      <returns>Число интервалов времени между двумя датами.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает целое число, представляющее указанную часть даты.</summary>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает целое число, представляющее указанную часть даты.</summary>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает целое число, представляющее указанную часть даты.</summary>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>Возвращает целое число, представляющее указанную часть даты.</summary>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
      <returns>Заданная часть указанной даты.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <param name="arg1">Угол, измеряемый в радианах.</param>
      <returns>Указанный угол, преобразованный в градусы.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <param name="arg1">Угол, измеряемый в радианах.</param>
      <returns>Указанный угол, преобразованный в градусы.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <param name="arg1">Угол, измеряемый в радианах.</param>
      <returns>Указанный угол, преобразованный в градусы.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <param name="arg1">Угол, измеряемый в радианах.</param>
      <returns>Указанный угол, преобразованный в градусы.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>Возвращает целочисленное значение, указывающее разницу между значениями SOUNDEX двух символьных выражений.</summary>
      <param name="string1">Первая строка.</param>
      <param name="string2">Вторая строка.</param>
      <returns>Разница между значениями SOUNDEX двух строк.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>Возвращает экспоненциальное значение указанного выражения с плавающей точкой.</summary>
      <param name="arg">Входное значение.</param>
      <returns>Константа e в степени, равной входному значению.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>Возвращает экспоненциальное значение указанного выражения с плавающей точкой.</summary>
      <param name="arg">Входное значение.</param>
      <returns>Константа e в степени, равной входному значению.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>Возвращает текущую отметку времени базы данных в виде значения даты и времени без смещения часового пояса базы данных. Это значение происходит из операционной системы компьютера, на котором запущен экземпляр SQL Server.</summary>
      <returns>Текущая отметка времени базы данных.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>Возвращает текущую отметку времени базы данных в виде значения даты и времени. Смещение часового пояса базы данных не включается. Данное значение представляет текущее время в формате UTC. Это значение происходит из операционной системы компьютера, на котором запущен экземпляр SQL Server.</summary>
      <returns>Текущая отметка времени базы данных в формате UTC.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>Возвращает имя рабочей станции.</summary>
      <returns>Имя рабочей станции.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>Указывает, является ли входное значение допустимой датой или временем.</summary>
      <param name="arg">Протестированное значение.</param>
      <returns>Значение 1, если входное выражение является допустимым значением даты или времени типов данных datetime или smalldatetime; в противном случае, значение 0.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>Указывает, является ли входное значение допустимым числовым типом.</summary>
      <param name="arg">Строковое выражение.</param>
      <returns>Значение 1, если входное выражение является допустимым числовым типом данных; в противном случае — значение 0.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>Возвращает натуральный логарифм указанного входного значения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Натуральный логарифм входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>Возвращает натуральный логарифм указанного входного значения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Натуральный логарифм входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>Возвращает десятичный логарифм указанного входного значения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Десятичный логарифм входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>Возвращает десятичный логарифм указанного входного значения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Десятичный логарифм входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>Возвращает символ Юникода с указанным целочисленным кодом, определенным в стандарте Юникода.</summary>
      <param name="arg">Код знака.</param>
      <returns>Символ, соответствующий входному коду знака.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>Возвращает начальную позицию первого найденного шаблона в указанном выражении или ноли, если шаблон не найден во всех допустимых типах данных текста и символов.</summary>
      <param name="stringPattern">Шаблон строки для поиска соответствия.</param>
      <param name="target">Строка для поиска.</param>
      <returns>Положение первого символа, в котором был найден шаблон строки.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>Возвращает значение константы "пи".</summary>
      <returns>Численное значение числа "пи".</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>Возвращает строку Юникода, в которую добавлены разделители, чтобы входная строка являлась допустимым идентификатором с разделителем Microsoft SQL Server.</summary>
      <param name="stringArg">Выражение, к которому будут добавлены символы кавычек.</param>
      <returns>Исходная строка с квадратными скобками.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>Возвращает строку Юникода, в которую добавлены разделители, чтобы входная строка являлась допустимым идентификатором с разделителем Microsoft SQL Server.</summary>
      <param name="stringArg">Выражение, к которому будут добавлены символы кавычек.</param>
      <param name="quoteCharacter">Односимвольная строка, используемая в качестве разделителя. Это может быть одинарная кавычка ( ' ), открывающая или закрывающая квадратная скобка ( [ ] ) или двойная кавычка ( " ). Если значение аргумента quote_character не указано, используются скобки.</param>
      <returns>Исходная строка с указанными символами кавычек.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <param name="arg">Величина угла в градусах.</param>
      <returns>Величина указанного угла в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <param name="arg">Величина угла в градусах.</param>
      <returns>Величина указанного угла в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <param name="arg">Величина угла в градусах.</param>
      <returns>Величина указанного угла в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <param name="arg">Величина угла в градусах.</param>
      <returns>Величина указанного угла в радианах.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.R*******">
      <summary>Возвращает псевдослучайное число с плавающей точкой в диапазоне от 0 до 1, не включающем границы.</summary>
      <returns>Псевдослучайное значение.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.R*******(System.Nullable{System.Int32})">
      <summary>Возвращает псевдослучайное число с плавающей точкой в диапазоне от 0 до 1, не включающем границы.</summary>
      <param name="seed">Начальное значение. Если аргумент <paramref name="seed" /> не задан, то компонент SQL Server Database Engine присваивает случайно выбранное начальное значение. Для указанного начального значения возвращаемый результат всегда будет один и тот же.</param>
      <returns>Псевдослучайное значение.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>Повторяет строковое значение заданное количество раз.</summary>
      <param name="target">Допустимая строка.</param>
      <param name="count">Значение, указывающее, сколько раз нужно повторить <paramref name="target" />.</param>
      <returns>Целевая строка, повторенная количество раз, заданное параметром <paramref name="count" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Знак входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Знак входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Знак входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Знак входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический синус указанного угла.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический синус входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический синус указанного угла.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тригонометрический синус входного выражения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>Преобразует буквенно-цифровую строку в четырехсимвольный код (SOUNDEX) для поиска слов или имен с похожим звучанием.</summary>
      <param name="arg">Допустимая строка.</param>
      <returns>Код SOUNDEX входной строки.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>Возвращает строку пробелов.</summary>
      <param name="arg1">Количество пробелов. Если значение отрицательное, возвращается пустая строка.</param>
      <returns>Строка, состоящая из указанного количества пробелов.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>Возвращает квадрат указанного числа.</summary>
      <param name="arg1">Числовое выражение.</param>
      <returns>Квадрат входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>Возвращает квадрат указанного числа.</summary>
      <param name="arg1">Числовое выражение.</param>
      <returns>Квадрат входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>Возвращает квадратный корень из указанного числа.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Квадратный корень из входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>Возвращает квадратный корень из указанного числа.</summary>
      <param name="arg">Числовое выражение.</param>
      <returns>Квадратный корень из входного значения.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <returns>Входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки. Оно включает десятичную запятую, знак, цифры и пробелы. Значение по умолчанию — 10.</param>
      <returns>Входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки. Оно включает десятичную запятую, знак, цифры и пробелы. Значение по умолчанию — 10.</param>
      <param name="decimalArg">Количество знаков справа от десятичного разделителя. Значение параметра <paramref name="decimalArg" /> должно быть меньше либо равно 16. Если значение<paramref name="decimalArg" /> больше 16, результат обрезается до шестнадцати разрядов справа от десятичного разделителя.</param>
      <returns>Входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки. Оно включает десятичную запятую, знак, цифры и пробелы. Значение по умолчанию — 10.</param>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки. Оно включает десятичную запятую, знак, цифры и пробелы. Значение по умолчанию — 10.</param>
      <param name="decimalArg">Количество знаков справа от десятичного разделителя. Значение параметра <paramref name="decimalArg" /> должно быть меньше либо равно 16. Если значение<paramref name="decimalArg" /> больше 16, результат обрезается до шестнадцати разрядов справа от десятичного разделителя.</param>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>Вставляет строку в другую строку. Удаляет указанное количество символов из целевой строки в положении начала и вставляет вторую строку в целевую строку, начиная с этого положения.</summary>
      <param name="stringInput">Целевая строка.</param>
      <param name="start">Положение символа в <paramref name="stringInput" />, куда нужно вставить новую строку.</param>
      <param name="length">Число символов, предназначенных для удаления из <paramref name="stringInput" />. Если значение аргумента <paramref name="length" /> превышает длину <paramref name="stringInput" />, удаляются все символы вплоть до последнего в <paramref name="stringReplacement" />.</param>
      <param name="stringReplacement">Строка для вставки в <paramref name="stringInput" />.</param>
      <returns>Строка, содержащая две строки.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический тангенс входного выражения.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тангенс входного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический тангенс входного выражения.</summary>
      <param name="arg">Угол, измеряемый в радианах.</param>
      <returns>Тангенс входного угла.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>Возвращает целочисленное значение первого символа заданного выражения в стандарте Юникод.</summary>
      <param name="arg">Допустимая строка.</param>
      <returns>Код знака первого символа входной строки.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>Возвращает имя пользователя базы данных, соответствующее указанному идентификационному номеру.</summary>
      <returns>Имя пользователя.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>Возвращает имя пользователя базы данных, соответствующее указанному идентификационному номеру.</summary>
      <param name="arg">ИД пользователя.</param>
      <returns>Имя пользователя.</returns>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlSpatialFunctions">
      <summary>Представляет пространственные функции SQL для клиента SQL.</summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeography)">
      <summary>Возвращает представление экземпляра географического объекта в формате WKT открытого геопространственного консорциума (OGC), дополненное значениями Z (высота) и M (мера), сопровождающими этот экземпляр.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <returns>Представление экземпляра географического объекта в формате Well-Known Text (WKT) консорциума Open Geospatial Consortium (OGC).</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает представление экземпляра географического объекта в формате WKT открытого геопространственного консорциума (OGC), дополненное значениями Z (высота) и M (мера), сопровождающими этот экземпляр.</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <returns>Представление экземпляра геометрического объекта в формате Well-Known Text (WKT) консорциума Open Geospatial Consortium (OGC).</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeography,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>Возвращает геометрический объект, представляющий Объединение значений всех точек, расстояние от которых до экземпляра географического объекта меньше или равно указанному значению с указанной погрешностью.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <param name="distance">Расстояние.</param>
      <param name="tolerance">Указанный допуск.</param>
      <param name="relative">Указывает, является ли значение допуска относительным или абсолютным.</param>
      <returns>Объединение значений всех точек, расстояние от которых до экземпляра географического объекта меньше или равно указанному значению</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeometry,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>Возвращает геометрический объект, представляющий Объединение значений всех точек, расстояние от которых до экземпляра геометрического объекта меньше или равно указанному значению с указанной погрешностью.</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <param name="distance">Расстояние.</param>
      <param name="tolerance">Указанный допуск.</param>
      <param name="relative">Указывает, является ли значение допуска относительным или абсолютным.</param>
      <returns>Объединение значений всех точек, расстояние от которых до экземпляра геометрического объекта меньше или равно указанному значению</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeAngle(System.Data.Spatial.DbGeography)">
      <summary>Возвращает максимальный угол между точкой, возвращаемой методом EnvelopeCenter() и точкой в экземпляре географического объекта в градусах.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <returns>максимальный угол между точкой, возвращаемой EnvelopeCenter().</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeCenter(System.Data.Spatial.DbGeography)">
      <summary>Возвращает точку, которую можно использовать как центр ограничивающей окружности для экземпляра географического объекта.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <returns>значение SqlGeography, указывающее расположение центра ограничивающей окружности.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Предоставляет быстрый, основанный только на индексах метод пересечения для определения того, пересекается ли экземпляр географии с другим экземпляром SqlGeography (предполагает, что индекс доступен).</summary>
      <param name="geographyValue">Географическое значение.</param>
      <param name="geographyOther">Другой экземпляр географии, сравниваемый с экземпляром, на котором вызван фильтр.</param>
      <returns>Значение <see langword="true" />, если экземпляр географического объекта потенциально пересекается с другим экземпляром SqlGeography; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Предоставляет быстрый, основанный только на индексах метод пересечения для определения того, пересекается ли экземпляр географии с другим экземпляром SqlGeometry (предполагает, что индекс доступен).</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <param name="geometryOther">Другой экземпляр географии, сравниваемый с экземпляром, на котором вызван фильтр.</param>
      <returns>Значение <see langword="true" />, если экземпляр географического объекта потенциально пересекается с другим экземпляром SqlGeography; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeography,System.String)">
      <summary>Проверяет, принадлежит ли экземпляр SqlGeography к тому же типу, что и указанный тип.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <param name="geometryTypeName">Строка, задающая один из 12 типов, представленных в иерархии типов Geography.</param>
      <returns>Строка, задающая один из 12 типов, представленных в иерархии типов Geography.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeometry,System.String)">
      <summary>Проверяет, принадлежит ли экземпляр SqlGeometry к тому же типу, что и указанный тип.</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <param name="geometryTypeName">Строка, задающая один из 12 типов, представленных в иерархии типов Geography.</param>
      <returns>Строка, задающая один из 12 типов, представленных в иерархии типов Geography.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.MakeValid(System.Data.Spatial.DbGeometry)">
      <summary>Преобразует недопустимый геометрический объект в геометрический объект с допустимым типом OGC.</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <returns>Преобразованный экземпляр геометрического объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.NumRings(System.Data.Spatial.DbGeography)">
      <summary>Возвращает общее количество колец в экземпляре многоугольника.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <returns>Общее число колец.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeography(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Создает экземпляр географического объекта, представляющий экземпляр Point, по значениям x и y и идентификатору пространственной ссылки (SRID).</summary>
      <param name="latitude">Координата X создаваемой точки.</param>
      <param name="longitude">Координата Y создаваемой точки.</param>
      <param name="spatialReferenceId">Идентификатор SRID экземпляра географического объекта.</param>
      <returns>Созданный экземпляр географического объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeometry(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Создает экземпляр геометрического объекта, представляющий экземпляр Point, по значениям x и y и идентификатору пространственной ссылки (SRID).</summary>
      <param name="xCoordinate">Координата X создаваемой точки.</param>
      <param name="yCoordinate">Координата Y создаваемой точки.</param>
      <param name="spatialReferenceId">Идентификатор SRID экземпляра географического объекта.</param>
      <returns>Созданный экземпляр геометрического объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeography,System.Nullable{System.Double})">
      <summary>Возвращает приближенное значение заданного экземпляра географического объекта, полученное путем выполнения алгоритма Дугласа-Пекера для экземпляра с заданным допуском.</summary>
      <param name="geographyValue">Географическое значение.</param>
      <param name="tolerance">Допуск, который требуется ввести в алгоритм Дугласа-Пекера. допуск должен быть положительным числом</param>
      <returns>Возвращает <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeometry,System.Nullable{System.Double})">
      <summary>Возвращает приближенное значение заданного экземпляра географического объекта, полученное путем выполнения алгоритма Дугласа-Пекера для экземпляра с заданным допуском.</summary>
      <param name="geometryValue">Геометрическое значение.</param>
      <param name="tolerance">Допуск, который требуется ввести в алгоритм Дугласа-Пекера. допуск должен быть положительным числом</param>
      <returns>Возвращает <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.RingN(System.Data.Spatial.DbGeography,System.Nullable{System.Int32})">
      <summary>Возвращает указанное кольцо экземпляра SqlGeography: 1 ≤ n ≤ NumRings().</summary>
      <param name="geographyValue">Географическое значение.</param>
      <param name="index">Целочисленное выражение со значением от 1 до количества колец в экземпляре многоугольника.</param>
      <returns>Объект SqlGeography, представляющий кольцо, заданное n.</returns>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>Исключение, возникающее при нарушении оптимистичного параллелизма.</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.OptimisticConcurrencyException" />.</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.OptimisticConcurrencyException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.OptimisticConcurrencyException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.OptimisticConcurrencyException" />, использующий заданное сообщение об ошибке, ссылку на внутреннее исключение и перечислимую коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
      <param name="stateEntries">Перечислимая коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
    </member>
    <member name="T:System.Data.PropertyConstraintException">
      <summary>Класс исключений ограничений свойства. Обратите внимание, что этот класс имеет состояние, поэтому если изменить даже его интервалы, это может быть критическое изменение.</summary>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.PropertyConstraintException" /> с сообщением по умолчанию.</summary>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.PropertyConstraintException" /> с предоставленным сообщением.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.PropertyConstraintException" /> указанным сообщением и внутренним исключением.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.PropertyConstraintException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.PropertyConstraintException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="propertyName">Имя свойства.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</param>
      <param name="context">Контекст сериализации.</param>
    </member>
    <member name="P:System.Data.PropertyConstraintException.PropertyName">
      <summary>Получает имя свойства, нарушившего ограничение.</summary>
      <returns>Имя свойства, нарушившего ограничение.</returns>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>Исключение, возникающее при несовместимости базового поставщика данных с платформой Entity Framework.</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.ProviderIncompatibleException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.ProviderIncompatibleException" />, использующий заданное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.Spatial.DbGeography">
      <summary>Представляет данные в геодезической системе координат (для круглой земли).</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Area">
      <summary>Получает значение типа double, допускающее значение NULL, указывающее область этого значения DbGeography, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <returns>Значение типа double, допускающее значение NULL, указывающее область данного значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsBinary">
      <summary>Создает известное бинарный представление (WKB) этого значения DbGeography.</summary>
      <returns>Представление в двоичном формате WKB этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsGml">
      <summary>Создает представление языка GML этого значения DbGeography.</summary>
      <returns>Строка, содержащая представление GML этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsText">
      <summary>Создает известное текстовое представление (WKТ) этого значения DbGeography.  Включает только широту и долготу для точек.</summary>
      <returns>Строка, содержащая представление в WKT (известное текстовое значение) этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>Возвращает объект географии, представляющий Объединение всех точек, расстояние от которых до экземпляра географического объекта меньше или равно указанному значению</summary>
      <param name="distance">Расстояние.</param>
      <returns>Географический объект, представляющий объединение всех точек</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.CoordinateSystemId">
      <summary>Получает идентификатор, связанный с системой координат.</summary>
      <returns>Идентификатор, связанный с системой координат.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>Получает используемый по умолчанию идентификатор системы координат (SRID) для географических значений (WGS 84).</summary>
      <returns>Используемый по умолчанию идентификатор системы координат (SRID) для географических значений (WGS 84).</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Difference(System.Data.Spatial.DbGeography)">
      <summary>Вычисляет различие этого значения DbGeography и другого значения DbGeography.</summary>
      <param name="other">Географическое значение, для которого требуется вычислить разность с этим значением.</param>
      <returns>Новое значение DbGeography, представляющее различие между этим географическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Dimension">
      <summary>Получает размерность данного значения <see cref="T:System.Data.Spatial.DbGeography" /> или (если значение представляет совокупность) размер наибольшего элемента.</summary>
      <returns>Размер данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Disjoint(System.Data.Spatial.DbGeography)">
      <summary>Определяет, является ли это DbGeography пространственного перекрываемым с указанного аргументом DbGeography.</summary>
      <param name="other">Географическое значение, которое требуется сравнить с данным географическим значением на предмет отсутствия пересечений.</param>
      <returns>Значение <see langword="true" />, если <paramref name="other" /> не пересекается с этим географическим значением; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Distance(System.Data.Spatial.DbGeography)">
      <summary>Вычисляет расстояние между наиболее близкими точками в этом значении DbGeography и другом значении DbGeography.</summary>
      <param name="other">Географическое значение, для которого требуется вычислить расстояние от этого значения.</param>
      <returns>Значение типа double, указывающее расстояние между двумя наиболее близкими точками в данном географическом значении и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>Возвращает элемент этого значения DbGeography с определенной позиции, если она представляет коллекцию географий. &lt;param name="index"&gt;Позиция в этом значении географии, из которого должен быть извлечен элемент.&lt;/param&gt;&lt;returns&gt;Элемент в указанной позиции этого значения географии, если оно представляет коллекцию других значений географии; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <param name="index">Индекс.</param>
      <returns>Элемент этого значения DbGeography с определенной позиции</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ElementCount">
      <summary>Получает количество элементов в данном значении DbGeography, если оно представляет географическую коллекцию. &lt;returns&gt;Количество элементов в этом значении географии, если оно представляет коллекцию других значений географии; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Количество элементов в этом значении DbGeography.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Elevation">
      <summary>Получает высоту (Z-координату) данного значения DbGeography, если оно представляет точку. &lt;returns&gt;Высота (координата по оси Z) этого значения географии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Высота (координата Z) этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.EndPoint">
      <summary>Получает значение DbGeography, представляющее начальную точку этого значения, которое может иметь значение null, если это значение DbGeography не представляет кривую.</summary>
      <returns>Значение DbGeography, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного значения в формате WKB.</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <returns>Новое значение DbGeography в соответствии с значением WKB (известное бинарное значение) с идентификатором географической системы координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного значения языка географической разметки (GML).</summary>
      <param name="geographyMarkup">Строка, которая содержит представление в языке географической разметки GML географического значения.</param>
      <returns>Новое значение DbGeography в соответствии с значением GML с идентификатором системы географических координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного значения языка географической разметки (GML) и идентификатора системы координат (SRID).</summary>
      <param name="geographyMarkup">Строка, которая содержит представление в языке географической разметки GML географического значения.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии с значением GML с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного значения в формате WKT.</summary>
      <param name="wellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <returns>Новое значение DbGeography в соответствии с значением WKT (известное текстовое значение) с идентификатором географической системы координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="geographyCollectionWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="geographyCollectionWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersection(System.Data.Spatial.DbGeography)">
      <summary>Вычисляет пересечение этого значения DbGeography и другого значения DbGeography.</summary>
      <param name="other">Географическое значение, для которого требуется вычислить пересечение с этим значением.</param>
      <returns>Новое значение DbGeography, представляющее пересечение между этим географическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersects(System.Data.Spatial.DbGeography)">
      <summary>Определяет, является ли это значение DbGeography пространственного пересекающимся с указанным аргументом DbGeography.</summary>
      <param name="other">Географическое значение, которое требуется сравнить с данным географическим значением на предмет пересечений.</param>
      <returns>Значение <see langword="true" />, если <paramref name="other" /> пересекается с этим географическим значением; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsClosed">
      <summary>Получает логическое значение, допускающее значение NULL, указывающее, закрыто ли заданное значение DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeography является замкнутым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsEmpty">
      <summary>Получает логическое значение, допускающий значение NULL и показывающее, является ли это значение DbGeography пустым.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeography является пустым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Latitude">
      <summary>Получает координату широты значения DbGeography, если оно представляет точку. &lt;returns&gt;Координата широты для этого значения географии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Координата широты этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Length">
      <summary>Получает значение типа double, допускающее значение NULL, указывающее длину этого значения DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение типа double, допускающее значение NULL, указывающее длину данного значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Longitude">
      <summary>Получает координату долготы значения DbGeography, если оно представляет точку. &lt;returns&gt;Координата долготы для этого значения географии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Координата долготы этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Measure">
      <summary>Получает координату М (меру) значения DbGeography, если оно представляет точку. &lt;returns&gt;Координата M (мера) для этого значения географии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Координата M (Мера) этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает многострочное значение из двоичного значения.</summary>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многострочное значение из двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>Возвращает многострочное значение из хорошо известного текстового значения.</summary>
      <param name="multiLineWellKnownText">Хорошо известный текст.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многострочное значение из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает многоточечное значение из известного двоичного значения.</summary>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многоточечное значение из известного двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>Возвращает многоточечное значение из хорошо известного текстового значения.</summary>
      <param name="multiPointWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многоточечное значение из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение мультиполигона из хорошо известного двоичного значения.</summary>
      <param name="multiPolygonWellKnownBinary">Хорошо известное двоичное значение мультиполигона.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Значение мультиполигона из хорошо известного двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Возвращает значение мультиполигона из хорошо известного текстового значения.</summary>
      <param name="multiPolygonWellKnownText">Хорошо известное текстовое значение мультиполигона.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Значение мультиполигона из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>Возвращает элемент этого значения DbGeography с определенной позиции, если он представляет linestring или линейное кольцо. &lt;param name="index"&gt;Позиция в этом значении географии, из которой должен быть извлечен элемент.&lt;/param&gt;&lt;returns&gt;Элемент в указанной позиции этого значения географии, если оно представляет LineString или линейное кольцо; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <param name="index">Индекс.</param>
      <returns>Элемент этого значения DbGeography с определенной позиции</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.PointCount">
      <summary>Получает количество точек в данном значении DbGeography, если оно представляет linestring или линейное кольцо. &lt;returns&gt;Количество элементов в этом значении географии, если оно представляет LineString или линейное кольцо; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Количество точек в этом значении DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeography.</param>
      <returns>Новое значение DbGeography в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ProviderValue">
      <summary>Получает представление данного значения DbGeography, которое относится к базовому поставщику, который его создал.</summary>
      <returns>Представление данного значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SpatialEquals(System.Data.Spatial.DbGeography)">
      <summary>Определяет, является ли это DbGeography пространственного равным с указанного аргументом DbGeography.</summary>
      <param name="other">Географическое значение, которое требуется сравнить с данным географическим значением на предмет равенства.</param>
      <returns>
        <see langword="true" />, если значение параметра <paramref name="other" /> пространственно равно этому географическому значению; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.SpatialTypeName">
      <summary>Получает имя пространственного типа DBGeography.</summary>
      <returns>Имя пространственного типа DBGeography.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.StartPoint">
      <summary>Получает значение DbGeography, представляющее начальную точку этого значения, которое может иметь значение null, если это значение DbGeography не представляет кривую.</summary>
      <returns>Значение DbGeography, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SymmetricDifference(System.Data.Spatial.DbGeography)">
      <summary>Вычисляет симметричное различие этого значения DbGeography и другого значения DbGeography.</summary>
      <param name="other">Географическое значение, для которого требуется вычислить симметрическую разность с этим значением.</param>
      <returns>Новое значение DbGeography, представляющее симметричное различие между этим географическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ToString">
      <summary>Возвращает строковое представление географического значения.</summary>
      <returns>Строковое представление географического значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Union(System.Data.Spatial.DbGeography)">
      <summary>Вычисляет объединение этого значения DbGeography и другого значения DbGeography.</summary>
      <param name="other">Географическое значение, для которого требуется вычислить объединение с этим значением.</param>
      <returns>Новое значение DbGeography, представляющее объединение между этим географическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.WellKnownValue">
      <summary>Получает или задает представление стандартное сериализуемое представление контракта данных этого значения DbGeography.</summary>
      <returns>Стандартное сериализуемое представление контракта данных этого значения DbGeography.</returns>
    </member>
    <member name="T:System.Data.Spatial.DbGeographyWellKnownValue">
      <summary>Сериализуемое представление контракта данных значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
    </member>
    <member name="M:System.Data.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>Получает или задает идентификатор системы координат этого значения.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>Получает или задает известное бинарное представление данного значения.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>Получает или задает известное текстовое представление данного значения.</summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeometry">
      <summary>Предоставляет базовый класс для объектов, которые определяют геометрические фигуры.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Area">
      <summary>Получает значение типа double, допускающее значение NULL, указывающее область этого значения DbGeometry, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <returns>Значение типа double, допускающее значение NULL, указывающее область данного значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsBinary">
      <summary>Создает известное бинарный представление (WKB) этого значения DbGeometry.</summary>
      <returns>Представление в двоичном формате WKB этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsGml">
      <summary>Создает представление языка GML этого значения DbGeometry.</summary>
      <returns>Строка, содержащая представление GML этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsText">
      <summary>Создает известное текстовое представление (WKТ) этого значения DbGeometry.  Включает только координаты X и Y для точек.</summary>
      <returns>Строка, содержащая представление в WKT (известное текстовое значение) этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Boundary">
      <summary>Получает границу объектов DbGeometry.</summary>
      <returns>Граница объектов DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>Возвращает геометрический объект, представляющий Объединение всех точек, расстояние от которых до экземпляра геометрического объекта меньше или равно указанному значению</summary>
      <param name="distance">Расстояние.</param>
      <returns>Геометрический объект, представляющий объединение всех точек</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Centroid">
      <summary>Получает значение DbGeometry, представляющее центроид данного значения DbGeometry, которое может быть равным null, если данное значение не представляет поверхность.</summary>
      <returns>Значение DbGeometry, которое представляет центроид этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Contains(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, содержит ли это значение DbGeometry пространственно указанного аргумента DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет содержания.</param>
      <returns>Значение <see langword="true" />, если это значение геометрии содержит <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ConvexHull">
      <summary>Получает выпуклую оболочку данного значения DbGeometry в виде другого значения DbGeometry.</summary>
      <returns>Выпуклая оболочка данного значения DbGeometry в виде другого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.CoordinateSystemId">
      <summary>Получает идентификатор системы координат объекта DbGeometry.</summary>
      <returns>Идентификатор системы координат объекта DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Crosses(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это значение DbGeometry пространственно пересекающимся с указанным аргумента DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением.</param>
      <returns>Значение <see langword="true" />, если это значение геометрии перекрывается с <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>Получает используемый по умолчанию идентификатор системы координат (SRID) для геометрических значений.</summary>
      <returns>Используемый по умолчанию идентификатор системы координат (SRID) для геометрических значений.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Difference(System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет различие между этим значением DbGeometry и другим значением DbGeometry.</summary>
      <param name="other">Геометрическое значение, для которого требуется вычислить разность с этим значением.</param>
      <returns>Новое значение DbGeometry, представляющее различие между этим геометрическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Dimension">
      <summary>Получает размерность данного значения <see cref="T:System.Data.Spatial.DbGeometry" /> или, если значение является коллекцией, размерность ее наибольшего элемента.</summary>
      <returns>Размер данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Disjoint(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это DbGeometry пространственного перекрываемым с указанного аргументом DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет отсутствия пересечений.</param>
      <returns>Значение <see langword="true" />, если <paramref name="other" /> не пересекается с этим геометрическим значением; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Distance(System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет расстояние между наиболее близкими точками в этом значении DbGeometry и другом значении DbGeometry.</summary>
      <param name="other">Геометрическое значение, для которого требуется вычислить расстояние от этого значения.</param>
      <returns>Значение типа double, указывающее расстояние между двумя наиболее близкими точками в данном геометрическом значении и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>Возвращает элемент этого значения DbGeometry с определенной позиции, если она представляет коллекцию геометрий. &lt;param name="index"&gt;Позиция в этом значении геометрии, из которой должен быть извлечен элемент.&lt;/param&gt;&lt;returns&gt;Элемент в указанной позиции этого значения геометрии, если оно представляет коллекцию других значений геометрии; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <param name="index">Индекс.</param>
      <returns>Элемент этого значения DbGeometry с определенной позиции.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ElementCount">
      <summary>Получает количество элементов в данном значении DbGeometry, если оно представляет геометрическую коллекцию. &lt;returns&gt;Количество элементов в этом значении геометрии, если оно представляет коллекцию других значений геометрии; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Количество элементов в этом значении DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Elevation">
      <summary>Получает высоту (Z-координату) данного значения DbGeometry, если оно представляет точку. &lt;returns&gt;Возвращает высоту (координату по оси Z) этого значения геометрии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Высота (координата Z) этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.EndPoint">
      <summary>Получает значение DbGeometry, представляющее начальную точку этого значения, которое может иметь значение null, если это значение DbGeometry не представляет кривую.</summary>
      <returns>Значение DbGeometry, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Envelope">
      <summary>Получает огибающую (минимальный ограничивающий прямоугольник) данного значения DbGeometry в виде геометрического значения.</summary>
      <returns>Конверт (минимальный ограничивающий прямоугольник) этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ExteriorRing">
      <summary>Получает значение DbGeometry, представляющее внешнее кольцо данного значения DbGeometry, которое может быть равным null, если данное значение не представляет многоугольник.</summary>
      <returns>Значение DbGeometry, которое представляет внешнее кольцо этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного значения в формате WKB.</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <returns>Новое значение DbGeometry в соответствии с значением WKB (известное бинарное значение) с идентификатором геометрической системы координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного значения языка географической разметки (GML).</summary>
      <param name="geometryMarkup">Строка, содержащая представление геометрического значения в языке географической разметки GML.</param>
      <returns>Новое значение DbGeometry в соответствии с значением GML с идентификатором геометрической системы координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного значения языка географической разметки (GML) и идентификатора системы координат (SRID).</summary>
      <param name="geometryMarkup">Строка, содержащая представление геометрического значения в языке географической разметки GML.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии с значением GML с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного значения в формате WKT.</summary>
      <param name="wellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <returns>Новое значение DbGeometry в соответствии с значением WKT (известное текстовое значение) с идентификатором геометрической системы координат (SRID) по умолчанию (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="geometryCollectionWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="geometryCollectionWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>Возвращает внутреннее кольцо из этого значения DbGeometry в заданной позиции, если оно представляет собой многоугольник. &lt;param name="index"&gt;Позиция в этом значении геометрии, из которой должно быть извлечено внутреннее кольцо.&lt;/param&gt;&lt;returns&gt;Внутреннее кольцо в указанной позиции этого значения геометрии, если оно представляет многоугольник; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <param name="index">Индекс.</param>
      <returns>Внутреннее кольцо из этого значения DbGeometry в определенной позиции.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.InteriorRingCount">
      <summary>Получает количество внутренних колец в данном значении DbGeometry, если оно представляет многоугольник. &lt;returns&gt;Количество элементов в этом значении геометрии, если оно представляет многоугольник; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Количество внутренних колец в этом значении DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersection(System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет пересечение этого значения DbGeometry и другого значения DbGeometry.</summary>
      <param name="other">Геометрическое значение, для которого требуется вычислить пересечение с этим значением.</param>
      <returns>Новое значение DbGeometry, представляющее пересечение между этим геометрическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersects(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это значение DbGeometry пространственно пересекающимся с указанным аргументом DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет наличия пересечений.</param>
      <returns>Значение <see langword="true" />, если <paramref name="other" /> пересекается с этим геометрическим значением; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsClosed">
      <summary>Получает логическое значение, допускающее значение NULL, указывающее, закрыто ли заданное значение DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeometry является замкнутым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsEmpty">
      <summary>Получает логическое значение, допускающее значение NULL, указывающее, пусто ли заданное значение DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeometry является пустым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsRing">
      <summary>Получает логическое значение, допускающее значение NULL, указывающее, является ли заданное значение DbGeometry кольцом, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение <see langword="true" />, если значение DbGeometry является кольцом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsSimple">
      <summary>Получает логическое значение, допускающий значение NULL и показывающее, является ли это значение DbGeometry простым.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeometry является простым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsValid">
      <summary>Получает логическое значение, допускающий значение NULL и показывающее, является ли это значение DbGeometry допустимым.</summary>
      <returns>Значение <see langword="true" />, если это значение DbGeometry является действительным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Length">
      <summary>Получает значение типа double, допускающее значение NULL, указывающее длину этого значения DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Длина этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Measure">
      <summary>Получает меру (М-координату) значения DbGeometry, если оно представляет точку. &lt;returns&gt;Значение меры (координата по оси M) этого значения геометрии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Мера (координата M) этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает многострочное значение из двоичного значения.</summary>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многострочное значение из двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>Возвращает многострочное значение из хорошо известного текстового значения.</summary>
      <param name="multiLineWellKnownText">Хорошо известный текст.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многострочное значение из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает многоточечное значение из известного двоичного значения.</summary>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многоточечное значение из известного двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>Возвращает многоточечное значение из хорошо известного текстового значения.</summary>
      <param name="multiPointWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многоточечное значение из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение мультиполигона из хорошо известного двоичного значения.</summary>
      <param name="multiPolygonWellKnownBinary">Хорошо известное текстовое значение мультиполигона.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Многоточечное значение из хорошо известного текстового значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Возвращает значение мультиполигона из хорошо известного двоичного значения.</summary>
      <param name="multiPolygonWellKnownText">Хорошо известное текстовое значение мультиполигона.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Значение мультиполигона из хорошо известного двоичного значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Overlaps(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это значение DbGeometry пространственно перекрывающимся с указанным аргумента DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет перекрывания.</param>
      <returns>Значение <see langword="true" />, если это значение геометрии перекрывается с <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>Возвращает элемент этого значения DbGeometry с определенной позиции, если он представляет linestring или линейное кольцо. &lt;param name="index"&gt;Позиция в этом значении геометрии, из которой должен быть извлечен элемент.&lt;/param&gt;&lt;returns&gt;Элемент в указанной позиции этого значения геометрии, если оно представляет LineString или линейное кольцо; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <param name="index">Индекс.</param>
      <returns>Элемент этого значения DbGeometry с определенной позиции.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointCount">
      <summary>Получает количество точек в данном значении DbGeometry, если оно представляет linestring или линейное кольцо. &lt;returns&gt;Количество элементов в этом значении геометрии, если оно представляет LineString или линейное кольцо; в противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Количество точек в этом значении DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointOnSurface">
      <summary>Получает точку на поверхности этого значения DbGeometry, которое может иметь значение null, если это значение не представляет поверхность.</summary>
      <returns>Точка на поверхности этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения (WKB) и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKB с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения (WKT) и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением DbGeometry.</param>
      <returns>Новое значение DbGeometry в соответствии со значением в формате WKT с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ProviderValue">
      <summary>Получает представление данного значения DbGeometry, которое относится к базовому поставщику, который его создал.</summary>
      <returns>Представление данного значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Relate(System.Data.Spatial.DbGeometry,System.String)">
      <summary>Определяет, относится ли это значение DbGeometry пространственно к указанному аргументу DbGeometry в соответствии с заданным шаблоном пересечения расширенной 9-мерной модели размерностей (DE-9IM).</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет соотношения.</param>
      <param name="matrix">Строка, содержащая текстовое представление шаблона пересечения (DE-9IM), определяющего отношение.</param>
      <returns>Значение <see langword="true" />, если это геометрические значение соотносится с <paramref name="other" /> в соответствии с указанной матрицей шаблонов пересечения; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
        <paramref name="matrix" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SpatialEquals(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это DbGeometry пространственного равным с указанного аргументом DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет равенства.</param>
      <returns>
        <see langword="true" />, если значение параметра <paramref name="other" /> пространственно равно этому геометрическому значению; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.SpatialTypeName">
      <summary>Получает представление имени пространственного типа этого значения DbGeometry.</summary>
      <returns>представление имени пространственного типа этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.StartPoint">
      <summary>Получает значение DbGeometry, представляющее начальную точку этого значения, которое может иметь значение null, если это значение DbGeometry не представляет кривую.</summary>
      <returns>Значение DbGeometry, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SymmetricDifference(System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет симметричное различие между этим значением DbGeometry и другим значением DbGeometry.</summary>
      <param name="other">Геометрическое значение, для которого требуется вычислить симметрическую разность с этим значением.</param>
      <returns>Новое значение DbGeometry, представляющее симметричное различие между этим геометрическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ToString">
      <summary>Возвращает строковое представление геометрического значения.</summary>
      <returns>Строковое представление геометрического значения.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Touches(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это значение DbGeometry пространственно касающимся указанного аргумента DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением.</param>
      <returns>Значение <see langword="true" />, если это значение геометрии касается <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Union(System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет объединение этого значения DbGeometry и другого значения DbGeometry.</summary>
      <param name="other">Геометрическое значение, для которого требуется вычислить объединение с этим значением.</param>
      <returns>Новое значение DbGeometry, представляющее объединение между этим геометрическим значением и <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.WellKnownValue">
      <summary>Получает или задает представление стандартное сериализуемое представление контракта данных этого значения DbGeometry.</summary>
      <returns>Стандартное сериализуемое представление контракта данных этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Within(System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли это значение DbGeometry пространственного внутри указанного аргументом DbGeometry.</summary>
      <param name="other">Геометрическое значение, которое требуется сравнить с данным геометрическим значением на предмет содержания.</param>
      <returns>Значение <see langword="true" />, если это значение геометрии в пределах <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.XCoordinate">
      <summary>Получает X-координату данного значения DbGeometry, если оно представляет точку. &lt;returns&gt;Координата по оси X этого значения геометрии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Координата X этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.YCoordinate">
      <summary>Получает Y-координату данного значения DbGeometry, если оно представляет точку. &lt;returns&gt;Координата по оси Y этого значения геометрии, если оно представляет точку. В противном случае значение <see langword="null" />.&lt;/returns&gt;</summary>
      <returns>Координата Y этого значения DbGeometry.</returns>
    </member>
    <member name="T:System.Data.Spatial.DbGeometryWellKnownValue">
      <summary>Сериализуемое представление контракта данных значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
    </member>
    <member name="M:System.Data.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>Получает или задает идентификатор системы координат этого значения.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>Получает или задает известное бинарное представление данного значения.</summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>Получает или задает известное текстовое представление данного значения.</summary>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialDataReader">
      <summary>Поставщик-независимое служба API для поддержки геопространственных типов (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Spatial.DbSpatialDataReader" />.</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>При реализации в производных типах считывает экземпляр <see cref="T:System.Data.Spatial.DbGeography" /> из столбца с указанным порядковым номером.</summary>
      <param name="ordinal">Порядковый номер столбца, содержащего географическое значение.</param>
      <returns>Экземпляр DbGeography с указанным значением столбца</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>При реализации в производных типах считывает экземпляр <see cref="T:System.Data.Spatial.DbGeometry" /> из столбца с указанным порядковым номером.</summary>
      <param name="ordinal">Порядковый номер столбца записи данных, который содержит геометрические данные, специфичные для поставщика</param>
      <returns>Экземпляр DbGeometry с указанным значением столбца</returns>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialServices">
      <summary>Представляет поставщик-независимую служба API для поддержки геопространственных типов (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Spatial.DbSpatialServices" />.</summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeography)">
      <summary>Получает известное двоичное представление заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Географическое значение, для которого требуется создать WKB-код (Well-Known Binary).</param>
      <returns>Представление в формате WKB заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeometry)">
      <summary>Получает известное двоичное представление заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Геометрическое значение, для которого требуется создать WKB-код (Well-Known Binary).</param>
      <returns>Представление в формате WKB заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeography)">
      <summary>Создает представление языка GML этого значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Географическое значение, для которого требуется создать GML.</param>
      <returns>Строка, содержащая представление GML этого значения DbGeography.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeometry)">
      <summary>Создает представление языка GML этого значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Геометрическое значение, для которого требуется создать GML.</param>
      <returns>Строка, содержащая представление GML этого значения DbGeometry.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeography)">
      <summary>Получает известное текстовое представление заданного значения <see cref="T:System.Data.Spatial.DbGeography" />. Это значение должно включать только долготу и широту точки.</summary>
      <param name="geographyValue">Географическое значение, для которого требуется создать WKT-код (Well-Known Text).</param>
      <returns>Строка, содержащая представление WKT <paramref name="geographyValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeometry)">
      <summary>Получает известное текстовое представление заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, включая только координаты X и Y для точек.</summary>
      <param name="geometryValue">Геометрическое значение, для которого требуется создать WKT-код (Well-Known Text).</param>
      <returns>Строка, содержащая представление WKT <paramref name="geometryValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeography)">
      <summary>Возвращает текстовое представление <see cref="T:System.Data.Spatial.DbSpatialServices" /> со значениями высоты и меры.</summary>
      <param name="geographyValue">Значение geography.</param>
      <returns>Текстовое представление <see cref="T:System.Data.Spatial.DbSpatialServices" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает текстовое представление <see cref="T:System.Data.Spatial.DbSpatialServices" /> со значениями высоты и меры.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Текстовое представление <see cref="T:System.Data.Spatial.DbSpatialServices" /> с высотой и мерой.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeography,System.Double)">
      <summary>Создает значение географии, представляющие все точки, меньшие или равные <paramref name="distance" /> от данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Значение geography.</param>
      <param name="distance">Значение типа double, указывающее расстояние от <paramref name="geographyValue" /> до буфера.</param>
      <returns>Новое значение DbGeography, представляющие все точки, меньшие или равные расстоянию <paramref name="distance" /> от <paramref name="geographyValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeometry,System.Double)">
      <summary>Создает значение геометрии, представляющие все точки, меньшие или равные расстоянию <paramref name="distance" /> от данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <param name="distance">Значение типа double, указывающее расстояние от <paramref name="geometryValue" /> до буфера.</param>
      <returns>Новое значение DbGeometry, представляющие все точки, меньшие или равные расстоянию <paramref name="distance" /> от <paramref name="geometryValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Contains(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли одно значение <see cref="T:System.Data.Spatial.DbGeometry" /> пространственно в пределах другого.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Принимает значение <see langword="true" />, если <paramref name="geometryValue" /> содержит <paramref name="otherGeometry" />; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeography(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>Этот метод предназначен для использования производными реализациями метода <see cref="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> после соответствующей проверки значения указанного поставщика, чтобы убедиться, что его можно использовать с производной реализацией.</summary>
      <param name="spatialServices">Экземпляр пространственных служб, от которого будет зависеть возвращаемое значение <see cref="T:System.Data.Spatial.DbGeography" /> для его реализации пространственной функциональности.</param>
      <param name="providerValue">Значение поставщика.</param>
      <returns>Новый экземпляр <see cref="T:System.Data.Spatial.DbGeography" />, содержащий указанное значение <paramref name="providerValue" /> и использующий указанное значение <paramref name="spatialServices" /> как пространственную реализацию.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialServices" />
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeometry(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>Этот метод предназначен для использования производными реализациями метода <see cref="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> после соответствующей проверки значения указанного поставщика, чтобы убедиться, что его можно использовать с производной реализацией.</summary>
      <param name="spatialServices">Экземпляр пространственных служб, от которого будет зависеть возвращаемое значение <see cref="T:System.Data.Spatial.DbGeometry" /> для его реализации пространственной функциональности.</param>
      <param name="providerValue">Значение поставщика.</param>
      <returns>Новый экземпляр <see cref="T:System.Data.Spatial.DbGeometry" />, содержащий указанное значение <paramref name="providerValue" /> и использующий указанное значение <paramref name="spatialServices" /> как пространственную реализацию.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialServices" />
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeographyWellKnownValue)">
      <summary>Создает значение, зависящее от поставщика, которое совместимо с этой реализацией пространственной службы, на основе указанного известного представления <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="wellKnownValue">Экземпляр <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" />, содержащий представление в формате WK географического значения.</param>
      <returns>Зависящее от поставщика значение, которое кодирует сведения, содержащихся в <paramref name="wellKnownValue" />, совместимым с данной реализацией геопространственных служб способом.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeometryWellKnownValue)">
      <summary>Создает значение, зависящее от поставщика, которое совместимо с этой реализацией пространственной службы, на основе указанного известного представления <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="wellKnownValue">Экземпляр <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" />, содержащий представление в формате WK геометрического значения.</param>
      <returns>Зависящее от поставщика значение, которое кодирует сведения, содержащихся в <paramref name="wellKnownValue" />, совместимым с данной реализацией геопространственных служб способом.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeography)">
      <summary>Создает экземпляр <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" />, представляющий указанное значение <see cref="T:System.Data.Spatial.DbGeography" />, используя одно или оба стандартных известных пространственных форматов.</summary>
      <param name="geographyValue">Значение geography.</param>
      <returns>Представление в формате WK <paramref name="geographyValue" />, как новый объект <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeometry)">
      <summary>Создает экземпляр <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" />, представляющий указанное значение <see cref="T:System.Data.Spatial.DbGeometry" />, используя одно или оба стандартных известных пространственных форматов.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Представление в формате WK <paramref name="geometryValue" />, как новый объект <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Crosses(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, пересекаются ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> в пространстве.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="geometryValue" /> пересекает <paramref name="otherGeometry" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="P:System.Data.Spatial.DbSpatialServices.Default">
      <summary>Получает службы по умолчанию для <see cref="T:System.Data.Spatial.DbSpatialServices" />.</summary>
      <returns>Службы по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Вычисляет разницу между двумя значениями <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Первое географическое значение.</param>
      <param name="otherGeography">Второе географическое значение.</param>
      <returns>Новое значение DbGeography, представляющее различие между <paramref name="geographyValue" /> и <paramref name="otherGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет разницу между двумя значениями <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Новое значение DbGeometry, представляющее различие между <paramref name="geometryValue" /> и <paramref name="otherGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Определяет, имеют ли два данных значения <see cref="T:System.Data.Spatial.DbGeography" /> пространственное перекрытие.</summary>
      <param name="geographyValue">Первое географическое значение для сравнения на предмет отсутствия пересечений.</param>
      <param name="otherGeography">Второе географическое значение для сравнения на предмет отсутствия пересечений.</param>
      <returns>
        <see langword="true" />, если <paramref name="geographyValue" /> отделен от <paramref name="otherGeography" />; в противном случае – значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, имеют ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> пространственное перекрытие.</summary>
      <param name="geometryValue">Первое геометрическое значение для сравнения на предмет отсутствия пересечений.</param>
      <param name="otherGeometry">Второе геометрическое значение для сравнения на предмет отсутствия пересечений.</param>
      <returns>
        <see langword="true" />, если <paramref name="geometryValue" /> отделен от <paramref name="otherGeometry" />; в противном случае – значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Вычисляет расстояние между наиболее близкими точками двух значений <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Первое географическое значение.</param>
      <param name="otherGeography">Второе географическое значение.</param>
      <returns>Значение типа double, указывающее расстояние между двумя наиболее близкими точками в <paramref name="geographyValue" /> и <paramref name="otherGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет расстояние между наиболее близкими точками двух значений <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Значение типа double, указывающее расстояние между двумя наиболее близкими точками в <paramref name="geometryValue" /> и <paramref name="otherGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>Возвращает элемент заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет коллекцию географий.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять коллекцию географических объектов.</param>
      <param name="index">Положение в географическом значении, из которого требуется взять элемент.</param>
      <returns>Элемент в <paramref name="geographyValue" /> на позиции <paramref name="index" />, если он представляет коллекцию других географических значений; в противном случае — <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает элемент заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет коллекцию геометрий.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять коллекцию геометрических объектов.</param>
      <param name="index">Положение в геометрическом значении, из которого требуется взять элемент.</param>
      <returns>Элемент в <paramref name="geometryValue" /> на позиции <paramref name="index" />, если он представляет коллекцию других геометрических значений; в противном случае — <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="geographyCollectionWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="geographyCollectionWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения.</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением WKB с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeography" /> (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного значения языка географической разметки (GML).</summary>
      <param name="geographyMarkup">Строка, которая содержит представление в языке геометрической разметки GML географического значения.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением GML с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeography" /> (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного значения языка географической разметки (GML) и идентификатора системы координат (SRID).</summary>
      <param name="geographyMarkup">Строка, которая содержит представление в языке геометрической разметки GML географического значения.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением GML с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе значения, зависящего от поставщика, которое совместимо с этой реализацией пространственной службы.</summary>
      <param name="providerValue">Зависящее от поставщика значение, которое эта реализация геопространственных служб может интерпретировать как географическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" />, опирающееся на эту реализацию пространственной службы и указанное значение поставщика.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения.</summary>
      <param name="wellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением WKT с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeography" /> (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает многострочное значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного, хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многострочное значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>Создает многострочное значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного хорошо известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiLineWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многострочное значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>Создает новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiPointWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiPolygonWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного хорошо известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiPolygonWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownBinary">Массив байтов, содержащий представление географического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeography" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownText">Строка, содержащая представление географического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeography" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="geometryCollectionWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="geometryCollectionWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения.</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением WKB с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeometry" /> (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного значения языка географической разметки (GML).</summary>
      <param name="geometryMarkup">Строка, содержащая представление геометрического значения в языке географической разметки GML.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением GML с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeometry" /> (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного значения языка географической разметки (GML) и идентификатора системы координат (SRID).</summary>
      <param name="geometryMarkup">Строка, содержащая представление геометрического значения в языке географической разметки GML.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением GML с указанным идентификатором системы координат.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе значения, зависящего от поставщика, которое совместимо с этой реализацией пространственной службы.</summary>
      <param name="providerValue">Зависящее от поставщика значение, которое эта реализация геопространственных служб может интерпретировать как геометрическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" />, опирающееся на эту реализацию пространственной службы и указанное значение поставщика.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения.</summary>
      <param name="wellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением WKT с идентификатором геометрической системы координат (SRID) по умолчанию <see cref="T:System.Data.Spatial.DbGeometry" /> (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="wellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение линии <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="lineWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает многострочное значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного, хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многострочное значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>Создает многострочное значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного хорошо известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiLineWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многострочное значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>Создает новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiPointWellKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое многоточечное значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного хорошо известного двоичного значения и идентификатора системы координат.</summary>
      <param name="multiPolygonWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного хорошо известного текстового значения и идентификатора системы координат.</summary>
      <param name="multiPolygonKnownText">Хорошо известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
      <returns>Новое значение мультиполигона <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение точки <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="pointWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного бинарного значения и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownBinary">Массив байтов, содержащий представление геометрического значения в формате WKB.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKB с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение полигона <see cref="T:System.Data.Spatial.DbGeometry" /> на основе указанного известного текстового значения и идентификатора системы координат (SRID).</summary>
      <param name="polygonWellKnownText">Строка, содержащая представление геометрического значения в формате WKT.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которая должна использоваться новым значением <see cref="T:System.Data.Spatial.DbGeometry" />.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" /> в соответствии со значением в формате WKT с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeography)">
      <summary>Возвращает значение типа double, указывающее область заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять поверхность.</param>
      <returns>Значение типа double, допускающее значение NULL, указывающее область заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, указывающее область заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять поверхность.</param>
      <returns>Значение типа double, допускающее значение NULL, указывающее область заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetBoundary(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значение NULL, указывающее границы заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Граница данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCentroid(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее центральную точку заданного значения DbGeometry, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять поверхность.</param>
      <returns>Центроид элемента <paramref name="geometryValue" />, если он представляет поверхность; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetConvexHull(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значение NULL, указывающее выпуклую оболочку заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Выпуклая оболочка для данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeography)">
      <summary>Возвращает идентификатор системы координат данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Значение geography.</param>
      <returns>Идентификатор системы координат данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает идентификатор системы координат данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Идентификатор системы координат данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeography)">
      <summary>Получает размерность данного значения <see cref="T:System.Data.Spatial.DbGeography" /> или (если значение представляет совокупность) размер наибольшего элемента.</summary>
      <param name="geographyValue">Географическое значение, для которого требуется получить значение измерения.</param>
      <returns>Размер <paramref name="geographyValue" /> или размер самого большого элемента, если <see cref="T:System.Data.Spatial.DbGeography" /> является коллекцией.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeometry)">
      <summary>Получает размерность данного значения <see cref="T:System.Data.Spatial.DbGeometry" /> или (если значение представляет совокупность) размер наибольшего элемента.</summary>
      <param name="geometryValue">Геометрическое значение, для которого требуется получить значение измерения.</param>
      <returns>Размер <paramref name="geometryValue" /> или размер самого большого элемента, если <see cref="T:System.Data.Spatial.DbGeometry" /> является коллекцией.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeography)">
      <summary>Возвращает количество элементов в данном значении <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет географическую коллекцию.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять коллекцию географических объектов.</param>
      <returns>Количество элементов в <paramref name="geographyValue" />, если оно представляет коллекцию других географических значений; в противном случае — <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает количество элементов в данном значении <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет геометрическую коллекцию.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять коллекцию геометрических объектов.</param>
      <returns>Количество элементов в <paramref name="geometryValue" />, если оно представляет коллекцию других геометрических значений; в противном случае — <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeography)">
      <summary>Возвращает высоту (координату по оси Z) заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять точку.</param>
      <returns>Высота (координата Z) <paramref name="geographyValue" />, если оно представляет точку; в противном случае <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает высоту (координату по оси Z) заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять точку.</param>
      <returns>Высота (Z) <paramref name="geometryValue" />, если оно представляет точку; в противном случае <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeography)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeography" />, представляющее конечную точку заданного значения DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять кривую.</param>
      <returns>Конечная точка значения <paramref name="geographyValue" />, если оно представляет кривую; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее конечную точку заданного значения DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять кривую.</param>
      <returns>Конечная точка значения <paramref name="geometryValue" />, если оно представляет кривую; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEnvelope(System.Data.Spatial.DbGeometry)">
      <summary>Получает огибающую (минимальный ограничивающий прямоугольник) заданного значения <see cref="T:System.Data.Spatial.DbGeometry" /> в виде геометрического значения.</summary>
      <param name="geometryValue">Геометрическое значение, для которого требуется получить значение конверта.</param>
      <returns>Конверт <paramref name="geometryValue" />, как значение <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее внешне кольцо заданного значения DbGeometry, которое может иметь значение NULL, если значение не представляет многоугольник.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять многоугольник.</param>
      <returns>Значение DbGeometry, представляющее внешнее кольцо в <paramref name="geometryValue" />, если оно представляет собой многоугольник; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает количество внутренних колец в данном значении <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет многоугольник.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять многоугольник.</param>
      <returns>Количество элементов в <paramref name="geometryValue" />, если оно представляет многоугольник; в противном случае — <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeography)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, закрыто ли заданное значение <see cref="T:System.Data.Spatial.DbGeography" />, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять кривую.</param>
      <returns>Значение <see langword="true" />, если данное значение <see cref="T:System.Data.Spatial.DbGeography" /> является замкнутым; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, закрыто ли заданное значение <see cref="T:System.Data.Spatial.DbGeometry" />, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять кривую.</param>
      <returns>Значение <see langword="true" />, если данное значение <see cref="T:System.Data.Spatial.DbGeography" /> является замкнутым; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeography)">
      <summary>Возвращает логическое значение, допускающее значение null, которое указывает, является ли заданное значение <see cref="T:System.Data.Spatial.DbGeography" /> пустым.</summary>
      <param name="geographyValue">Значение geography.</param>
      <returns>Значение <see langword="true" />, если заданное значение <see cref="T:System.Data.Spatial.DbGeography" /> пустое; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение null, которое указывает, является ли заданное значение <see cref="T:System.Data.Spatial.DbGeometry" /> пустым.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Значение <see langword="true" />, если заданное значение <see cref="T:System.Data.Spatial.DbGeometry" /> пустое; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsRing(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, явл ли заданное значение <see cref="T:System.Data.Spatial.DbGeometry" /> кольцом, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять кривую.</param>
      <returns>Значение <see langword="true" />, если данное значение <see cref="T:System.Data.Spatial.DbGeometry" /> является кольцом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsSimple(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, которое указывает, является ли данное значение <see cref="T:System.Data.Spatial.DbGeometry" /> простым.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Значение <see langword="true" />, если данное значение <see cref="T:System.Data.Spatial.DbGeometry" /> является простым; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsValid(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, которое указывает, является ли данное значение <see cref="T:System.Data.Spatial.DbGeometry" /> допустимым.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Значение <see langword="true" />, если данное значение <see cref="T:System.Data.Spatial.DbGeometry" /> допустимо; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLatitude(System.Data.Spatial.DbGeography)">
      <summary>Возвращает координату широты заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять точку.</param>
      <returns>Координата широты заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeography)">
      <summary>Возвращает значение типа double, допускающее значение NULL, которое указывает длину заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять кривую.</param>
      <returns>Длина данного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значение NULL, которое указывает длину заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять кривую.</param>
      <returns>Длина данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLongitude(System.Data.Spatial.DbGeography)">
      <summary>Возвращает координату долготы заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять точку.</param>
      <returns>Координата долготы заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeography)">
      <summary>Возвращает координату M (мера) заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять точку.</param>
      <returns>Координата M (Мера) заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает координату M (мера) заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять точку.</param>
      <returns>Координата M (Мера) заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeography)">
      <summary>Возвращает количество точек в заданном значении <see cref="T:System.Data.Spatial.DbGeography" />, если он представляет тип linestring или линейное кольцо.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять linestring или линейное кольцо.</param>
      <returns>Количество точек в заданном значении <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает количество точек в заданном значении <see cref="T:System.Data.Spatial.DbGeometry" />, если он представляет тип linestring или линейное кольцо.</summary>
      <param name="geometryValue">Геометрическое значение, которое не должно представлять тип linestring или линейное кольцо.</param>
      <returns>Количество точек в заданном значении <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">geometryValue</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее  точку на поверхности заданного значения DbGeometry, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять поверхность.</param>
      <returns>Значение <see cref="T:System.Data.Spatial.DbGeometry" />, которое представляет точку на поверхности данного значения DbGeometry.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeography)">
      <summary>Возвращает значение, указывающее имя пространственного типа заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Значение geography.</param>
      <returns>Имя пространственного типа заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение, указывающее имя пространственного типа заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Значение типа geometry.</param>
      <returns>Имя пространственного типа заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeography)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeography" />, представляющее начальную точку заданного значения DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять кривую.</param>
      <returns>Начальная точка заданного значения <see cref="T:System.Data.Spatial.DbGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее начальную точку заданного значения DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять кривую.</param>
      <returns>Начальная точка заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает координату по оси Х заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять точку.</param>
      <returns>Координата X данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>Возвращает координату по оси Y заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять точку.</param>
      <returns>Координата Y данного значения <see cref="T:System.Data.Spatial.DbGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает внутреннее кольцо от заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет собой многоугольник.</summary>
      <param name="geometryValue">Геометрическое значение, которому не требуется представлять многоугольник.</param>
      <param name="index">Положение в геометрическом значении, из которого требуется взять элемент.</param>
      <returns>Внутреннее кольцо в <paramref name="geometryValue" /> в позиции <paramref name="index" />, если оно представляет собой многоугольник; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Вычисляет пересечение двух значений <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Первое географическое значение.</param>
      <param name="otherGeography">Второе географическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" />, представляющее пересечение <paramref name="geographyValue" /> и <paramref name="otherGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет пересечение двух значений <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее пересечение <paramref name="geometryValue" /> и <paramref name="otherGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Определяет, пересекаются ли два данных значения <see cref="T:System.Data.Spatial.DbGeography" /> в пространстве.</summary>
      <param name="geographyValue">Первое географическое значение для сравнения на предмет наличия пересечений.</param>
      <param name="otherGeography">Второе географическое значение для сравнения на предмет пересечения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="geographyValue" /> пересекается с <paramref name="otherGeography" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, пересекаются ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> в пространстве.</summary>
      <param name="geometryValue">Первое геометрическое значение для сравнения на предмет наличия пересечений.</param>
      <param name="otherGeometry">Второе геометрическое значение для сравнения на предмет пересечения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="geometryValue" /> пересекается с <paramref name="otherGeometry" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Overlaps(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, перекрываются ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> в пространстве.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>
        <see langword="true" />, если <paramref name="geometryValue" /> перекрывается с <paramref name="otherGeometry" />; в противном случае <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>Возвращает элемент точки заданного значения <see cref="T:System.Data.Spatial.DbGeography" />, если оно представляет linestring или линейное кольцо.</summary>
      <param name="geographyValue">Географическое значение, которому не требуется представлять linestring или линейное кольцо.</param>
      <param name="index">Положение в географическом значении, из которого требуется взять элемент.</param>
      <returns>Точка в <paramref name="geographyValue" /> в позиции <paramref name="index" />, если она представляет собой объект LineString или LinearRing; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает элемент точки заданного значения <see cref="T:System.Data.Spatial.DbGeometry" />, если оно представляет linestring или линейное кольцо.</summary>
      <param name="geometryValue">Геометрическое значение, которое не должно представлять тип linestring или линейное кольцо.</param>
      <param name="index">Положение в геометрическом значении, из которого требуется взять элемент.</param>
      <returns>Точка в <paramref name="geometryValue" /> в позиции <paramref name="index" />, если она представляет собой объект LineString или LinearRing; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Relate(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry,System.String)">
      <summary>Определяет, связаны ли 2 заданного значения <see cref="T:System.Data.Spatial.DbGeometry" /> пространственно в соответствии с заданным шаблоном пересечения расширенной 9-мерной модели размерностей (DE-9IM).</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Геометрическое значение, которое требуется сравнить с первым геометрическим значением на предмет соотношения.</param>
      <param name="matrix">Строка, содержащая текстовое представление шаблона пересечения (DE-9IM), определяющего отношение.</param>
      <returns>Значение <see langword="true" />, если это значение <paramref name="geometryValue" /> соотносится с <paramref name="otherGeometry" /> в соответствии с указанной матрицей шаблонов пересечения; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
        <paramref name="matrix" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Определяет, равны ли два данных значения <see cref="T:System.Data.Spatial.DbGeography" /> в пространственном отношении.</summary>
      <param name="geographyValue">Первое географическое значение, проверяемое на равенство.</param>
      <param name="otherGeography">Второе географическое значение, проверяемое на равенство.</param>
      <returns>Значение <see langword="true" />, если значения <paramref name="geographyValue" /> пространственно равно <paramref name="otherGeography" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, равны ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> в пространственном отношении.</summary>
      <param name="geometryValue">Первое геометрическое значение, проверяемое на равенство.</param>
      <param name="otherGeometry">Второе геометрическое значение, проверяемое на равенство.</param>
      <returns>Значение <see langword="true" />, если значения <paramref name="geometryValue" /> пространственно равно <paramref name="otherGeometry" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Вычисляет симметрическое различие между двумя значениями <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Первое географическое значение.</param>
      <param name="otherGeography">Второе географическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" />, представляющее симметричное различие между <paramref name="geographyValue" /> и <paramref name="otherGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет симметрическое различие между двумя значениями <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее симметричное различие между <paramref name="geometryValue" /> и <paramref name="otherGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Touches(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, касаются ли два данных значения <see cref="T:System.Data.Spatial.DbGeometry" /> в пространстве.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="geometryValue" /> касается <paramref name="otherGeometry" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>Вычисляет объединение двух значений <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <param name="geographyValue">Первое географическое значение.</param>
      <param name="otherGeography">Второе географическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeography" />, представляющее объединение <paramref name="geographyValue" /> и <paramref name="otherGeography" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />
        <paramref name="otherGeography" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Вычисляет объединение двух значений <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>Новое значение <see cref="T:System.Data.Spatial.DbGeometry" />, представляющее объединение <paramref name="geometryValue" /> и <paramref name="otherGeometry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Within(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>Определяет, является ли одно значение <see cref="T:System.Data.Spatial.DbGeometry" /> пространственно в пределах другого.</summary>
      <param name="geometryValue">Первое геометрическое значение.</param>
      <param name="otherGeometry">Второе геометрическое значение.</param>
      <returns>
        <see langword="true" />, если значение <paramref name="geometryValue" /> входит в <paramref name="otherGeometry" />; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />
        <paramref name="otherGeometry" />
      </exception>
    </member>
    <member name="T:System.Data.SqlClient.SqlProviderServices">
      <summary>Реализация DbProviderServices для поставщика SqlClient для SQL Server.</summary>
    </member>
    <member name="P:System.Data.SqlClient.SqlProviderServices.SingletonInstance">
      <summary>Получает одноэлементный экземпляр класса <see cref="T:System.Data.SqlClient.SqlProviderServices" />.</summary>
      <returns>Возвращает <see cref="T:System.Data.SqlClient.SqlProviderServices" />.</returns>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>Исключение, которое выдается в том случае, когда изменения в экземплярах объектов не могут быть сохранены в источнике данных.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.UpdateException" />.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.UpdateException" /> сериализованными данными.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, содержащий специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, содержащий указанное сообщение об ошибке и ссылку на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, содержащий заданное сообщение об ошибке, ссылку на внутреннее исключение и перечислимую коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</param>
      <param name="stateEntries">Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>Возвращает объекты <see cref="T:System.Data.Objects.ObjectStateEntry" /> для исключения <see cref="T:System.Data.UpdateException" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />, представляющая одну сущность и 0 или более связей либо 0 сущностей и 1 или более связей.</returns>
    </member>
  </members>
</doc>
