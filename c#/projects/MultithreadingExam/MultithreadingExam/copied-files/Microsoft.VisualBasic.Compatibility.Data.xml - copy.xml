<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualC.STLCLR</name>
  </assembly>
  <members>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.first">
      <summary>
              Первое значение в оболочку <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта.
            </summary>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.second">
      <summary>
              Второе значение в оболочку <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />.
            </summary>
      <param name="_Cont">
                Контейнер для итерации.
              </param>
      <param name="_First">
                Смещение текущего первого элемента в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <summary>
              Освобождает, освобождает или сбрасывает неуправляемые ресурсы, используемые <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)">
      <summary>
              Освобождает или сбрасывает неуправляемые ресурсы, которые использует объект <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />.
            </summary>
      <param name="A_0">
                <see langword="true" /> — для удаления управляемых объектов. <see langword="false" /> — для удаления неуправляемых объектов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />.
            </summary>
      <param name="_Cont">
                Контейнер, в отношении которого выполняется итерация.
              </param>
      <param name="_First">
                Смещение текущего первого элемента в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объект, указывающий на данный узел.
            </summary>
      <param name="_Node">
                Узел, на который указывает итератор.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone">
      <summary>
              Возвращает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора декремента с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на один элемент.
               Это версия постфиксного оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является версия постфиксного оператора инкремента.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev">
      <summary>
              Перемещает итератор к элементу непосредственно перед текущим элементом.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1" /> объекта.
            </summary>
      <param name="_Cont">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1" /> объект для копирования в текущем контейнере.
              </param>
      <param name="_Offset">
                Смещение элемента, который будет указывать итератор после ее создания.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.Clone">
      <summary>
              Создает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.move(System.Int32)">
      <summary>
              Перемещает итератор на заданное число элементов.
            </summary>
      <param name="_Offset">
                Число элементов для обхода.
                 Для перемещения итератора вперед укажите положительное число.
                 Для перемещения итератора назад, используйте отрицательное число.
              </param>
      <returns>
              Обход фактическому числу элементов.
               Это число будет отличаться от <paramref name="_Offset" /> Если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Количество элементов для увеличения значения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается слева от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Left">
                Количество элементов для увеличения значения.
              </param>
      <param name="_Right">
                Итератор, который увеличивается.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора, указанного слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Left">
                Итератор, который сравнивается с итератором из правой части.
              </param>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если итератора слева больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на один элемент.
               Это версия постфиксного оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является постфиксная версия оператора.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора меньше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора, указанного слева от оператора меньше позиции итератора справа.
            </summary>
      <param name="_Left">
                Итератор, который сравнивается с итератором из правой части.
              </param>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если итератора слева меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Число элементов для уменьшения.
              </param>
      <returns>
              Итератор, уменьшается на единицу.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет разницу между двумя итераторами.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> Для вычитается из текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              Разница, в число элементов, между двумя итераторами.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.prev">
      <summary>
              Перемещает итератор к элементу непосредственно перед текущим элементом.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base">
      <summary>
              Возвращает базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone">
      <summary>
              Возвращает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next">
      <summary>
              Уменьшает итератор в предыдущую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Уменьшение Обратный итератор совпадает увеличению обычного итератора.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Уменьшение значения обратного итератора равнозначно увеличению значения обычного итератора.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Увеличение реверсивного итератора совпадает уменьшению обычного итератора.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает значение итератора на один элемент.
               Увеличение значения обратного итератора равнозначно уменьшению значения обычного итератора.
               Это версия оператора инкремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Указывает, что это постфиксная версия оператора инкремента.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.base">
      <summary>
              Возвращает базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.Clone">
      <summary>
              Создает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.move(System.Int32)">
      <summary>
              Перемещает итератор на заданное число элементов.
            </summary>
      <param name="_Offset">
                Число элементов для обхода.
                 Для перемещения итератора вперед укажите отрицательное число.
                 Для перемещения итератора назад, используйте положительное число.
              </param>
      <returns>
              Обход фактическому числу элементов.
               Это число будет отличаться от <paramref name="_Offset" /> Если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Количество элементов для увеличения значения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается слева от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Left">
                Количество элементов для увеличения значения.
              </param>
      <param name="_Right">
                Итератор, который увеличивается.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на один элемент.
               Это постфиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является постфиксная версия оператора.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, являются ли два итератора тот же объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на один элемент.
               Это версия постфиксного оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Указывает, что это постфиксная версия оператора инкремента.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора меньше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора вычитания.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Число элементов для уменьшения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет разницу между двумя итераторами.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> Для вычитается из текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              Разница (число элементов) между двумя итераторами.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.prev">
      <summary>
              Помещает итератор на элемент сразу после текущего элемента.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объект, подлежащий копированию.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объект, указывающий на данный узел.
            </summary>
      <param name="_Node">
                Узел, на который указывает итератор.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
      <summary>
              Возвращает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, если заданный <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на один элемент.
               Это версия постфиксного оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является постфиксная версия оператора.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
      <summary>
              Перемещает итератор к элементу непосредственно перед текущим элементом.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объект для копирования в текущем контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новую <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1" /> объекта.
            </summary>
      <param name="_Cont">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1" /> объект для копирования в текущем контейнере.
              </param>
      <param name="_Offset">
                Смещение элемента, который будет указывать итератор после ее создания.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.Clone">
      <summary>
              Создает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это значение будет отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это значение будет отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.move(System.Int32)">
      <summary>
              Перемещает итератор на заданное число элементов.
            </summary>
      <param name="_Offset">
                Число элементов для обхода.
                 Для перемещения итератора вперед укажите положительное число.
                 Для перемещения итератора назад, используйте отрицательное число.
              </param>
      <returns>
              Обход фактическому числу элементов.
               Это число будет отличаться от <paramref name="_Offset" /> Если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Количество элементов для увеличения значения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается слева от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Left">
                Количество элементов для увеличения значения.
              </param>
      <param name="_Right">
                Итератор, который увеличивается.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора, указанного слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Left">
                Итератор, который сравнивается с итератором из правой части.
              </param>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если итератора слева больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает значение итератора на один элемент.
               Это версия оператора инкремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора меньше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора, указанного слева от оператора меньше позиции итератора справа.
            </summary>
      <param name="_Left">
                Итератор, который сравнивается с итератором из правой части.
              </param>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если итератора слева меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора вычитания.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Число элементов для уменьшения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет разницу между двумя итераторами.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> Для вычитается из текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              Разница (число элементов) между двумя итераторами.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.prev">
      <summary>
              Перемещает итератор к элементу непосредственно перед текущим элементом.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation">
      <summary>
              Возвращает текущее поколение изменений базового контейнера.
            </summary>
      <returns>
              Текущее поколение изменений базового контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
      <summary>
              Перемещает итератор к элементу непосредственно перед текущим элементом.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет равенство двух объектов <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />.
            </summary>
      <param name="A_0">
                Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если текущий итератор и заданный итератор совпадают; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.container">
      <summary>
              Получает контейнер, текущий узел.
            </summary>
      <returns>
              Контейнер, текущий узел.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head">
      <summary>
              Определяет, является ли текущий узел первым узлом контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если текущий узел является первым узлом в контейнере; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node">
      <summary>
              Возвращает следующий узел в контейнере после текущего узла.
            </summary>
      <returns>
              Следующий узел в контейнере после текущего узла.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node">
      <summary>
              Возвращает узел в контейнере непосредственно перед текущим узлом.
            </summary>
      <returns>
              Узел в контейнере непосредственно перед текущим узлом.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1.at_bias(System.Int32)">
      <summary>
              Возвращает элемент, расположенный текущее смещение контейнера.
               Смещение — это смещение от текущего нулевого элемента.
            </summary>
      <param name="param0">
                Текущее смещение.
              </param>
      <returns>
              Элемент в указанной позиции сдвига.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1.valid_bias(System.Int32)">
      <summary>
              Определяет, является ли данный сдвиг допустимым для контейнера.
               Смещение — это смещение от текущего нулевого элемента.
            </summary>
      <param name="A_0">
                Текущее смещение.
              </param>
      <returns>
              <see langword="true" />Если данный сдвиг допустим для контейнера; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, указывает ли текущий итератор на элемент в контейнере, который предшествует элементу, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1.move(System.Int32)">
      <summary>
              Перемещает итератор на заданное число элементов.
            </summary>
      <param name="_Offset">
                Число элементов для обхода.
                 Для перемещения итератора вперед укажите положительное число.
                 Для перемещения итератора назад, используйте отрицательное число.
              </param>
      <returns>
              Обход фактическому числу элементов.
               Это число будет отличаться от <paramref name="_Offset" /> Если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> копируемый объект.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> копируемый объект.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base">
      <summary>
              Возвращает базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone">
      <summary>
              Возвращает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next">
      <summary>
              Уменьшает итератор в предыдущую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Уменьшение Обратный итератор совпадает увеличению обычного итератора.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает значение итератора на один элемент.
               Уменьшение значения обратного итератора равнозначно увеличению значения обычного итератора.
               Это версия оператора декремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Увеличение реверсивного итератора совпадает уменьшению обычного итератора.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает значение итератора на один элемент.
               Увеличение значения обратного итератора равнозначно уменьшению значения обычного итератора.
               Это версия оператора инкремента с постфиксом.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="A_0">
                Неиспользуемый параметр, который указывает, что это версия оператора с постфиксом.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию за пределами контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.#ctor">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Iter">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> объекта для копирования в текущий контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> из существующего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                Существующий <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта для копирования в текущий контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.base">
      <summary>
              Возвращает базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Базовый базовый итератор для <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.Clone">
      <summary>
              Создает копию текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <returns>
              Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.container">
      <summary>
              Получает контейнер, проходящий через итератор.
            </summary>
      <returns>
              Контейнер, проходящий через итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет расстояние между элементом, который указывает текущий итератор и элемент, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              Число элементов между элементами, который указывает текущий итератор и переходов, <paramref name="_Right" /> указывает.
               Это число является отрицательным Если <paramref name="_Right" /> указывает на элемент, перед элементом, который указывает текущий итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объект совпадает с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если два <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекты имеют тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.get_bias">
      <summary>
              Возвращает сдвиг итератора.
               Сдвиг — это смещение итератора относительно нулевого элемента.
            </summary>
      <returns>
              Сдвиг итератора.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.get_cref">
      <summary>
              Возвращает постоянной ссылки на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Постоянной ссылки на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.get_node">
      <summary>
              Возвращает узел, или элемент, который указывает итератор.
            </summary>
      <returns>
              Узел, на который указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.get_ref">
      <summary>
              Возвращает ссылку на элемент, который в данный момент указывает итератор.
            </summary>
      <returns>
              Ссылка на элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, указывает ли текущий итератор для элемента в контейнере, перед элементом, который указывает итератор.
            </summary>
      <param name="_Right">
                Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.
              </param>
      <returns>
              <see langword="true" /> Если текущий итератор указывает на элемент, расположенный непосредственно перед элементом, <paramref name="_Right" /> указывает; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.move(System.Int32)">
      <summary>
              Перемещает итератор на заданное число элементов.
            </summary>
      <param name="_Offset">
                Число элементов для обхода.
                 Для перемещения итератора вперед укажите отрицательное число.
                 Для перемещения итератора назад, используйте положительное число.
              </param>
      <returns>
              Обход фактическому числу элементов.
               Это число будет отличаться от <paramref name="_Offset" /> Если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.next">
      <summary>
              Увеличивает итератор в следующую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Количество элементов для увеличения значения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Увеличивает итератор на заданное число элементов.
               Целочисленный параметр указывается слева от оператора сложения.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Left">
                Количество элементов для увеличения значения.
              </param>
      <param name="_Right">
                Итератор, который увеличивается.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Назначает данного <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> в текущий объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> Объект текущему объекту.
              </param>
      <returns>
              Текущий объект (*this).
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Уменьшает итератор на один элемент.
               Это префиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на один элемент.
               Это постфиксная версия оператора декремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является постфиксная версия оператора.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, являются ли два итератора тот же объект.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют один и тот же объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора больше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор больше или равен итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0}">
      <summary>
              Преобразует <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </summary>
      <returns>
              Текущий итератор как <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Увеличивает итератор на один элемент.
               Это префиксная версия оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Увеличивает итератор на один элемент.
               Это версия постфиксного оператора инкремента.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="param1">
                Неиспользуемый параметр, который указывает это является постфиксная версия оператора.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли данной <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта отличается от текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              <see langword="true" /> Если оба итератора представляют разные объекты; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, является ли позиция итератора слева меньше позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше итератора справа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Определяет, находится ли позиция итератора слева от оператора меньше или равна позиции итератора справа.
            </summary>
      <param name="_Right">
                Итератор, который сравнивается с итератором из левой части.
              </param>
      <returns>
              <see langword="true" /> Если левый итератор меньше или равна правой, в; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Возвращает элемент, который в данный момент указывает итератор.
            </summary>
      <param name="_Left">
                Итератор, к которому применяется оператор для.
              </param>
      <returns>
              Элемент, который в данный момент указывает итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator{`0})">
      <summary>
              Определяет разницу между двумя итераторами.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1" /> Для вычитается из текущего <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1" /> объекта.
              </param>
      <returns>
              Разница, в число элементов, между двумя итераторами.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@,System.Int32)">
      <summary>
              Уменьшает итератор на заданное число элементов.
               Целочисленный параметр указывается справа от оператора вычитания.
            </summary>
      <param name="__unnamed0">
                Ссылка на текущий итератор.
              </param>
      <param name="_Right">
                Число элементов для уменьшения.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.prev">
      <summary>
              Помещает итератор на элемент сразу после текущего элемента.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.valid">
      <summary>
              Определяет итератор является допустимым и может безопасно использоваться проходить базового контейнера.
            </summary>
      <returns>
              <see langword="true" /> Если итератор является допустимым и безопасно использовать; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <summary>
              Создает новый <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> со значениями по умолчанию для <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> и <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)">
      <summary>
              Создает новый <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта и присваивает его первое значение указанного значения.
            </summary>
      <param name="_Val1">
                Значение для хранения в <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />.
                <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> Значение присваивается значение по умолчанию для его типа.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)">
      <summary>
              Создает новый <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объект с двумя указанными значениями.
            </summary>
      <param name="_Val1">
                Значение для хранения в <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />.
              </param>
      <param name="_Val2">
                Значение для хранения в <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Создает новый <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> из существующего <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> Скопировать в новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объект.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)">
      <summary>
              Создает новый <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> из существующего <see cref="T:System.Collections.Generic.KeyValuePair`2" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:System.Collections.Generic.KeyValuePair`2" /> Скопировать в новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объект.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)">
      <summary>
              Определяет, если два <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекты равны.
            </summary>
      <param name="_Right_arg">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> Объект, сравниваемый с текущим <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта.
              </param>
      <returns>
              Значение <see langword="true" />, если два объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> равны; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Заменяет хранимых пары значений в <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объекта.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> Объект, подлежащий копированию.
              </param>
      <returns>
              Этот метод возвращает *this.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              Меняет местами содержимое двух <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> объектов.
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> Объект для обмена содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <summary>
              Освобождает, освобождает или сбрасывает неуправляемые ресурсы, используемые <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)">
      <summary>
              Освобождает или сбрасывает неуправляемые ресурсы, которые использует объект <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />.
            </summary>
      <param name="A_0">
                <see langword="true" /> — для удаления управляемых объектов. <see langword="false" /> — для удаления неуправляемых объектов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Заменяет все элементы контейнера элементов, указанных в данной <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> объектов.
            </summary>
      <param name="_First">
                Начальная позиция диапазона для вставки в контейнер.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона для вставки в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
      <summary>
              Заменяет все элементы контейнера элементы в заданной <see cref="T:System.Collections.IEnumerable" /> объекта.
            </summary>
      <param name="_Right">
                Перечисление, которое необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
      <summary>
              Заменяет все элементы контейнера на заданное число указанных элементов.
            </summary>
      <param name="_Count">
                Число элементов, чтобы вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элемента, который требуется вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
      <summary>
              Обращается к элементу в указанной позиции в контейнере.
            </summary>
      <param name="_Pos">
                Позиция элемента, к которому осуществляется доступ.
              </param>
      <returns>
              Элемент управляемой последовательности в позиции <paramref name="pos" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.back">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Задает начало управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, указывающий первый элемент управляемой последовательности или непосредственно за концом пустой последовательности.
                 Используется для получения итератора, который обозначает <paramref name="current" /> начало управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
      <summary>
              Возвращает Сдвиг начала текущей последовательности.
               Смещение — это смещение текущего нулевого элемента.
            </summary>
      <returns>
              Сдвиг начала текущей последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
      <summary>
              Удаляет все элементы в контейнере.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
      <summary>
              Проверяет, действительно ли в контейнере нет элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер пуст; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Задает конец управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, который указывает на место сразу после конца управляемой последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
      <summary>
              Возвращает Сдвиг конца текущей последовательности.
               Смещение — это смещение текущего нулевого элемента.
            </summary>
      <returns>
              Сдвиг конца текущей последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет элемент на заданной позиции.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, находящийся за всеми удаленными элементами, или <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_Where">
                Подлежащий удалению элемент.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет элементы, находящиеся между заданными итераторами.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, находящийся за всеми удаленными элементами, или <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_First_iter">
                Начальное положение диапазона для удаления.
              </param>
      <param name="_Last_iter">
                Положение после последнего элемента диапазона для удаления.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.front">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation">
      <summary>
              Возвращает текущее поколение изменений базового контейнера.
            </summary>
      <returns>
              Текущее поколение изменений базового контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              Добавляет элемент в указанное положение в контейнере.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий на вставленный элемент.
              </param>
      <param name="_Where">
                Положение в контейнере, перед которым нужно вставить.
              </param>
      <param name="_Val">
                Элемент, который должен быть вставлен в контейнере.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Добавляет элементы в указанное положение в контейнере.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым нужно вставить.
              </param>
      <param name="_First">
                Начало диапазона для вставки в контейнере.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона для вставки в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              Добавляет элементы в указанное положение в контейнере.
            </summary>
      <param name="_Where_iter">
                Положение в контейнере, перед которым нужно вставить.
              </param>
      <param name="_Right">
                Перечисление элементов, которые необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              Добавляет заданное число элементов в указанной позиции в контейнере.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым нужно вставить.
              </param>
      <param name="_Count">
                Число элементов, которые необходимо вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элементов, которые должны быть вставлены в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
      <summary>
              Удаляет последний элемент не пустого контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
      <summary>
              Удаляет первый элемент не пустого контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
      <summary>
              Добавляет элемент в конец контейнера.
            </summary>
      <param name="_Val">
                Элемент, добавляемый в конец контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
      <summary>
              Добавляет элемент в начало контейнера.
            </summary>
      <param name="_Val">
                Элемент, добавляемый в начало контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Задает начало обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который задает последний элемент управляемой последовательности, или положение перед началом пустой последовательности.
                 Таким образом, он определяет <paramref name="beginning" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> Начало управляемой последовательности, отображаемой в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Задает конец обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который указывает начало управляемой последовательности.
                 Таким образом, он определяет <paramref name="end" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, отображаемой в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
      <summary>
              Изменяет количество элементов.
            </summary>
      <param name="_Newsize">
                Новый размер управляемой последовательности.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
      <summary>
              Изменяет количество элементов.
            </summary>
      <param name="_Newsize">
                Новый размер управляемой последовательности.
              </param>
      <param name="_Val">
                Значение элемента-заполнителя.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.size">
      <summary>
              Подсчитывает количество элементов.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
      <summary>
              Меняет местами содержимое двух контейнеров.
            </summary>
      <param name="A_0">
                Контейнер для обмена содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              Задает начало управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Двунаправленный итератор, указывающий первый элемент управляемой последовательности или непосредственно за концом пустой последовательности.
                 Используется для получения итератора, который обозначает <paramref name="current" /> начало управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count">
      <summary>
              Подсчитывает количество сегментов в хэш-таблице.
            </summary>
      <returns>
              Текущее количество сегментов в хэш-таблице.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.clear">
      <summary>
              Удаляет все элементы из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)">
      <summary>
              Определяет количество элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Число элементов в управляемой последовательности, которые имеют один и тот же ключ как <paramref name="_Keyval" />.
               Используется для определения количества элементов в данный момент в управляемой последовательности, соответствующие заданному ключу.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.empty">
      <summary>
              Тесты отсутствие элементов, присутствующие в контейнере.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              Задает конец управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Двунаправленный итератор, который указывает конец управляемой последовательности.
                 Используется для получения итератора, который задает конец управляемой последовательности.
                 При изменении длины управляемой последовательности его состояние не изменится.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>
              Определяет диапазон, соответствующий указанному ключу.
            </summary>
      <param name="__unnamed0">
                Пара итераторов, которые определяют диапазон элементов в данный момент в управляемой последовательности, которые соответствуют заданному ключу.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Пара итераторов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)">
      <summary>
              Удаляет элементы из контейнера, которые соответствуют заданному ключу.
            </summary>
      <param name="_Keyval">
                Значение ключа для удаления.
              </param>
      <returns>
              Количество удаленных элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет из контейнера элемент, указанный данным итератором.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент за удаленным элементом, или <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> Если такого элемента не существует.
              </param>
      <param name="_Where">
                Итератор, который указывает на элемент, подлежащий удалению.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет из контейнера элементы, находящиеся между заданными итераторами.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент за пределами элементы удалены, или <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> Если такого элемента не существует.
              </param>
      <param name="_First_iter">
                Итератор, который указывает на начало диапазона для удаления.
              </param>
      <param name="_Last_iter">
                Итератор, который указывает на позицию, который следует сразу за диапазона для удаления.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет элемент, соответствующий указанному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий один из найденных элементов; или <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> если элемент не найден.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate">
      <summary>
              Возвращает делегат, который используется для преобразования значения ключа в целое число.
            </summary>
      <returns>
              Делегат, который используется для преобразования значения ключа в целое число.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>
              Добавляет заданный элемент в контейнер.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий на вставленный элемент.
              </param>
      <param name="_Where">
                Итератор, который указывает положение в контейнере, необходимо вставить элемент.
                 Это только рекомендация и используется для повышения производительности.
                 Элемент не может быть вставлено в этом расположении.
              </param>
      <param name="_Val">
                Значение ключа, чтобы вставить в контейнер.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>
              Добавляет в контейнер элементы, указанные данными итераторами.
            </summary>
      <param name="_First">
                Итератор, который указывает на начало диапазона элементов для вставки.
              </param>
      <param name="_Last">
                Итератор, который указывает на элемент, который следует сразу за диапазона элементов для вставки.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>
              Добавляет заданное значение в контейнер.
            </summary>
      <param name="__unnamed0">
                Пара значений X.
                 Если X.second является <see langword="true" />, X.first обозначает вставленный элемент; в противном случае X.first обозначает элемент, эквивалентный упорядочение, уже существует, и вставлен новый элемент.
              </param>
      <param name="_Val">
                Значение ключа, чтобы вставить в контейнер.
              </param>
      <returns>
              Пара итераторов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)">
      <summary>
              Добавляет в контейнер данного перечисления.
            </summary>
      <param name="_Right">
                Перечисление, которое необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.key_comp">
      <summary>
              Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.
               Используется для сравнения двух ключей.
            </summary>
      <returns>
              Делегат упорядочения, который используется для упорядочения управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.load_factor">
      <summary>
              Подсчитывает среднее количество элементов на сегмент в хэш-таблице.
            </summary>
      <returns>
              Среднее количество элементов на сегмент в хэш-таблице.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет начало диапазона элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент управляемой последовательности, которая хэширует один контейнер как <paramref name="_Keyval" /> и соответствующим образом для <paramref name="_Keyval" />.
                 Если такого элемента не существует, она возвращает <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <summary>
              Возвращает максимальное количество элементов на сегмент в хэш-таблице.
            </summary>
      <returns>
              Максимальное количество элементов на сегмент в хэш-таблице.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)">
      <summary>
              Задает максимальное количество элементов на сегмент в хэш-таблице.
            </summary>
      <param name="_Newmax">
                Максимальное количество элементов на сегмент в хэш-таблице.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              Задает начало обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который задает последний элемент управляемой последовательности, или положение перед началом пустой последовательности.
                 Таким образом, он определяет <paramref name="beginning" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> Начало управляемой последовательности, отображаемой в обратном порядке.
                 Его состояние может измениться при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)">
      <summary>
              Повторно создает хэш-таблицу.
            </summary>
      <param name="_Buckets">
                Количество сегментов в хэш-таблице.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              Задает конец обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который указывает начало управляемой последовательности.
                 Таким образом, он определяет <paramref name="end" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, отображаемой в обратном порядке.
                 Его состояние может измениться при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})">
      <summary>
              Меняет местами содержимое двух контейнеров.
            </summary>
      <param name="_Right">
                Контейнер, с которым производится обмен содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет конец диапазона элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент после последнего элемента в управляемой последовательности, которая хэширует один контейнер как <paramref name="_Keyval" /> и соответствующим образом для <paramref name="_Keyval" />.
                 Если такого элемента не существует, она возвращает <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.
              </param>
      <param name="_Keyval">
                Значение ключа для поиска.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.value_comp">
      <summary>
              Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.
            </summary>
      <returns>
              Делегат упорядочения, который используется для упорядочения управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Заменяет управляемую последовательность последовательностью [<paramref name="_First" />, <paramref name="_Last" />).
            </summary>
      <param name="_First">
                Начальное положение диапазона элементов, которые требуется вставить в контейнер.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона элементов, которые требуется вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)">
      <summary>
              Заменяет управляемую последовательность последовательностью, назначенному с помощью данного перечислителя.
            </summary>
      <param name="_Right">
                Перечисление, элементы которого должны быть вставлены в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)">
      <summary>
              Заменяет управляемую последовательность с указанным номером данного элемента.
            </summary>
      <param name="_Count">
                Число элементов, чтобы вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элементов, чтобы вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.back">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              Задает начало управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, указывающий первый элемент управляемой последовательности или непосредственно за концом пустой последовательности.
                 Используется для получения итератора, который обозначает <paramref name="current" /> начало управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.clear">
      <summary>
              Удаляет все элементы из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.empty">
      <summary>
              Проверяет, является ли контейнер не содержит элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              Задает конец управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, который указывает конец управляемой последовательности.
                 Используется для получения итератора, который задает конец управляемой последовательности.
                 При изменении длины управляемой последовательности его состояние не изменится.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет один элемент управляемой последовательности, на который указывает итератор.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, находящийся за всеми удаленными элементами, или <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_Where">
                Положение элемента, который требуется удалить.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет элемент управляемой последовательности в диапазоне [<paramref name="_First_iter" />, <paramref name="_Last_iter" />).
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, находящийся за всеми удаленными элементами, или <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_First_iter">
                Начальное положение диапазона элементов для удаления.
              </param>
      <param name="_Last_iter">
                Первая позиция за пределами диапазона элементов для удаления.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.front">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              Вставляет элемент заданного значения в контейнер.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий на вставленный элемент.
              </param>
      <param name="_Where">
                Положение в контейнере непосредственно после новых вставленных элементов.
              </param>
      <param name="_Val">
                Значение элемента, который требуется вставить в контейнер.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Вставляет последовательность [<paramref name="_First" />, <paramref name="_Last" />) в контейнер.
            </summary>
      <param name="_Where">
                Положение в контейнере непосредственно после новых вставленных элементов.
              </param>
      <param name="_First">
                Начальное положение диапазона элементов, которые необходимо вставить в контейнер.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона элементов, которые необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              Вставляет элементы заданного перечислителя в контейнер.
            </summary>
      <param name="_Where_iter">
                Положение в контейнере, вставьте перед.
              </param>
      <param name="_Right">
                Перечисление, элементы которого должны быть вставлены в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              Вставляет заданное число элементов заданного значения в контейнер.
            </summary>
      <param name="_Where">
                Положение в контейнере непосредственно после новых вставленных элементов.
              </param>
      <param name="_Count">
                Число элементов, которые необходимо вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элементов, вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              Объединяет две упорядоченные управляемые последовательности.
            </summary>
      <param name="_Right">
                Контейнер для объединения в этом контейнере.
              </param>
      <param name="_Pred">
                Логическая функция для попарного сравнения элементов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_back">
      <summary>
              Удаляет последний элемент из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_front">
      <summary>
              Удаляет первый элемент из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)">
      <summary>
              Добавляет новый элемент в конец контейнера.
            </summary>
      <param name="_Val">
                Значение элемента, который требуется добавить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)">
      <summary>
              Добавляет новый элемент в начало контейнера.
            </summary>
      <param name="_Val">
                Значение элемента, который требуется вставить в начало контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              Задает начало обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который задает последний элемент управляемой последовательности, или положение после начала пустой последовательности.
                 Таким образом, он определяет <paramref name="beginning" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> Начало управляемой последовательности, которая отображается в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)">
      <summary>
              Удаляет элемент с указанным значением из контейнера.
            </summary>
      <param name="_Val">
                Значение элемента, удаляемого из контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})">
      <summary>
              Удаляет элементы из контейнера, которые прошли заданный тест.
            </summary>
      <param name="_Pred">
                Логический тест, который определяет, какие элементы будут удалены.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              Задает конец обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который указывает начало управляемой последовательности.
                 Таким образом, он определяет <paramref name="end" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, отображаемой в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)">
      <summary>
              Изменяет количество элементов в контейнере до заданного размера.
            </summary>
      <param name="_Newsize">
                Новый размер контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)">
      <summary>
              Изменяет количество элементов в контейнере до заданного размера.
               Если новый размер больше старого, заданные значения будут добавляться в контейнер.
            </summary>
      <param name="_Newsize">
                Новый размер контейнера.
              </param>
      <param name="_Val">
                Значение элементов-заполнителей.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.reverse">
      <summary>
              Резервирует элементы управляемой последовательности.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              Упорядочивает управляемую последовательность.
            </summary>
      <param name="_Pred">
                Оператор, который будет использоваться для сравнения элементов при упорядочении.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})">
      <summary>
              Вставляет заданную последовательность в контейнер перед указанным положением.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо присоединить элементы.
              </param>
      <param name="_Right">
                Контейнер, который необходимо присоединить.
                 Все элементы будут удалены из этого контейнера после операции присоединения.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет элемент из заданного контейнера, на который указывает <paramref name="_First" /> и вставляет его перед элементом в управляемой последовательности, на который указывает <paramref name="_Where" />.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо присоединить элементы.
              </param>
      <param name="_Right">
                Контейнер, который необходимо присоединить.
              </param>
      <param name="_First">
                Положение элемента для присоединения.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет диапазон элементов [<paramref name="_First" />, <paramref name="_Last" />) из заданного контейнера и его перед элементом в управляемой последовательности указывает вставки <paramref name="_Where" />.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо присоединить элементы.
              </param>
      <param name="_Right">
                Контейнер, который необходимо присоединить.
              </param>
      <param name="_First">
                Начальное положение диапазона элементов для присоединения.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона элементов для присоединения.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})">
      <summary>
              Меняет местами содержимое двух контейнеров.
            </summary>
      <param name="_Right">
                Контейнер для обмена содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              Удаляет смежные элементы, которые прошли заданный тест.
            </summary>
      <param name="_Pred">
                Функция сравнения, которая определяет, уникальны ли пар элементов.
                 Элемент, который не является уникальным будут удалены из контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})">
      <summary>
              Заменяет все элементы контейнера.
            </summary>
      <param name="_Right">
                Адаптер контейнера, чтобы вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty">
      <summary>
              Определяет, является ли контейнер не содержит элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container">
      <summary>
              Обращается к базового контейнера.
            </summary>
      <returns>
              Базового контейнера.
               Его можно использовать, чтобы обойти ограничение, налагаемое оболочкой контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop">
      <summary>
              Удаляет элемент контейнера наивысший приоритет.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)">
      <summary>
              Добавляет новый элемент в контейнере.
            </summary>
      <param name="_Val">
                Элемент для вставки в управляемой последовательности.
                 Для сохранения дисциплины кучи затем переупорядочивается управляемой последовательности.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top">
      <summary>
              Обращается к элементу наивысший приоритет контейнера.
            </summary>
      <returns>
              Начало (наивысший приоритет) элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp">
      <summary>
              Копирует делегат упорядочения для двух элементов.
            </summary>
      <returns>
              Делегат упорядочения, используемый для упорядочения управляемой последовательности.
               Используется для сравнения двух значений.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})">
      <summary>
              Заменяет все элементы контейнера содержимым предоставленного контейнера.
            </summary>
      <param name="_Right">
                Адаптер контейнера, элементы которого будет вставлен в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.back">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.empty">
      <summary>
              Определяет, является ли контейнер не содержит элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.front">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.get_container">
      <summary>
              Обращается к базового контейнера.
            </summary>
      <returns>
              Базового контейнера.
               Используется, чтобы обойти ограничение, налагаемое оболочкой контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.pop">
      <summary>
              Удаляет последний элемент из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)">
      <summary>
              Добавляет элемент в начало контейнера.
            </summary>
      <param name="_Val">
                Значение, добавьте в начало контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})">
      <summary>
              Заменяет все элементы в контейнере элементами предоставленного контейнера.
            </summary>
      <param name="_Right">
                Адаптер контейнера, элементы которого должны быть вставлены в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.empty">
      <summary>
              Определяет, является ли контейнер не содержит элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.get_container">
      <summary>
              Обращается к базового контейнера.
            </summary>
      <returns>
              Базового контейнера.
               Используется, чтобы обойти ограничение, налагаемое оболочкой контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.pop">
      <summary>
              Удаляет последний элемент из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)">
      <summary>
              Добавляет элемент в контейнере.
            </summary>
      <param name="_Val">
                Значение, которое добавляется в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.top">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              Задает начало управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Двунаправленный итератор, указывающий первый элемент управляемой последовательности или непосредственно за концом пустой последовательности.
                 Используется для получения итератора, который обозначает <paramref name="current" /> начало управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.clear">
      <summary>
              Удаляет все элементы из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)">
      <summary>
              Определяет количество элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Число элементов в управляемой последовательности, которые имеют один и тот же ключ как <paramref name="_Keyval" />.
               Используется для определения количества элементов в данный момент в управляемой последовательности, соответствующие заданному ключу.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.empty">
      <summary>
              Тесты отсутствие элементов, присутствующие в контейнере.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              Задает конец управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Двунаправленный итератор, который указывает конец управляемой последовательности.
                 Используется для получения итератора, который задает конец управляемой последовательности.
                 При изменении длины управляемой последовательности его состояние не изменится.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>
              Определяет диапазон, соответствующий указанному ключу.
            </summary>
      <param name="__unnamed0">
                Пара итераторов, которые определяют диапазон элементов в данный момент в управляемой последовательности, которые соответствуют заданному ключу.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Пара итераторов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)">
      <summary>
              Удаляет элементы из контейнера, которые соответствуют заданному ключу.
            </summary>
      <param name="_Keyval">
                Значение ключа для удаления.
              </param>
      <returns>
              Количество удаленных элементов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет из контейнера элемент, указанный данным итератором.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент за удаленным элементом, или <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> Если такого элемента не существует.
              </param>
      <param name="_Where">
                Итератор, который указывает на элемент, подлежащий удалению.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет из контейнера элементы, находящиеся между заданными итераторами.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент за пределами элементы удалены, или <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> Если такого элемента не существует.
              </param>
      <param name="_First_iter">
                Итератор, который указывает на начало диапазона для удаления.
              </param>
      <param name="_Last_iter">
                Итератор, который указывает на позицию, который следует сразу за диапазона для удаления.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет элемент, соответствующий указанному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий один из найденных элементов; или <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> если элемент не найден.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>
              Добавляет заданный элемент в контейнер.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий на вставленный элемент.
              </param>
      <param name="_Where">
                Итератор, который указывает положение в контейнере, необходимо вставить элемент.
                 Это только рекомендация и используется для повышения производительности.
                 Элемент не может быть вставлено в этом расположении.
              </param>
      <param name="_Val">
                Значение ключа, чтобы вставить в контейнер.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>
              Добавляет в контейнер элементы, указанные данными итераторами.
            </summary>
      <param name="_First">
                Итератор, который указывает на начало диапазона элементов для вставки.
              </param>
      <param name="_Last">
                Итератор, который указывает на элемент, который следует сразу за диапазона элементов для вставки.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>
              Добавляет заданное значение в контейнер.
            </summary>
      <param name="__unnamed0">
                Пара значений X.
                 Если X.second имеет значение true, X.first обозначает вставленный элемент; в противном случае X.first обозначает элемент, эквивалентный упорядочение, уже существует, и вставлен новый элемент.
              </param>
      <param name="_Val">
                Значение ключа, чтобы вставить в контейнер.
              </param>
      <returns>
              Пара итераторов.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})">
      <summary>
              Добавляет в контейнер данного перечисления.
            </summary>
      <param name="_Right">
                Перечисление, которое необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.key_comp">
      <summary>
              Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.
               Используется для сравнения двух ключей.
            </summary>
      <returns>
              Делегат упорядочения, который используется для упорядочения управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет начало диапазона элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент управляемой последовательности, которая хэширует один контейнер как <paramref name="_Keyval" /> и соответствующим образом для <paramref name="_Keyval" />.
                 Если такого элемента не существует, она возвращает <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.
              </param>
      <param name="_Keyval">
                Значение ключа, который требуется найти.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              Задает начало обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который задает последний элемент управляемой последовательности, или положение перед началом пустой последовательности.
                 Таким образом, он определяет <paramref name="beginning" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> Начало управляемой последовательности, отображаемой в обратном порядке.
                 Его состояние может измениться при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              Задает конец обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который указывает начало управляемой последовательности.
                 Таким образом, он определяет <paramref name="end" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, отображаемой в обратном порядке.
                 Его состояние может измениться при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})">
      <summary>
              Меняет местами содержимое двух контейнеров.
            </summary>
      <param name="_Right">
                Контейнер, с которым производится обмен содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              Определяет конец диапазона элементов, которые соответствуют заданному ключу.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент после последнего элемента в управляемой последовательности, которая хэширует один контейнер как <paramref name="_Keyval" /> и соответствующим образом для <paramref name="_Keyval" />.
                 Если такого элемента не существует, она возвращает <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.
              </param>
      <param name="_Keyval">
                Значение ключа для поиска.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.value_comp">
      <summary>
              Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.
            </summary>
      <returns>
              Делегат упорядочения, который используется для упорядочения управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Заменяет все элементы в контейнере элементов между заданными итераторами.
            </summary>
      <param name="_First">
                Начальное положение диапазона элементов для вставки.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона элементов для вставки.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)">
      <summary>
              Заменяет все элементы в контейнере элементами в заданном перечислении.
            </summary>
      <param name="_Right">
                Перечисление, элементы которого должны быть вставлены в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)">
      <summary>
              Заменяет указанное число элементов, в которых указаны значения всех элементов в контейнере.
            </summary>
      <param name="_Count">
                Число элементов, чтобы вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элемента, который требуется вставить.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)">
      <summary>
              Обращается к элементу в указанной позиции в контейнере.
            </summary>
      <param name="_Pos">
                Позиция доступа к элементу.
              </param>
      <returns>
              Элемент управляемой последовательности в позиции <paramref name="_Pos" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.back">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Задает начало управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, указывающий первый элемент управляемой последовательности или непосредственно за концом пустой последовательности.
                 Используется для получения итератора, который обозначает <paramref name="current" /> начало управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.capacity">
      <summary>
              Показывает размер хранилища, выделенного для контейнера.
            </summary>
      <returns>
              Хранилище, выделенное для управляемой последовательности, по крайней мере значение <see cref="M:Microsoft.VisualC.StlClr.IVector`1.size" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.clear">
      <summary>
              Удаляет все элементы из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.empty">
      <summary>
              Проверяет, является ли контейнер не содержит элементов.
            </summary>
      <returns>
              <see langword="true" /> Если контейнер не содержит элементов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)">
      <summary>
              Задает конец управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Итератор произвольного доступа, который указывает конец управляемой последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, но его состояние можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет один элемент управляемой последовательности, который указывает <paramref name="_Where" />.
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, который остается, кроме тех, которые удалены элементы, или <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_Where">
                Позиция удаляемого элемента.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              Удаляет элемент управляемой последовательности в диапазоне [<paramref name="_First_iter" />, <paramref name="_Last_iter" />).
            </summary>
      <param name="__unnamed0">
                Итератор, задающий первый элемент, который остается, кроме тех, которые удалены элементы, или <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@)" /> Если такого элемента не существует.
              </param>
      <param name="_First_iter">
                Начало диапазона элементов для удаления.
              </param>
      <param name="_Last_iter">
                Первая позиция за пределами диапазона элементов для удаления.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.front">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.get_generation">
      <summary>
              Возвращает текущее поколение изменений базового контейнера.
            </summary>
      <returns>
              Текущее поколение изменений базового контейнера.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              Вставляет заданное значение в контейнер.
            </summary>
      <param name="__unnamed0">
                Итератор, указывающий на вставленный элемент.
              </param>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо вставить.
              </param>
      <param name="_Val">
                Значение элемента, который требуется вставить в контейнер.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              Вставляет последовательность, которая начинается с <paramref name="_First" /> и заканчивая предыдущий элемент <paramref name="_Last" /> в контейнер.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо вставить.
              </param>
      <param name="_First">
                Начальное положение диапазона для вставки в контейнере.
              </param>
      <param name="_Last">
                Первая позиция за пределами диапазона для вставки в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              Вставляет последовательность, назначенную перечислителем в контейнер.
            </summary>
      <param name="_Where_iter">
                Положение в контейнере, перед которым необходимо вставить.
              </param>
      <param name="_Right">
                Перечисление, которое необходимо вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              Вставляет указанный количество указанных элементов в контейнер.
            </summary>
      <param name="_Where">
                Положение в контейнере, перед которым необходимо вставить.
              </param>
      <param name="_Count">
                Число элементов, которые необходимо вставить в контейнер.
              </param>
      <param name="_Val">
                Значение элемента, который требуется вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.pop_back">
      <summary>
              Удаляет последний элемент из контейнера.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)">
      <summary>
              Добавляет новый элемент в конец контейнера.
            </summary>
      <param name="_Val">
                Значение элемента, который требуется вставить в контейнер.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Задает начало обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который задает последний элемент управляемой последовательности, или положение перед началом пустой последовательности.
                 Таким образом, он определяет <paramref name="beginning" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> Начало управляемой последовательности, отображаемой в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator{`0}@)">
      <summary>
              Задает конец обратной управляемой последовательности.
            </summary>
      <param name="__unnamed0">
                Обратный итератор, который указывает начало управляемой последовательности.
                 Таким образом, он определяет <paramref name="end" /> для обратной последовательности.
                 Используется для получения итератора, который определяет <paramref name="current" /> конец управляемой последовательности, отображаемой в обратном порядке, однако его статус можно изменить при изменении длины управляемой последовательности.
              </param>
      <returns>
              Итератор.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)">
      <summary>
              Резервирует место, для обеспечения минимальное увеличение емкости для контейнера.
            </summary>
      <param name="_Capacity">
                Новая Минимальная вместимость контейнера.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)">
      <summary>
              Изменяет количество элементов в контейнере до заданного размера.
            </summary>
      <param name="_Newsize">
                Новый размер управляемой последовательности.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)">
      <summary>
              Изменяет количество элементов в контейнере до заданного размера.
               Если новый размер больше старого, метод добавляет элементы со значением <paramref name="_Val" />.
            </summary>
      <param name="_Newsize">
                Новый размер управляемой последовательности.
              </param>
      <param name="_Val">
                Значение элементов для вставки.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.size">
      <summary>
              Подсчитывает количество элементов в контейнере.
            </summary>
      <returns>
              Длина управляемой последовательности.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})">
      <summary>
              Меняет местами содержимое двух контейнеров.
            </summary>
      <param name="A_0">
                Контейнер, с которым производится обмен содержимым.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> объекта.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <summary>
              Освобождает, освобождает или сбрасывает неуправляемые ресурсы, используемые <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)">
      <summary>
              Освобождает или сбрасывает неуправляемые ресурсы, которые использует объект <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />.
            </summary>
      <param name="A_0">
                <see langword="true" /> — для удаления управляемых объектов. <see langword="false" /> — для удаления неуправляемых объектов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" /> объекта.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> объекта.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <summary>
              Освобождает, освобождает или сбрасывает неуправляемые ресурсы, используемые <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)">
      <summary>
              Освобождает или сбрасывает неуправляемые ресурсы, которые использует объект <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />.
            </summary>
      <param name="A_0">
                <see langword="true" /> — для удаления управляемых объектов. <see langword="false" /> — для удаления неуправляемых объектов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" /> объекта.
            </summary>
      <param name="_First">
                Первый узел в контейнере, по которому выполняется итерация.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> объекта.
            </summary>
      <param name="_Cont">
                Контейнер, по которому выполняется итерация.
              </param>
      <param name="_First">
                Смещение текущего первого элемента в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <summary>
              Освобождает, освобождает или сбрасывает неуправляемые ресурсы, используемые <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> объекта.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)">
      <summary>
              Освобождает или сбрасывает неуправляемые ресурсы, которые использует объект <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />.
            </summary>
      <param name="A_0">
                <see langword="true" /> — для удаления управляемых объектов. <see langword="false" /> — для удаления неуправляемых объектов.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>
              Выделяет и инициализирует новый <see cref="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" /> объекта.
            </summary>
      <param name="_Cont">
                Контейнер, по которому выполняется итерация.
              </param>
      <param name="_First">
                Смещение текущего первого элемента в контейнере.
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу в коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1.Item(System.Int32)">
      <summary>
              Обращается к элементу в заданном положении в контейнере.
            </summary>
      <param name="_Pos">
                Номер доступа к элементу.
              </param>
      <returns>
              Элемент в заданном положении в контейнере.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1.Item(System.Int32)">
      <summary>
              Обращается к элементу в заданном положении в контейнере.
            </summary>
      <param name="_Pos">
                Номер доступа к элементу.
              </param>
      <returns>
              Элемент в заданном положении в контейнере.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1.Item(System.Int32)">
      <summary>
              Обращается к элементу в заданном положении в контейнере.
            </summary>
      <param name="_Pos">
                Номер доступа к элементу.
              </param>
      <returns>
              Элемент в заданном положении в контейнере.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value">
      <summary>
              Возвращает или задает значение элемента для данного узла в контейнере.
            </summary>
      <returns>
              Значение элемента для данного узла в контейнере.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1.Item(System.Int32)">
      <summary>
              Обращается к элементу в заданном положении в контейнере.
            </summary>
      <param name="_Pos">
                Номер доступа к элементу.
              </param>
      <returns>
              Элемент в заданном положении в контейнере.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
      <summary>
              Обращается к последнего непустого элемента deque коллекции.
            </summary>
      <returns>
              Последний элемент управляемой последовательности.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
      <summary>
              Обращается к первому элементу непустой deque коллекции.
            </summary>
      <returns>
              Первый элемент управляемой последовательности.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
      <summary>
              Возвращает или задает элемент в указанном положении в контейнере.
            </summary>
      <param name="_Pos">
                Положение элемента, который требуется получить или задать.
              </param>
      <returns>
              Элемент в указанном положении.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.back_item">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.front_item">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item">
      <summary>
              Обращается к элементу наивысший приоритет контейнера.
            </summary>
      <returns>
              Начало (наивысший приоритет) элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IStack`2.top_item">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.back_item">
      <summary>
              Обращается к последнему элементу контейнера.
            </summary>
      <returns>
              Последний элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.front_item">
      <summary>
              Обращается к первому элементу контейнера.
            </summary>
      <returns>
              Первый элемент управляемой последовательности, который должен быть пустым.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)">
      <summary>
              Обращается к элементу в указанной позиции в контейнере.
            </summary>
      <param name="_Pos">
                Номер доступа к элементу.
              </param>
      <returns>
              Элемент в позиции <paramref name="_Pos" />.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current">
      <summary>
              Возвращает или задает текущий элемент в коллекции.
            </summary>
      <returns>
              Текущий элемент в коллекции.
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.BinaryDelegate`3">
      <summary>
              Описывает делегат с двумя аргументами.
               Он используется для указания аргументов и типа возвращаемого значения делегата.
            </summary>
      <param name="A_0">
                Первый аргумент.
              </param>
      <param name="A_1">
                Второй аргумент.
              </param>
      <typeparam name="TArg1">
                Первый аргумент делегата.
              </typeparam>
      <typeparam name="TArg2">
                Второй аргумент делегата.
              </typeparam>
      <typeparam name="TResult">
                Возвращаемый тип делегата.
              </typeparam>
      <returns>
              Возвращаемый тип делегата.
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <summary>
              Поддерживает простой перебор для любого объекта STL/CLR, который реализует интерфейс <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" />.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" /> интерфейса.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <summary>
              Определяет итератор, который может получить доступ к элементам контейнера в прямом направлении, используя оператор инкремента, или в обратном направлении, используя оператор декремента.
               Невозможно изменить элемент, на который указывает итератор.
               Двунаправленные итераторы можно использовать везде, где требуется итератор ввода или вывода константы.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerR*******omAccessIterator`1">
      <summary>
              Предоставляет итератор, который поддерживает следующие операции: перемещение вперед на одну позицию путем вызова operator++, перемещая одну позицию назад, вызвав operator--, доступ к элементу с помощью operator[]и доступ к элементу с помощью арифметических операций над указателями.
               Невозможно изменить элемент, на который указывает итератор.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <summary>
              Определяет итератор, который получает доступ к элементам контейнера в обратном направлении.
               Элементам может осуществляться в прямом направлении, используя оператор декремента и в обратном направлении, используя оператор инкремента.
               Невозможно изменить элемент, на который указывает итератор.
               Константы обратного Двунаправленные итераторы можно использовать в любом месте, ввода или константой обратного выходной итератор является обязательным.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseR*******omAccessIterator`1">
      <summary>
              Предоставляет итератор, который поддерживает следующие операции: перемещение вперед на одну позицию путем вызова operator--, перемещая одну позицию назад, вызвав operator++, доступ к элементу с помощью operator[]и доступ к элементу с помощью арифметических операций над указателями.
               Невозможно изменить элемент, обращаются к итератору.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <summary>
              Определяет итератор, который может получить доступ к элементам контейнера в прямом направлении, используя оператор инкремента, или в обратном направлении, используя оператор декремента.
               Элемент, на который указывает итератор как записи и чтения из любое число раз.
               Двунаправленные итераторы можно использовать в любом что итератор ввода или вывода является обязательным.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerR*******omAccessIterator`1">
      <summary>
              Предоставляет итератор, который поддерживает следующие операции: перемещение вперед на одну позицию путем вызова operator++, перемещая одну позицию назад, вызвав operator--, доступ к элементу с помощью operator[]и доступ к элементу с помощью арифметических операций над указателями.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <summary>
              Определяет базовый интерфейс для всех итераторов STL/CLR.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <summary>
              Интерфейс для контейнера, поддерживающего итерации вперед и назад.
               Контейнеры, реализующие двунаправленные итерации, поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова operator++, и перемещение на одну позицию назад с помощью вызова operator--.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <summary>
              Интерфейс для итератора, который может получить доступ к элементы контейнера в прямом направлении, используя оператор увеличения или в обратном направлении, используя оператор декремента.
               Элемент, на который указывает итератор и записи и чтения из любое число раз.
               Двунаправленные итераторы можно использовать в любом месте требуется итератор ввода или вывода.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <summary>
              Интерфейс для итератора, который может обращаться к элементам контейнера только в прямом направлении, используя оператор увеличения.
               Элемент, на который указывает итератор и записи и чтения из любое число раз.
               Прямые итераторы можно использовать в любом месте требуется итератор ввода или вывода.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <summary>
              Интерфейс для итератора, который используется для чтения из контейнера только в прямом направлении последовательности.
               Элемент, на который указывает итератор можно прочитать только один раз и не может быть изменен.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <summary>
              Интерфейс для структуры данных узла.
               Контейнеры, поддерживающие двунаправленную итерацию содержат узлы.
               Узел состоит из значения элемента в этой позиции в контейнере и указателей на предыдущий и следующий элементы в контейнере.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <summary>
              Интерфейс для итератора, который используется для записи последовательности элементов контейнера только в прямом направлении.
               Элемент, на который указывает итератор сможет только один раз.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessContainer`1">
      <summary>
              Интерфейс для контейнера, поддерживающего итерации с произвольным доступом.
               Контейнеры, реализующие итерации с произвольным доступом, поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова operator++, перемещение на одну позицию назад с помощью вызова operator--, доступ к элементу с помощью operator[], и доступ к элементу с помощью арифметических операций над указателями.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IR*******omAccessIterator`1">
      <summary>
              Определяет интерфейс для итератора произвольного доступа.
               Итераторы произвольного доступа поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова operator++, перемещение на одну позицию назад с помощью вызова operator--, доступ к элементу с помощью operator[], и доступ к элементу с помощью арифметических операций над указателями.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <summary>
              Определяет итератор, который обходит элементы контейнера в противоположном направлении.
               Элементам может осуществляться в прямом направлении, используя оператор декремента и в обратном направлении, используя оператор увеличения.
               Элемент, на который указывает итератор и записи и чтения из любое число раз.
               Обратная Двунаправленные итераторы можно использовать в любом месте ввода или вывода обратного итератора является обязательным.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseR*******omAccessIterator`1">
      <summary>
              Предоставляет итератор, который поддерживает следующие операции: перемещение на одну позицию вперед с помощью вызова operator--, перемещение на одну позицию назад с помощью вызова operator++, доступ к элементу с помощью operator[], и доступ к элементу с помощью арифметических операций над указателями.
            </summary>
      <typeparam name="TValue">
                
      Тип элемента в управляемой последовательности.
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.GenericPair`2">
      <summary>
              Описывает объект, который создает оболочку для пары значений.
            </summary>
      <typeparam name="TValue1">
                Тип первого значения в паре.
              </typeparam>
      <typeparam name="TValue2">
                Тип второго значения в паре.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <summary>
              Поддерживает простой перебор для любого объекта STL/CLR, который реализует интерфейс <see cref="T:Microsoft.VisualC.StlClr.IHash`2" />.
            </summary>
      <typeparam name="TKey">
                Тип ключа итератора хэша.
              </typeparam>
      <typeparam name="TValue">
                Тип значения итератора хэша.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <summary>
              Поддерживает простой перебор для любого объекта STL/CLR, который реализует интерфейс <see cref="T:Microsoft.VisualC.StlClr.IHash`2" />.
            </summary>
      <typeparam name="TKey">
                Тип ключа итератора хэша.
              </typeparam>
      <typeparam name="TValue">
                Тип значения итератора хэша.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IDeque`1">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR deque объекта.
            </summary>
      <typeparam name="TValue">
                Тип, который содержится.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IHash`2">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR hash_map, hash_multimap, hash_set, и hash_multiset объектов.
            </summary>
      <typeparam name="TKey">
                Тип компонента ключа элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TValue">
                Тип компонента значение элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IList`1">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR объекта list.
            </summary>
      <typeparam name="TValue">
                Тип элемента списка.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR объекта priority_queue.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TCont">
                Тип базового контейнера.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IQueue`2">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR объекта queue.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TCont">
                Тип базового контейнера.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IStack`2">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR объекта stack.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TCont">
                Тип базового контейнера.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ITree`2">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR hash_map, hash_multimap, hash_set, и hash_multiset объектов.
            </summary>
      <typeparam name="TKey">
                Тип компонента ключа элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TValue">
                Тип компонента значение элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IVector`1">
      <summary>
              Определяет интерфейс для библиотеки STL/CLR объекта vector.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> интерфейса.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> интерфейса.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> интерфейса.
            </summary>
      <typeparam name="TKey">
                Тип компонента ключа элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TValue">
                Тип компонента значение элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> интерфейса.
            </summary>
      <typeparam name="TKey">
                Тип компонента ключа элемента в управляемой последовательности.
              </typeparam>
      <typeparam name="TValue">
                Тип компонента значение элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.UnaryDelegate`2">
      <summary>
              Описывает делегат с одним аргументом.
               Он используется для указания аргумента и возвращаемого типа делегата.
            </summary>
      <param name="A_0">
                Аргумент делегата.
              </param>
      <typeparam name="TArg">
                Тип аргумента делегата.
              </typeparam>
      <typeparam name="TResult">
                Возвращаемый тип делегата.
              </typeparam>
      <returns>
              Возвращаемый тип делегата.
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> интерфейса.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <summary>
              Поддерживает простой перебор любой объект STL/CLR, который реализует <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> интерфейса.
            </summary>
      <typeparam name="TValue">
                Тип элемента в управляемой последовательности.
              </typeparam>
    </member>
  </members>
</doc>
