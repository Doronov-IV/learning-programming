// <auto-generated />
using System;
using MainEntityProject.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MainEntityProject.Migrations
{
    [DbContext(typeof(VehicleDatabaseContext))]
    [Migration("20230203091834_ChangeBarrelLengthToDouble")]
    partial class ChangeBarrelLengthToDouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MainEntityProject.Model.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HorsePowers")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId")
                        .IsUnique()
                        .HasFilter("[ManufacturerId] IS NOT NULL");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Gun", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CaliberMillimetres")
                        .HasColumnType("int");

                    b.Property<double?>("LengthInCalibers")
                        .HasColumnType("float");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId")
                        .IsUnique()
                        .HasFilter("[ManufacturerId] IS NOT NULL");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.ToTable("Guns");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.MainBattleTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CrewCount")
                        .HasColumnType("int");

                    b.Property<int?>("EngineId")
                        .HasColumnType("int");

                    b.Property<int?>("GunId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId")
                        .IsUnique()
                        .HasFilter("[EngineId] IS NOT NULL");

                    b.HasIndex("GunId")
                        .IsUnique()
                        .HasFilter("[GunId] IS NOT NULL");

                    b.HasIndex("ManufacturerId")
                        .IsUnique()
                        .HasFilter("[ManufacturerId] IS NOT NULL");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId")
                        .IsUnique()
                        .HasFilter("[BudgetId] IS NOT NULL");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Engine", b =>
                {
                    b.HasOne("MainEntityProject.Model.Entities.Manufacturer", "ManufacturerReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.Engine", "ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MainEntityProject.Model.Entities.Price", "PriceReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.Engine", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ManufacturerReference");

                    b.Navigation("PriceReference");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Gun", b =>
                {
                    b.HasOne("MainEntityProject.Model.Entities.Manufacturer", "ManufacturerReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.Gun", "ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MainEntityProject.Model.Entities.Price", "PriceReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.Gun", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ManufacturerReference");

                    b.Navigation("PriceReference");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.MainBattleTank", b =>
                {
                    b.HasOne("MainEntityProject.Model.Entities.Engine", "EngineReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.MainBattleTank", "EngineId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MainEntityProject.Model.Entities.Gun", "GunReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.MainBattleTank", "GunId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MainEntityProject.Model.Entities.Manufacturer", "ManufacturerReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.MainBattleTank", "ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MainEntityProject.Model.Entities.Price", "PriceReference")
                        .WithOne()
                        .HasForeignKey("MainEntityProject.Model.Entities.MainBattleTank", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EngineReference");

                    b.Navigation("GunReference");

                    b.Navigation("ManufacturerReference");

                    b.Navigation("PriceReference");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Manufacturer", b =>
                {
                    b.HasOne("MainEntityProject.Model.Entities.Budget", "BudgetReference")
                        .WithOne("ManufacturerReference")
                        .HasForeignKey("MainEntityProject.Model.Entities.Manufacturer", "BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BudgetReference");
                });

            modelBuilder.Entity("MainEntityProject.Model.Entities.Budget", b =>
                {
                    b.Navigation("ManufacturerReference");
                });
#pragma warning restore 612, 618
        }
    }
}
